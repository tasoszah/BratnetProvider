<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom</name>
    </assembly>
    <members>
        <member name="T:Atom.ArgumentConstants">
            <summary>
            Constants related to arguments
            </summary>
        </member>
        <member name="F:Atom.ArgumentConstants.ArgsSuffix">
            <summary>
            The suffix of all the argument types
            </summary>
        </member>
        <member name="F:Atom.ArgumentConstants.AfterDatePrefix">
            <summary>
            The prefix that is used for after arguments
            </summary>
        </member>
        <member name="F:Atom.ArgumentConstants.BeforeDatePrefix">
            <summary>
            The prefix that is used for before arguments
            </summary>
        </member>
        <member name="F:Atom.ArgumentConstants.MinNumericPrefix">
            <summary>
            The prefix that is used for min arguments
            </summary>
        </member>
        <member name="F:Atom.ArgumentConstants.MaxNumericPrefix">
            <summary>
            The prefix that is used for max arguments
            </summary>
        </member>
        <member name="F:Atom.ArgumentConstants.IncludePrefix">
            <summary>
            The prefix that is used for include arguments
            </summary>
        </member>
        <member name="F:Atom.ArgumentConstants.ExcludePrefix">
            <summary>
            The prefix that is used for exclude arguments
            </summary>
        </member>
        <member name="M:Atom.ArgumentConstants.RemovePrefixes(System.String,System.Boolean)">
            <summary>
            Removes the argument prefixes from the specified <paramref name="argumentName"/>.
            Ex.: Input: IncludeCustomers
                 Output: Customers
            </summary>
            <param name="argumentName">The argument name</param>
            <param name="caseSensitiveSearch">A flag indicating whether the search for the prefixes should be done using case sensitivity or not</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ArgumentConstants.RemovePrefix(System.String,System.String)">
            <summary>
            Removes the specified <paramref name="prefix"/> from the specified <paramref name="argumentName"/>
            </summary>
            <param name="argumentName">The argument name</param>
            <param name="prefix">The prefix</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ArgumentConstants.GetFilterType(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:Atom.FilterType"/> that represents the filter related to the argument with the
            specified <paramref name="argumentName"/>
            </summary>
            <param name="argumentName">The argument name</param>
            <param name="caseSensitiveSearch">A flag indicating whether the search for the prefixes should be done using case sensitivity or not</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ArrayExtensions">
            <summary>
            Extension methods for arrays
            </summary>
        </member>
        <member name="M:Atom.ArrayExtensions.Append``1(``0[],``0[])">
            <summary>
            Append the given objects to the original source array
            </summary>
            <typeparam name="T">The type of array</typeparam>
            <param name="source">The original array of values</param>
            <param name="toAdd">The values to append to the source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ArrayExtensions.Prepend``1(``0[],``0[])">
            <summary>
            Prepend the given objects to the original source array
            </summary>
            <typeparam name="T">The type of array</typeparam>
            <param name="source">The original array of values</param>
            <param name="toAdd">The values to prepend to the source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ArrayExtensions.ForEach(System.Array,System.Action{System.Array,System.Int32[]})">
            <summary>
            One-line for each for arrays
            </summary>
            <param name="array">The source</param>
            <param name="action">The action to run</param>
        </member>
        <member name="T:Atom.AssemblyHelpers">
            <summary>
            Helper methods for <see cref="T:System.Reflection.Assembly"/>
            </summary>
        </member>
        <member name="F:Atom.AssemblyHelpers.OptionsDirectoryName">
            <summary>
            The name of the options directory
            </summary>
        </member>
        <member name="M:Atom.AssemblyHelpers.GetEntryAssemblyDirectoryPath">
            <summary>
            Gets the directory path of the entry assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.AssemblyHelpers.GetOptionsDirectoryPath">
            <summary>
            Gets the directory path of the options directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.AssemblyHelpers.LoadFromDirectory(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Loads all the assemblies that can be loaded from the specified <paramref name="directoryPath"/>
            </summary>
            <param name="directoryPath">The directory path</param>
            <param name="filter">Filter used for selecting certain DLL files</param>
            <returns></returns>
        </member>
        <member name="T:Atom.AsyncAwaiter">
            <summary>
            Asynchronously awaits multiple tasks that are grouped based on a key
            </summary>
        </member>
        <member name="F:Atom.AsyncAwaiter.SelfLock">
            <summary>
            A semaphore to lock the semaphore list
            </summary>
        </member>
        <member name="F:Atom.AsyncAwaiter.Semaphores">
            <summary>
            A list of all semaphore locks (one per key)
            </summary>
        </member>
        <member name="M:Atom.AsyncAwaiter.AwaitResultAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Int32)">
            <summary>
            Awaits for any outstanding tasks to complete that are accessing the same key then runs the given task, returning it's value
            </summary>
            <param name="key">The key to await</param>
            <param name="task">The task to perform inside of the semaphore lock</param>
            <param name="maxAccessCount">If this is the first call, sets the maximum number of tasks that can access this task before it waiting</param>
            <returns></returns>
        </member>
        <member name="M:Atom.AsyncAwaiter.AwaitAsync(System.String,System.Func{System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Awaits for any outstanding tasks to complete that are accessing the same key then runs the given task
            </summary>
            <param name="key">The key to await</param>
            <param name="task">The task to perform inside of the semaphore lock</param>
            <param name="maxAccessCount">If this is the first call, sets the maximum number of tasks that can access this task before it waiting</param>
            <returns></returns>
        </member>
        <member name="M:Atom.AsyncAwaiter.AwaitAsync(System.String,System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Awaits for any outstanding tasks to complete that are accessing the same key then runs the given task
            </summary>
            <param name="key">The key to await</param>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to perform inside of the semaphore lock</param>
            <param name="maxAccessCount">If this is the first call, sets the maximum number of tasks that can access this task before it waiting</param>
            <returns></returns>
        </member>
        <member name="M:Atom.AsyncAwaiter.AwaitAsync``1(System.String,System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task{``0}},System.Int32)">
            <summary>
            Awaits for any outstanding tasks to complete that are accessing the same key then runs the given task
            </summary>
            <param name="key">The key to await</param>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to perform inside of the semaphore lock</param>
            <param name="maxAccessCount">If this is the first call, sets the maximum number of tasks that can access this task before it waiting</param>
            <returns></returns>
        </member>
        <member name="T:Atom.AsyncHelpers">
            <summary>
            The helper methods for the asynchronous methods
            </summary>
        </member>
        <member name="F:Atom.AsyncHelpers.mTaskFactory">
            <summary>
            The task factory
            </summary>
        </member>
        <member name="M:Atom.AsyncHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns the result of the asynchronous <paramref name="func"/> by waiting the execution from another thread
            </summary>
            <typeparam name="TResult">The result</typeparam>
            <param name="func">The function</param>
            <returns></returns>
        </member>
        <member name="M:Atom.AsyncHelpers.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes the asynchronous <paramref name="func"/> by waiting the execution from another thread
            </summary>
            <param name="func">The function</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DebuggerDisplayAttributeExtensions">
            <summary>
            The extension methods for the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/>
            </summary>
        </member>
        <member name="M:Atom.DebuggerDisplayAttributeExtensions.GetFormattedValue(System.Diagnostics.DebuggerDisplayAttribute,System.Object)">
            <summary>
            Return the <see cref="P:System.Diagnostics.DebuggerDisplayAttribute.Value"/> after replacing the formatted values
            using the respective properties of the <paramref name="instance"/>
            </summary>
            <param name="attribute">The attribute</param>
            <param name="instance">The instance</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DependendsOnMemberAttribute">
            <summary>
            Attributes that is used for indicating that the value returned by a member is depending on other members
            </summary>
        </member>
        <member name="P:Atom.DependendsOnMemberAttribute.Members">
            <summary>
            The names of the members
            </summary>
        </member>
        <member name="M:Atom.DependendsOnMemberAttribute.#ctor(System.String[])">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.ForceRecalculationAttribute">
            <summary>
            The attribute that forces the recalculation for the computed properties.
            NOTE: If the property is not computed, then the attribute is ignored.
            </summary>
        </member>
        <member name="M:Atom.ForceRecalculationAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.IgnoreAttribute">
            <summary>
            Marks an item as ignorable
            </summary>
        </member>
        <member name="M:Atom.IgnoreAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.IsSearchable">
            <summary>
            The attribute for identifying the properties that can be used for searching based on string value
            </summary>
        </member>
        <member name="M:Atom.IsSearchable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.IsSortableAttribute">
            <summary>
            The attribute for identifying the properties that can be used for ordering
            </summary>
        </member>
        <member name="M:Atom.IsSortableAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.NameAttribute">
            <summary>
            Provides name meta data to an item
            </summary>
        </member>
        <member name="P:Atom.NameAttribute.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="M:Atom.NameAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="T:Atom.RenameAttribute">
            <summary>
            The attribute that contains meta data related to a rename.
            </summary>
        </member>
        <member name="P:Atom.RenameAttribute.OldName">
            <summary>
            The old name
            </summary>
        </member>
        <member name="M:Atom.RenameAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="oldName">The old name</param>
        </member>
        <member name="T:Atom.CharExtensions">
            <summary>
            Extension methods for chars
            </summary>
        </member>
        <member name="M:Atom.CharExtensions.IsDigit(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is a digit.
            </summary>
            <param name="c">The character to check if it is a digit.</param>
            <returns>True if the character is a digit, otherwise false.</returns>
        </member>
        <member name="M:Atom.CharExtensions.IsLower(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is a lower case ASCII letter.
            </summary>
            <param name="c">The character to check if it is a lower case ASCII letter.</param>
            <returns>True if the character is a lower case ASCII letter, otherwise false.</returns>
        </member>
        <member name="M:Atom.CharExtensions.IsUpper(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is an upper case ASCII letter.
            </summary>
            <param name="c">The character to check if it is an upper case ASCII letter.</param>
            <returns>True if the character is an upper case ASCII letter, otherwise false.</returns>
        </member>
        <member name="M:Atom.CharExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is an ASCII letter or digit.
            </summary>
            <param name="c">The character to check if it is an ASCII letter or digit.</param>
            <returns>True if the character is an ASCII letter or digit, otherwise false.</returns>
        </member>
        <member name="T:Atom.ClassWrapper`1">
            <summary>
            Used for wrapping an item in a class
            </summary>
            <typeparam name="T">The type of the item</typeparam>
        </member>
        <member name="P:Atom.ClassWrapper`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.ClassWrapper`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.ClassWrapper`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ClassWrapper`1.Equals(Atom.ClassWrapper{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ClassWrapper`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ClassWrapper`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ClassWrapper`1.op_Implicit(`0)~Atom.ClassWrapper{`0}">
            <summary>
            Creates and returns a <see cref="T:Atom.ClassWrapper`1"/> from the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.ClassWrapper`1.op_Explicit(Atom.ClassWrapper{`0})~`0">
            <summary>
            Creates and returns a <typeparamref name="T"/> from the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.ClassWrapper`1.op_Equality(Atom.ClassWrapper{`0},Atom.ClassWrapper{`0})">
            <summary>
            Determines whether two specified <see cref="T:Atom.ClassWrapper`1"/>s have the same value
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ClassWrapper`1.op_Inequality(Atom.ClassWrapper{`0},Atom.ClassWrapper{`0})">
            <summary>
            Determines whether tow specified <see cref="T:Atom.ClassWrapper`1"/>s have different values
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IdentifiableWrapper`2">
            <summary>
            A wrapper used for providing an id to a value
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the item</typeparam>
        </member>
        <member name="P:Atom.IdentifiableWrapper`2.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:Atom.IdentifiableWrapper`2.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.IdentifiableWrapper`2.#ctor(`0,`1)">
            <summary>
            Default constructor
            </summary>
            <param name="id">The id</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.IdentifiableWrapper`2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IdentifiableWrapper`1">
            <summary>
            An <see cref="T:Atom.IdentifiableWrapper`2"/> that uses a <see cref="T:System.String"/>
            as the type of the id
            </summary>
            <typeparam name="TValue">The type of the value</typeparam>
        </member>
        <member name="M:Atom.IdentifiableWrapper`1.#ctor(System.String,`0)">
            <summary>
            Default constructor
            </summary>
            <param name="id">The id</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.IdentifiableWrapper`1.Create(`0)">
            <summary>
            Creates and returns a <see cref="T:Atom.IdentifiableWrapper`1"/> for the 
            specified <paramref name="value"/> with a <see cref="T:System.Guid"/> as the
            id
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ReferenceWrapper`1">
            <summary>
            Used for wrapping an item in a class and providing reference based equality
            </summary>
            <typeparam name="T">The type of the item</typeparam>
        </member>
        <member name="P:Atom.ReferenceWrapper`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.ReferenceWrapper`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:Atom.SelectableWrapper`1">
            <summary>
            A <see cref="T:Atom.ClassWrapper`1"/> that provides selection functionality to an item
            </summary>
            <typeparam name="T">The type of the item</typeparam>
        </member>
        <member name="P:Atom.SelectableWrapper`1.IsSelected">
            <summary>
            A flag indicating whether the item is selected or not
            </summary>
        </member>
        <member name="M:Atom.SelectableWrapper`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Atom.SelectableWrapper`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.SelectableWrapper`1.Equals(Atom.SelectableWrapper{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Atom.SelectableWrapper`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Atom.SelectableWrapper`1.op_Equality(Atom.SelectableWrapper{`0},Atom.SelectableWrapper{`0})">
            <summary>
            Determines whether two specified <see cref="T:Atom.SelectableWrapper`1"/>s have the same value
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="M:Atom.SelectableWrapper`1.op_Inequality(Atom.SelectableWrapper{`0},Atom.SelectableWrapper{`0})">
            <summary>
            Determines whether tow specified <see cref="T:Atom.SelectableWrapper`1"/>s have different values
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ColorExtensions">
            <summary>
            Extension methods for <see cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="M:Atom.ColorExtensions.PerceivedBrightness(System.Drawing.Color)">
            <summary>
            Perceives the brightness of the <paramref name="c"/> using a special formula
            </summary>
            <param name="c">The color to perceive its brightness</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorExtensions.ToHex(System.Drawing.Color,System.Boolean)">
            <summary>
            Converts the given <paramref name="c"/> to its hex value
            </summary>
            <param name="c">The color to convert to hex</param>
            <param name="useHash">If true, then a hash '#' is placed in front of the hex, otherwise it's not</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorExtensions.ToDarkerColor(System.Drawing.Color,System.UInt32)">
            <summary>
            Darkens the given <paramref name="c"/>
            </summary>
            <param name="c">The color to darken</param>
            <param name="level">The darken level</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorExtensions.ToLighterColor(System.Drawing.Color,System.UInt32)">
            <summary>
            Lightens the given <paramref name="c"/>
            </summary>
            <param name="c">The color to lighten</param>
            <param name="level">The darken level</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorExtensions.ChangeColorComponent(System.Int32,System.Boolean,System.UInt32)">
            <summary>
            Changes the given <paramref name="colorComponent"/> based on the <paramref name="level"/>
            </summary>
            <param name="colorComponent">The color component to change</param>
            <param name="darker">A flag indicating whether the color should become darker</param>
            <param name="level">The level of the change</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorExtensions.DarkOrWhite(System.Drawing.Color)">
            <summary>
            Selects between black and white, the more fitting color to contrast the given <paramref name="c"/>
            </summary>
            <param name="c">The color to find the more fitting contrast</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ColorHelpers">
            <summary>
            Helper methods related to colors
            </summary>
        </member>
        <member name="F:Atom.ColorHelpers.mRandom">
            <summary>
            Used for generating random colors
            </summary>
        </member>
        <member name="M:Atom.ColorHelpers.RandomColor">
            <summary>
            Generates a random color
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorHelpers.FromString(System.String)">
            <summary>
            Generates a color that represents the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorHelpers.FromColorsRange(System.Nullable{System.Int32},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Drawing.Color},System.Drawing.Color)">
            <summary>
            Generates a color based on the specified <paramref name="colors"/> the <paramref name="minValue"/>, the <paramref name="maxValue"/>
            and the <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <param name="minValue">The minimum value</param>
            <param name="maxValue">The maximum value</param>
            <param name="colors">The colors</param>
            <param name="fallbackColor">The fallback color</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorHelpers.FromColorsRange(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Generates a color based on the specified <paramref name="minValue"/>, the <paramref name="maxValue"/> and the <paramref name="value"/>.
            </summary>
            <param name="value">The value</param>
            <param name="minValue">The min value</param>
            <param name="maxValue">The max value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColorHelpers.FromHex(System.String)">
            <summary>
            Creates and returns a <see cref="T:System.Drawing.Color"/> from the specified <paramref name="hex"/> value
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:Atom.RelayCommand">
            <summary>
            A basic command that runs an action
            </summary>
        </member>
        <member name="F:Atom.RelayCommand.mAction">
            <summary>
            The action to run
            </summary>
        </member>
        <member name="M:Atom.RelayCommand.#ctor(System.Action)">
            <summary>
            Default constructor
            </summary>
            <param name="action">The action the relay command executes</param>
        </member>
        <member name="M:Atom.RelayCommand.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.RelayCommand.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="E:Atom.RelayCommand.CanExecuteChanged">
            <summary>
            The event thats fired when the <see cref="M:Atom.RelayCommand.CanExecute(System.Object)"/> value has changed
            </summary>
        </member>
        <member name="T:Atom.RelayCommand`1">
            <summary>
            The base for every custom command
            </summary>
            <typeparam name="TArgs">The type of the arguments of the command</typeparam>
        </member>
        <member name="P:Atom.RelayCommand`1.Action">
            <summary>
            The action that the command executes
            </summary>
        </member>
        <member name="M:Atom.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="action">The action that the command executes</param>
        </member>
        <member name="M:Atom.RelayCommand`1.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.RelayCommand`1.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.RelayCommand`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="E:Atom.RelayCommand`1.CanExecuteChanged">
            <summary>
            Event that fires every that the can execute state changes
            </summary>
        </member>
        <member name="T:Atom.ComparableComparer`1">
            <summary>
            The default comparer used for comparing two <see cref="T:System.IComparable"/> types.
            NOTE: This comparable is usually used for comparing nullable primitive types!
            </summary>
        </member>
        <member name="M:Atom.ComparableComparer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ComparableComparer`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.DefaultComparer`1">
            <summary>
            Comparer that extracts a value of every item of type <typeparamref name="T"/> and uses it for comparison after converting it to a <see cref="T:System.String"/>
            </summary>
            <typeparam name="T">The type of the item</typeparam>
        </member>
        <member name="F:Atom.DefaultComparer`1.mKeyExtractor">
            <summary>
            Extractor that extracts the value of the object that is used for the comparison
            </summary>
        </member>
        <member name="M:Atom.DefaultComparer`1.#ctor">
            <summary>
            Default constructor
            NOTE: The default comparer sets the uses the string that represents the object to perform comparisons!
            </summary>
        </member>
        <member name="M:Atom.DefaultComparer`1.#ctor(System.Func{`0,System.Object})">
            <summary>
            Standard constructor
            </summary>
            <param name="keyExtractor">Extractor that extracts the value of the object that is used for the comparison</param>
        </member>
        <member name="M:Atom.DefaultComparer`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.DefaultStringEnumerableComparer">
            <summary>
            The default comparer used for comparing two <see cref="!:IEnumerable&lt;string&gt;"/> values
            </summary>
        </member>
        <member name="M:Atom.DefaultStringEnumerableComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.DefaultStringEnumerableComparer.Compare(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Atom.LengthBasedEnumerableComparer">
            <summary>
            A comparer for an <see cref="T:System.Collections.IEnumerable"/> that compares based on the items count of the enumerables
            </summary>
        </member>
        <member name="M:Atom.LengthBasedEnumerableComparer.Compare(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.LengthBasedStringComparer">
            <summary>
            Comparer that compares two <see cref="T:System.String"/> values but firstly comparing their sizes and then if needed their contents
            </summary>
        </member>
        <member name="F:Atom.LengthBasedStringComparer.mDescendingSameStringLengthOrdering">
            <summary>
            A flag indicating whether strings with the same length should get ordered in a descending order
            </summary>
        </member>
        <member name="M:Atom.LengthBasedStringComparer.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="descendingSameStringLengthOrdering">A flag indicating whether strings with the same length should get ordered in a descending order</param>
        </member>
        <member name="M:Atom.LengthBasedStringComparer.Compare(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.NullableComparableComparer`1">
            <summary>
            The default comparer used for comparing two nullable <see cref="T:System.IComparable"/> structs.
            NOTE: This comparable is usually used for comparing nullable primitive types!
            </summary>
        </member>
        <member name="M:Atom.NullableComparableComparer`1.Compare(System.Nullable{`0},System.Nullable{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ReflectionBasedComparer`1">
            <summary>
            Compares the two objects of type <typeparamref name="T"/> using reflection
            </summary>
            <typeparam name="T">The type of the root object</typeparam>
        </member>
        <member name="P:Atom.ReflectionBasedComparer`1.DefaultSimpleTypeComparer">
            <summary>
            The default comparer used for the simple types
            </summary>
        </member>
        <member name="F:Atom.ReflectionBasedComparer`1.PropertyPathSeparator">
            <summary>
            Used for separating the property path
            </summary>
        </member>
        <member name="F:Atom.ReflectionBasedComparer`1.mSettings">
            <summary>
            The settings
            </summary>
        </member>
        <member name="M:Atom.ReflectionBasedComparer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ReflectionBasedComparer`1.Compare(`0,`0)">
            <summary>
            Returns whether the <paramref name="first"/> is the same as the <paramref name="second"/>
            </summary>
            <param name="first">The first object</param>
            <param name="second">The second object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionBasedComparer`1.Compare(`0,`0,System.String@)">
            <summary>
            Returns whether the <paramref name="first"/> is the same as the <paramref name="second"/>
            </summary>
            <param name="first">The first object</param>
            <param name="second">The second object</param>
            <param name="nonEqualPropertyPath">The path to the property that is not equal</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionBasedComparer`1.Atom#IInternalReflectionBasedComparer#AddReflectionBasedComparerProperty(System.Reflection.PropertyInfo,System.String,System.Func{Atom.IReflectionBasedComparerPropertySettings},System.Action{Atom.IReflectionBasedComparerPropertySettings})">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ReflectionBasedComparer`1.CompareCore(System.Object,System.Object,System.Type,System.String,System.String@)">
            <summary>
            Returns whether the <paramref name="first"/> is the same as the <paramref name="second"/>
            </summary>
            <param name="first">The first object</param>
            <param name="second">The second object</param>
            <param name="type">The type</param>
            <param name="propertyPath">The path to the current property starting from the root object</param>
            <param name="nonEqualPropertyPath">The path to the property that is not equal</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionBasedComparer`1.SequenceEquals(System.Object,System.Object,System.String,System.String@)">
            <summary>
            Returns whether the <paramref name="first"/> sequence is the same as the <paramref name="second"/> sequence
            </summary>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <param name="propertyPath">The path to the property that stores the sequences</param>
            <param name="nonEqualPropertyPath">The path to the property that is not equal</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ReflectionBasedComparerExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.ReflectionBasedComparer`1"/>
            </summary>
        </member>
        <member name="M:Atom.ReflectionBasedComparerExtensions.Property``2(Atom.ReflectionBasedComparer{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Selects a property to configure
            </summary>
            <typeparam name="T">The type of the documents of the collection</typeparam>
            <typeparam name="TProperty">The type of the selected property</typeparam>
            <param name="comparer">The comparer</param>
            <param name="propertySelector">A lambda expression that selects the property to configure</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ReflectionBasedComparerProperty`1">
            <summary>
            Contains the required information for a property comparer that uses reflection
            </summary>
            <typeparam name="T">The type of the root object</typeparam>
        </member>
        <member name="P:Atom.ReflectionBasedComparerProperty`1.Comparer">
            <summary>
            The comparer
            </summary>
        </member>
        <member name="P:Atom.ReflectionBasedComparerProperty`1.PropertyInfo">
            <inheritdoc/>
        </member>
        <member name="P:Atom.ReflectionBasedComparerProperty`1.PropertyPath">
            <inheritdoc/>
        </member>
        <member name="P:Atom.ReflectionBasedComparerProperty`1.IsIgnored">
            <inheritdoc/>
        </member>
        <member name="P:Atom.ReflectionBasedComparerProperty`1.ValueComparer">
            <summary>
            The function that compares the property value
            </summary>
        </member>
        <member name="M:Atom.ReflectionBasedComparerProperty`1.#ctor(Atom.ReflectionBasedComparer{`0},System.Reflection.PropertyInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="comparer">The comparer</param>
            <param name="propertyInfo">The property info</param>
        </member>
        <member name="T:Atom.ReflectionBasedComparerProperty`2">
            <summary>
            Contains the required information for a property comparer that uses reflection
            </summary>
            <typeparam name="T">The type of the root object</typeparam>
            <typeparam name="TProperty">The type of the selected property</typeparam>
        </member>
        <member name="F:Atom.ReflectionBasedComparerProperty`2.mValueComparer">
            <summary>
            The member of the <see cref="P:Atom.ReflectionBasedComparerProperty`2.ValueComparer"/>
            </summary>
        </member>
        <member name="P:Atom.ReflectionBasedComparerProperty`2.ValueComparer">
            <summary>
            The function that compares the property value
            </summary>
        </member>
        <member name="M:Atom.ReflectionBasedComparerProperty`2.#ctor(Atom.ReflectionBasedComparer{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Default constructor
            </summary>
            <param name="comparer">The comparer</param>
            <param name="propertySelector">A lambda expression that selects the property to configure</param>
        </member>
        <member name="M:Atom.ReflectionBasedComparerProperty`2.#ctor(Atom.ReflectionBasedComparer{`0},System.Reflection.PropertyInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="comparer">The comparer</param>
            <param name="propertyInfo">The property info</param>
        </member>
        <member name="M:Atom.ReflectionBasedComparerProperty`2.Configure(System.Action{Atom.IReflectionBasedComparerPropertySettings{`1}})">
            <summary>
            Configures the property
            </summary>
            <param name="configure">Action that configures a set of settings related to the property</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ReflectionBasedComparerPropertyExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.ReflectionBasedComparerProperty`2"/>
            </summary>
        </member>
        <member name="M:Atom.ReflectionBasedComparerPropertyExtensions.ThenProperty``3(Atom.ReflectionBasedComparerProperty{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Selects another a sub property ready for configuration
            </summary>
            <typeparam name="T">The type of the model</typeparam>
            <typeparam name="TPreviousProperty">The type of the previously selected property</typeparam>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="source">The source</param>
            <param name="propertyPath">A lambda expression that selects the property to configure</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionBasedComparerPropertyExtensions.ThenProperty``3(Atom.ReflectionBasedComparerProperty{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Selects another a sub property ready for configuration
            </summary>
            <typeparam name="T">The type of the model</typeparam>
            <typeparam name="TPreviousProperty">The type of the previously selected property</typeparam>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="source">The source</param>
            <param name="propertyPath">A lambda expression that selects the property to configure</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionBasedComparerPropertyExtensions.Ignore``2(Atom.ReflectionBasedComparerProperty{``0,``1},System.Boolean)">
            <summary>
            Sets the ignore state of the selected property
            </summary>
            <typeparam name="T">The type of the model</typeparam>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="source">The source</param>
            <param name="isIgnored">A flag indicating whether the property is ignored during the comparison</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionBasedComparerPropertyExtensions.Compare``2(Atom.ReflectionBasedComparerProperty{``0,``1},System.Func{``1,``1,System.Boolean})">
            <summary>
            Sets a custom comparer for the selected property
            </summary>
            <typeparam name="T">The type of the model</typeparam>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="source">The source</param>
            <param name="compare">The function that compares the property value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionBasedComparerPropertyExtensions.ThenProperty``3(Atom.ReflectionBasedComparerProperty{``0},System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Selects another a sub property ready for configuration
            </summary>
            <typeparam name="T">The type of the model</typeparam>
            <typeparam name="TPreviousProperty">The type of the previously selected property</typeparam>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="source">The source</param>
            <param name="properties">The properties that were selected using a property selector lambda expression</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ReflectionBasedComparerSubProperty`3">
            <summary>
            Contains the required information for a nested property comparer that uses reflection
            </summary>
            <typeparam name="T">The type of the root object</typeparam>
            <typeparam name="TPreviousProperty">The type of the previously selected property</typeparam>
            <typeparam name="TProperty">The type of the selected property</typeparam>
        </member>
        <member name="P:Atom.ReflectionBasedComparerSubProperty`3.PreviousPropertyComparer">
            <summary>
            The previous builder
            </summary>
        </member>
        <member name="P:Atom.ReflectionBasedComparerSubProperty`3.PropertyPath">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ReflectionBasedComparerSubProperty`3.#ctor(Atom.ReflectionBasedComparer{`0},Atom.ReflectionBasedComparerProperty{`0},System.Linq.Expressions.Expression{System.Func{`1,`2}})">
            <summary>
            Default constructor
            </summary>
            <param name="comparer">The comparer</param>
            <param name="propertySelector">A lambda expression that selects the property to configure</param>
            <param name="previousBuilder">The previous property comparer</param>
        </member>
        <member name="M:Atom.ReflectionBasedComparerSubProperty`3.#ctor(Atom.ReflectionBasedComparer{`0},Atom.ReflectionBasedComparerProperty{`0},System.Reflection.PropertyInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="comparer">The comparer</param>
            <param name="propertyInfo">The property info</param>
            <param name="previousBuilder">The previous property comparer</param>
        </member>
        <member name="T:Atom.IInternalReflectionBasedComparer">
            <summary>
            Provides abstractions for a reflection based comparer
            </summary>
        </member>
        <member name="M:Atom.IInternalReflectionBasedComparer.AddReflectionBasedComparerProperty(System.Reflection.PropertyInfo,System.String,System.Func{Atom.IReflectionBasedComparerPropertySettings},System.Action{Atom.IReflectionBasedComparerPropertySettings})">
            <summary>
            Adds a reflection based comparer property settings to the current comparer
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="propertyPath">The property path</param>
            <param name="settingsImplementationFactory">Creates and returns the settings if needed</param>
            <param name="configure">Action that configures a set of settings related to the property</param>
        </member>
        <member name="T:Atom.IReflectionBasedComparerPropertySettings">
            <summary>
            Provides abstraction for the settings used for the property comparison
            when the type of the property is unknown
            </summary>
        </member>
        <member name="P:Atom.IReflectionBasedComparerPropertySettings.IsIgnored">
            <summary>
            A flag indicating whether the property is ignored during the comparison
            </summary>
        </member>
        <member name="P:Atom.IReflectionBasedComparerPropertySettings.ValueComparer">
            <summary>
            The function that compares the property value
            </summary>
        </member>
        <member name="P:Atom.IReflectionBasedComparerPropertySettings.PropertyInfo">
            <summary>
            The property info
            </summary>
        </member>
        <member name="P:Atom.IReflectionBasedComparerPropertySettings.PropertyPath">
            <summary>
            The property path
            </summary>
        </member>
        <member name="T:Atom.IReflectionBasedComparerPropertySettings`1">
            <summary>
            Provides abstraction for the settings used for the property comparison
            </summary>
            <typeparam name="TProperty">The type of the property</typeparam>
        </member>
        <member name="P:Atom.IReflectionBasedComparerPropertySettings`1.IsIgnored">
            <summary>
            A flag indicating whether the property is ignored during the comparison
            </summary>
        </member>
        <member name="P:Atom.IReflectionBasedComparerPropertySettings`1.ValueComparer">
            <summary>
            The function that compares the property value
            </summary>
        </member>
        <member name="P:Atom.IReflectionBasedComparerPropertySettings`1.PropertyInfo">
            <summary>
            The property info
            </summary>
        </member>
        <member name="T:Atom.TypeComparer">
            <summary>
            The default <see cref="T:System.Type"/> comparer
            </summary>
        </member>
        <member name="M:Atom.TypeComparer.Compare(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.UriComparer">
            <summary>
            The default <see cref="T:System.Uri"/> comparer
            </summary>
        </member>
        <member name="M:Atom.UriComparer.Compare(System.Uri,System.Uri)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ConcurrentCollection`1">
            <summary>
            A collection that provides type safety 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Atom.ConcurrentCollection`1.mLock">
            <summary>
            A lock used for providing safe access to the <see cref="F:Atom.ConcurrentCollection`1.mList"/>
            </summary>
        </member>
        <member name="F:Atom.ConcurrentCollection`1.mList">
            <summary>
            The list
            </summary>
        </member>
        <member name="P:Atom.ConcurrentCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns></returns>
        </member>
        <member name="P:Atom.ConcurrentCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Atom.ConcurrentCollection`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple item to the collection
            </summary>
            <param name="items">The items</param>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based
            indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            NOTE: The enumerator from a shallow copy of the list is returned!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the collection</param>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            NOTE: The enumerator from a shallow copy of the list is returned!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire collection
            </summary>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Sort">
            <summary>
            Sorts the elements in the entire list using the default comparer
            </summary>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire collection using the specified
            comparer
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing
            elements, or null to use the default comparer
            </param>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.ToArray">
            <summary>
            Copies the elements of the collection to a new array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the collection contains elements that
            match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the collection</returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the first occurrence within the entire collection
            </summary>
            <param name="match">The delegate that defines the conditions of the element to search for</param>
            <returns>
            The first element that matches the conditions defined by the specified predicate,
            if found; otherwise, the default value for type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.FindLast(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the last occurrence within the entire collection
            </summary>
            <param name="match">The delegate that defines the conditions of the element to search for</param>
            <returns>
            The last element that matches the conditions defined by the specified predicate,
            if found; otherwise, the default value for type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified
            predicate.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to search for.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match the
            conditions defined by the specified predicate, if found; otherwise, an empty
            <see cref="T:System.Collections.Generic.List`1"/>
            </returns>
        </member>
        <member name="M:Atom.ConcurrentCollection`1.ConvertAll``1(System.Func{`0,``0})">
            <summary>
            Converts the elements in the current collection to another type,
            and returns a list containing the converted elements
            </summary>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="converter">A delegate that converts each element from one type to another type.</param>
            <returns></returns>
        </member>
        <member name="T:Atom.QueuesManager`1">
            <summary>
            Provides methods for limiting the concurrent execution of methods that are
            grouped by a key
            </summary>
        </member>
        <member name="F:Atom.QueuesManager`1.mQueues">
            <summary>
            The queues
            </summary>
        </member>
        <member name="M:Atom.QueuesManager`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.QueuesManager`1.WaitAsync(`0)">
            <summary>
            Waits for the queued action executions related to the specified <paramref name="key"/>
            to finish before queuing.
            </summary>
            <param name="key">The key</param>
            <remarks>
            The using statement must be used when using the method to ensure the release of the queue
            when the method execution finishes
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Atom.QueuesManager`1.Queue">
            <summary>
            The company queue
            </summary>
        </member>
        <member name="P:Atom.QueuesManager`1.Queue.Manager">
            <summary>
            The manager
            </summary>
        </member>
        <member name="P:Atom.QueuesManager`1.Queue.Semaphore">
            <summary>
            The semaphore
            </summary>
        </member>
        <member name="M:Atom.QueuesManager`1.Queue.#ctor(Atom.QueuesManager{`0},`0)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.QueuesManager`1.Queue.WaitAsync">
            <summary>
            Wait for the action execution to complete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.QueuesManager`1.Queue.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            the unmanaged resources
            </summary>
        </member>
        <member name="T:Atom.DataModelExtensions">
            <summary>
            Extension methods for the data models
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.GetLocalizedValueOrDefault(System.Collections.Generic.IEnumerable{Atom.LocalizedValue},Atom.LanguageCode,System.Nullable{Atom.LanguageCode})">
            <summary>
            Gets value, preferable at the specified <paramref name="language"/>
            </summary>
            <param name="localizedValues">The localized values</param>
            <param name="language">The language</param>
            <param name="fallbackLanguage">The fallback language</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.GetLocalizedSmallDescription(Atom.ILocalizedSmallDescriptable,Atom.LanguageCode)">
            <summary>
            Gets the small description, preferable at the specified <paramref name="language"/>
            </summary>
            <param name="item">The item</param>
            <param name="language">The language</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.GetLocalizedDescription(Atom.ILocalizedDescriptable,Atom.LanguageCode)">
            <summary>
            Gets the description, preferable at the specified <paramref name="language"/>
            </summary>
            <param name="item">The item</param>
            <param name="language">The language</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(System.Type)">
            <summary>
            Returns the vector source that represents the specified <paramref name="type"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(System.Type)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="type"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationManagementName">
            <summary>
            The name of the <see cref="F:Atom.AtomApplication.Management"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationTrainMateName">
            <summary>
            The name of the <see cref="F:Atom.AtomApplication.TrainMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationWooShopName">
            <summary>
            The name of the <see cref="F:Atom.AtomApplication.WooShop"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationAppointMateName">
            <summary>
            The name of the <see cref="F:Atom.AtomApplication.AppointMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationStoreMateName">
            <summary>
            The name of the <see cref="F:Atom.AtomApplication.StoreMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationDineMateName">
            <summary>
            The name of the <see cref="F:Atom.AtomApplication.DineMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationOtherName">
            <summary>
            The name of the <see cref="F:Atom.AtomApplication.Other"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationManagementColor">
            <summary>
            The color that represents the <see cref="F:Atom.AtomApplication.Management"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationTrainMateColor">
            <summary>
            The color that represents the <see cref="F:Atom.AtomApplication.TrainMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationWooShopColor">
            <summary>
            The color that represents the <see cref="F:Atom.AtomApplication.WooShop"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationAppointMateColor">
            <summary>
            The color that represents the <see cref="F:Atom.AtomApplication.AppointMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationStoreMateColor">
            <summary>
            The color that represents the <see cref="F:Atom.AtomApplication.StoreMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationDineMateColor">
            <summary>
            The color that represents the <see cref="F:Atom.AtomApplication.DineMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationOtherColor">
            <summary>
            The color that represents the <see cref="F:Atom.AtomApplication.Other"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationManagementIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AtomApplication.Management"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationTrainMateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AtomApplication.TrainMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationWooShopIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AtomApplication.WooShop"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationAppointMateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AtomApplication.AppointMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationStoreMateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AtomApplication.StoreMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationDineMateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AtomApplication.DineMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationOtherIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AtomApplication.Other"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationManagementId">
            <summary>
            The id that represents the <see cref="F:Atom.AtomApplication.Management"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationTrainMateId">
            <summary>
            The id that represents the <see cref="F:Atom.AtomApplication.TrainMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationWooShopId">
            <summary>
            The id that represents the <see cref="F:Atom.AtomApplication.WooShop"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationAppointMateId">
            <summary>
            The id that represents the <see cref="F:Atom.AtomApplication.AppointMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationStoreMateId">
            <summary>
            The id that represents the <see cref="F:Atom.AtomApplication.StoreMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationDineMateId">
            <summary>
            The id that represents the <see cref="F:Atom.AtomApplication.DineMate"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AtomApplicationOtherId">
            <summary>
            The id that represents the <see cref="F:Atom.AtomApplication.Other"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.AtomApplication,Atom.ILocalization)">
            <summary>
            Returns the localized representation of the specified <paramref name="value"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.AtomApplication)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.AtomApplication)">
            <summary>
            Returns the vector source that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToId(Atom.AtomApplication)">
            <summary>
            Returns the id that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToSupportedLanguages(Atom.AtomApplication)">
            <summary>
            Returns that languages that are supported by the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToISO4217NumericCode(Atom.CurrencyCode)">
            <summary>
            Returns the ISO4217 numeric code representation of the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedStringAndCurrencySymbol(Atom.CurrencyCode,Atom.ILocalization)">
            <summary>
            Returns the localized representation of the specified <paramref name="value"/>
            along with its currency symbol
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.CurrencyCode,Atom.ILocalization)">
            <summary>
            Returns the localized representation of the specified <paramref name="value"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.CurrencyCode)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.CurrencyCode)">
            <summary>
            Returns the vector source that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToCurrencySymbol(Atom.CurrencyCode)">
            <summary>
            Returns the currency symbol of the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.CountryCode,Atom.ILocalization)">
            <summary>
            Returns the localized representation of the specified <paramref name="value"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToAlphaTwoString(Atom.CountryCode)">
            <summary>
            Returns the Alpha-2 representation of the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToSVGStream(Atom.CountryCode)">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> that's effectively the flag of the specified <paramref name="value"/>
            in an SVG format
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToPhoneCountryCode(Atom.CountryCode)">
            <summary>
            Returns the phone number country code that is related to the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToPhonePrefixes(Atom.CountryCode)">
            <summary>
            Returns a collection of potential phone number prefixes that are related to the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.CountryCode)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.CountryCode)">
            <summary>
            Returns the vector source that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.LanguageCode,Atom.ILocalization)">
            <summary>
            Returns the localized representation of the specified <paramref name="value"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.LanguageCode)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.LanguageCode)">
            <summary>
            Returns the vector source that represents the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.SexMaleColor">
            <summary>
            The color that represents the <see cref="F:Atom.Sex.Male"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.SexFemaleColor">
            <summary>
            The color that represents the <see cref="F:Atom.Sex.Female"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.SexFemaleIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Sex.Male"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.SexMaleIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Sex.Female"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.Sex)">
            <summary>
            Returns the color hex value that represents the specified <paramref name="sex"/>
            </summary>
            <param name="sex">The sex</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.Sex)">
            <summary>
            Returns the vector source that represents the specified <paramref name="sex"/>
            </summary>
            <param name="sex">The sex</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.Sex,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="sex"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:Atom.DataModelExtensions.QueueStatusPendingColor">
            <summary>
            The color that represents the <see cref="F:Atom.QueueStatus.Pending"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QueueStatusAcceptedColor">
            <summary>
            The color that represents the <see cref="F:Atom.QueueStatus.Accepted"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QueueStatusRejectedColor">
            <summary>
            The color that represents the <see cref="F:Atom.QueueStatus.Rejected"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QueueStatusPendingIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.QueueStatus.Pending"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QueueStatusAcceptedIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.QueueStatus.Accepted"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QueueStatusRejectedIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.QueueStatus.Rejected"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.QueueStatus)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="queueStatus"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.QueueStatus)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="queueStatus"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.QueueStatus,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="status"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthJanuaryColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.January"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthFebruaryColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.February"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthMarchColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.March"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthAprilColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.April"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthMayColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.May"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthJuneColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.June"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthJulyColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.July"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthAugustColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.August"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthSeptemberColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.September"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthOctoberColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.October"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthNovembreColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.Novembre"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthDecemberColor">
            <summary>
            The color that represents the <see cref="F:Atom.Month.December"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthJanuaryIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.January"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthFebruaryIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.February"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthMarchIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.March"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthAprilIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.April"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthMayIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.May"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthJuneIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.June"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthJulyIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.July"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthAugustIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.August"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthSeptemberIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.September"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthOctoberIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.October"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthNovembreIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.Novembre"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MonthDecemberIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Month.December"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.Month)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="month"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.Month)">
            <summary>
            Returns the vector source that represents the specified <paramref name="month"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.Month,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="month"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekSundayColor">
            <summary>
            The color that represents the <see cref="F:System.DayOfWeek.Sunday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekMondayColor">
            <summary>
            The color that represents the <see cref="F:System.DayOfWeek.Monday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekTuesdayColor">
            <summary>
            The color that represents the <see cref="F:System.DayOfWeek.Tuesday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekWednesdayColor">
            <summary>
            The color that represents the <see cref="F:System.DayOfWeek.Wednesday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekThursdayColor">
            <summary>
            The color that represents the <see cref="F:System.DayOfWeek.Thursday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekFridayColor">
            <summary>
            The color that represents the <see cref="F:System.DayOfWeek.Friday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekSaturdayColor">
            <summary>
            The color that represents the <see cref="F:System.DayOfWeek.Saturday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekSundayIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.DayOfWeek.Sunday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekMondayIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.DayOfWeek.Monday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekTuesdayIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.DayOfWeek.Tuesday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekWednesdayIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.DayOfWeek.Wednesday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekThursdayIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.DayOfWeek.Thursday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekFridayIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.DayOfWeek.Friday"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayOfWeekSaturdayIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.DayOfWeek.Saturday"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(System.DayOfWeek)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="dayOfWeek"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(System.DayOfWeek)">
            <summary>
            Returns the vector source that represents the specified <paramref name="dayOfWeek"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToShortDayOfWeekString(System.DayOfWeek)">
            <summary>
            Returns a short localized <see cref="T:System.String"/> that represents the specified <paramref name="dayOfWeek"/>.
            Ex.: Monday -> Mon
                 Tuesday -> Tue
            </summary>
            <param name="dayOfWeek">The day of week</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(System.DayOfWeek,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="dayOfWeek"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedShortDayOfWeekString(System.DayOfWeek,Atom.ILocalization)">
            <summary>
            Returns a short localized <see cref="T:System.String"/> that represents the specified <paramref name="dayOfWeek"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodSecondColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimePeriod.Second"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodMinuteColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimePeriod.Minute"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodHourColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimePeriod.Hour"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodDayColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimePeriod.Day"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodWeekColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimePeriod.Week"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodMonthColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimePeriod.Month"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodYearColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimePeriod.Year"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodSecondIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimePeriod.Second"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodMinuteIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimePeriod.Minute"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodHourIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimePeriod.Hour"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodDayIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimePeriod.Day"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodWeekIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimePeriod.Week"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodMonthIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimePeriod.Month"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimePeriodYearIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimePeriod.Year"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.TimePeriod)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="period"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.TimePeriod)">
            <summary>
            Returns the vector source that represents the specified <paramref name="timePeriod"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.TimePeriod,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="period"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorEqualsToColor">
            <summary>
            The color that represents the <see cref="F:Atom.NumericEqualityOperator.EqualsTo"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorNotEqualsToColor">
            <summary>
            The color that represents the <see cref="F:Atom.NumericEqualityOperator.NotEqualsTo"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorLessThanColor">
            <summary>
            The color that represents the <see cref="F:Atom.NumericEqualityOperator.LessThan"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorGreaterThanColor">
            <summary>
            The color that represents the <see cref="F:Atom.NumericEqualityOperator.GreaterThan"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorLessOrEqualThanColor">
            <summary>
            The color that represents the <see cref="F:Atom.NumericEqualityOperator.LessOrEqualThan"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorGreaterOrEqualThanColor">
            <summary>
            The color that represents the <see cref="F:Atom.NumericEqualityOperator.GreaterOrEqualThan"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorEqualsToIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.NumericEqualityOperator.EqualsTo"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorNotEqualsToIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.NumericEqualityOperator.NotEqualsTo"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorLessThanIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.NumericEqualityOperator.LessThan"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorGreaterThanIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.NumericEqualityOperator.GreaterThan"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorLessOrEqualThanIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.NumericEqualityOperator.LessOrEqualThan"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.NumericEqualityOperatorGreaterOrEqualThanIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.NumericEqualityOperator.GreaterOrEqualThan"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.NumericEqualityOperator)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="equalityOperator"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.NumericEqualityOperator)">
            <summary>
            Returns the vector source that represents the specified <paramref name="numericEqualityOperator"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.NumericEqualityOperator,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="equalityOperator"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorContainsColor">
            <summary>
            The color that represents the <see cref="F:Atom.StringEqualityOperator.Contains"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorEqualsColor">
            <summary>
            The color that represents the <see cref="F:Atom.StringEqualityOperator.Equals"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorStartsWithColor">
            <summary>
            The color that represents the <see cref="F:Atom.StringEqualityOperator.StartsWith"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorEndsWithColor">
            <summary>
            The color that represents the <see cref="F:Atom.StringEqualityOperator.EndsWith"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorRegexColor">
            <summary>
            The color that represents the <see cref="F:Atom.StringEqualityOperator.Regex"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorContainsIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.StringEqualityOperator.Contains"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorEqualsIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.StringEqualityOperator.Equals"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorStartsWithIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.StringEqualityOperator.StartsWith"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorEndsWithIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.StringEqualityOperator.EndsWith"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.StringEqualityOperatorRegexIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.StringEqualityOperator.Regex"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.StringEqualityOperator)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="bulkOperationTextFilterCondition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.StringEqualityOperator)">
            <summary>
            Returns the vector source that represents the specified <paramref name="stringEqualityOperator"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.StringEqualityOperator,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="stringEqualityOperator"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateScheduledColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventState.Scheduled"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateInProgressColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventState.InProgress"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateCompletedColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventState.Completed"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateNotStartedColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventState.NotStarted"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateCancelledColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventState.Cancelled"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateScheduledIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventState.Scheduled"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateInProgressIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventState.InProgress"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateCompletedIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventState.Completed"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateNotStartedIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventState.NotStarted"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventStateCancelledIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventState.Cancelled"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.EventState)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="eventState"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.EventState)">
            <summary>
            Returns the vector source that represents the specified <paramref name="eventState"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.EventState,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="eventState"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.OrderConditionAscendingColor">
            <summary>
            The color that represents the <see cref="F:Atom.OrderCondition.Ascending"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.OrderConditionDescendingColor">
            <summary>
            The color that represents the <see cref="F:Atom.OrderCondition.Descending"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.OrderConditionAscendingIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.OrderCondition.Ascending"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.OrderConditionDescendingIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.OrderCondition.Descending"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.OrderCondition)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="orderCondition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.OrderCondition)">
            <summary>
            Returns the vector source that represents the specified <paramref name="orderCondition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.OrderCondition,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="orderCondition"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ConditionORColor">
            <summary>
            The color that represents the <see cref="F:Atom.Condition.OR"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ConditionANDColor">
            <summary>
            The color that represents the <see cref="F:Atom.Condition.AND"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ConditionORIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Condition.OR"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ConditionANDIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Condition.AND"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.Condition)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="condition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.Condition)">
            <summary>
            Returns the vector source that represents the specified <paramref name="condition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.Condition,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="condition"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.VersionTypeReleaseColor">
            <summary>
            The color that represents the <see cref="F:Atom.VersionType.Release"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.VersionTypeAlphaColor">
            <summary>
            The color that represents the <see cref="F:Atom.VersionType.Alpha"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.VersionTypeBetaColor">
            <summary>
            The color that represents the <see cref="F:Atom.VersionType.Beta"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.VersionTypePreviewColor">
            <summary>
            The color that represents the <see cref="F:Atom.VersionType.Preview"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.VersionTypeReleaseIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.VersionType.Release"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.VersionTypeAlphaIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.VersionType.Alpha"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.VersionTypeBetaIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.VersionType.Beta"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.VersionTypePreviewIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.VersionType.Preview"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.VersionType)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="versionType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.VersionType)">
            <summary>
            Returns the vector source that represents the specified <paramref name="versionType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.VersionType,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="versionType"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingToEvenColor">
            <summary>
            The color that represents the <see cref="F:System.MidpointRounding.ToEven"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingAwayFromZeroColor">
            <summary>
            The color that represents the <see cref="F:System.MidpointRounding.AwayFromZero"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingToZeroColor">
            <summary>
            The color that represents the <see cref="F:System.MidpointRounding.ToZero"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingToNegativeInfinityColor">
            <summary>
            The color that represents the <see cref="F:System.MidpointRounding.ToNegativeInfinity"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingToPositiveInfinityColor">
            <summary>
            The color that represents the <see cref="F:System.MidpointRounding.ToPositiveInfinity"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingToEvenIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.MidpointRounding.ToEven"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingAwayFromZeroIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.MidpointRounding.AwayFromZero"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingToZeroIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.MidpointRounding.ToZero"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingToNegativeInfinityIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.MidpointRounding.ToNegativeInfinity"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.MidpointRoundingToPositiveInfinityIconPathData">
            <summary>
            The icon that represents the <see cref="F:System.MidpointRounding.ToPositiveInfinity"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(System.MidpointRounding)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="midpointRounding"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(System.MidpointRounding)">
            <summary>
            Returns the vector source that represents the specified <paramref name="midpointRounding"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(System.MidpointRounding,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="midpointRounding"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionYearColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.Year"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionMonthColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.Month"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionDayColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.Day"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionHourColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.Hour"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionMinuteColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.Minute"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionSecondColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.Second"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionMillisecondColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.Millisecond"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionDayOfYearColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.DayOfYear"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionDayOfWeekColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.DayOfWeek"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionEachMonthOfEachYearColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.EachMonthOfEachYear"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionEachDayOfEachMonthOfEachYearColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateTimeGroupByOption.EachDayOfEachMonthOfEachYear"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionYearIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.Year"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionMonthIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.Month"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionDayIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.Day"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionHourIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.Hour"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionMinuteIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.Minute"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionSecondIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.Second"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionMillisecondIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.Millisecond"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionDayOfYearIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.DayOfYear"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionDayOfWeekIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.DayOfWeek"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionEachMonthOfEachYearIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.EachMonthOfEachYear"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTimeGroupByOptionEachDayOfEachMonthOfEachYearIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateTimeGroupByOption.EachDayOfEachMonthOfEachYear"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.DateTimeGroupByOption)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="dateTimeGroupByOption"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.DateTimeGroupByOption)">
            <summary>
            Returns the vector source that represents the specified <paramref name="dateTimeGroupByOption"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.DateTimeGroupByOption,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="dateTimeGroupByOption"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionSumColor">
            <summary>
            The color that represents the <see cref="F:Atom.GroupByCondition.Sum"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionAverageColor">
            <summary>
            The color that represents the <see cref="F:Atom.GroupByCondition.Average"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionGreatestColor">
            <summary>
            The color that represents the <see cref="F:Atom.GroupByCondition.Greatest"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionLeastColor">
            <summary>
            The color that represents the <see cref="F:Atom.GroupByCondition.Least"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionAbsoluteSumColor">
            <summary>
            The color that represents the <see cref="F:Atom.GroupByCondition.AbsoluteSum"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionSumAbsolutesColor">
            <summary>
            The color that represents the <see cref="F:Atom.GroupByCondition.SumAbsolutes"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionSumIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.GroupByCondition.Sum"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionAverageIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.GroupByCondition.Average"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionGreatestIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.GroupByCondition.Greatest"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionLeastIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.GroupByCondition.Least"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionAbsoluteSumIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.GroupByCondition.AbsoluteSum"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.GroupByConditionSumAbsolutesIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.GroupByCondition.SumAbsolutes"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.GroupByCondition)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="groupByCondition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.GroupByCondition)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="groupByCondition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.GroupByCondition,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="groupByCondition"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.WordReplacementMethodStandardColor">
            <summary>
            The color that represents the <see cref="F:Atom.WordReplacementMethod.Standard"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.WordReplacementMethodRegexColor">
            <summary>
            The color that represents the <see cref="F:Atom.WordReplacementMethod.Regex"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.WordReplacementMethodStandardIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.WordReplacementMethod.Standard"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.WordReplacementMethodRegexIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.WordReplacementMethod.Regex"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.WordReplacementMethod)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="wordReplacementMethod"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.WordReplacementMethod)">
            <summary>
            Returns the vector source that represents the specified <paramref name="wordReplacementMethod"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.WordReplacementMethod,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="wordReplacementMethod"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.CRUDOperationCreateColor">
            <summary>
            The color that represents the <see cref="F:Atom.CRUDOperation.Create"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.CRUDOperationReadColor">
            <summary>
            The color that represents the <see cref="F:Atom.CRUDOperation.Read"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.CRUDOperationUpdateColor">
            <summary>
            The color that represents the <see cref="F:Atom.CRUDOperation.Update"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.CRUDOperationDeleteColor">
            <summary>
            The color that represents the <see cref="F:Atom.CRUDOperation.Delete"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.CRUDOperationCreateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.CRUDOperation.Create"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.CRUDOperationReadIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.CRUDOperation.Read"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.CRUDOperationUpdateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.CRUDOperation.Update"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.CRUDOperationDeleteIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.CRUDOperation.Delete"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.CRUDOperation)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="crudOperation"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.CRUDOperation)">
            <summary>
            Returns the vector source that represents the specified <paramref name="crudOperation"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.CRUDOperation,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="crudOperation"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AmountTypeAmountColor">
            <summary>
            The color that represents the <see cref="F:Atom.AmountType.Amount"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AmountTypeNetAmountColor">
            <summary>
            The color that represents the <see cref="F:Atom.AmountType.NetAmount"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AmountTypeTaxAmountColor">
            <summary>
            The color that represents the <see cref="F:Atom.AmountType.TaxAmount"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AmountTypeAmountIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AmountType.Amount"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AmountTypeNetAmountIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AmountType.NetAmount"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.AmountTypeTaxAmountIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.AmountType.TaxAmount"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.AmountType)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="amountType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.AmountType)">
            <summary>
            Returns the vector source that represents the specified <paramref name="amountType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.AmountType,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="amountType"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ContainConditionIncludeColor">
            <summary>
            The color that represents the <see cref="F:Atom.ContainCondition.Include"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ContainConditionExcludeColor">
            <summary>
            The color that represents the <see cref="F:Atom.ContainCondition.Exclude"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ContainConditionIncludeIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.ContainCondition.Include"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ContainConditionExcludeIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.ContainCondition.Exclude"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.ContainCondition)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="containCondition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.ContainCondition)">
            <summary>
            Returns the vector source that represents the specified <paramref name="containCondition"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.ContainCondition,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="containCondition"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateRangeDayColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateRange.Day"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateRangeWeekColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateRange.Week"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateRangeMonthColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateRange.Month"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateRangeYearColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateRange.Year"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateRangeDayIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateRange.Day"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateRangeWeekIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateRange.Week"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateRangeMonthIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateRange.Month"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateRangeYearIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateRange.Year"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.DateRange)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="dateRange"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.DateRange)">
            <summary>
            Returns the vector source that represents the specified <paramref name="dateRange"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.DateRange,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="dateRange"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ErrorTypeErrorColor">
            <summary>
            The color that represents the <see cref="F:Atom.ErrorType.Error"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ErrorTypeWarningColor">
            <summary>
            The color that represents the <see cref="F:Atom.ErrorType.Warning"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ErrorTypeInformationColor">
            <summary>
            The color that represents the <see cref="F:Atom.ErrorType.Information"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ErrorTypeHiddenColor">
            <summary>
            The color that represents the <see cref="F:Atom.ErrorType.Hidden"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ErrorTypeErrorIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.ErrorType.Error"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ErrorTypeWarningIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.ErrorType.Warning"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ErrorTypeInformationIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.ErrorType.Information"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.ErrorTypeHiddenIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.ErrorType.Hidden"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.ErrorType)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="errorType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.ErrorType)">
            <summary>
            Returns the vector source that represents the specified <paramref name="errorType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.ErrorType,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="errorType"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelTraceColor">
            <summary>
            The color that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelDebugColor">
            <summary>
            The color that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Debug"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelInformationColor">
            <summary>
            The color that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelWarningColor">
            <summary>
            The color that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Warning"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelErrorColor">
            <summary>
            The color that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Error"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelCriticalColor">
            <summary>
            The color that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Critical"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelNoneColor">
            <summary>
            The color that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.None"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelTraceIconPathData">
            <summary>
            The icon that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelDebugIconPathData">
            <summary>
            The icon that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Debug"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelInformationIconPathData">
            <summary>
            The icon that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelWarningIconPathData">
            <summary>
            The icon that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Warning"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelErrorIconPathData">
            <summary>
            The icon that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Error"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelCriticalIconPathData">
            <summary>
            The icon that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Critical"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.LogLevelNoneIconPathData">
            <summary>
            The icon that represents the <see cref="F:Microsoft.Extensions.Logging.LogLevel.None"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="logLevel"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Returns the vector source that represents the specified <paramref name="logLevel"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Microsoft.Extensions.Logging.LogLevel,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="logLevel"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.SchedulingRuleDateColor">
            <summary>
            The color that represents the <see cref="F:Atom.SchedulingRule.Date"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.SchedulingRuleCRONExpressionColor">
            <summary>
            The color that represents the <see cref="F:Atom.SchedulingRule.CRONExpression"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.SchedulingRuleDateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.SchedulingRule.Date"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.SchedulingRuleCRONExpressionIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.SchedulingRule.CRONExpression"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.SchedulingRule)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="schedulingRule"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.SchedulingRule)">
            <summary>
            Returns the vector source that represents the specified <paramref name="schedulingRule"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.SchedulingRule,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="schedulingRule"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeEqualsColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.Equals"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeSearchColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.Search"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeMinColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.Min"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeMaxColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.Max"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeAfterColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.After"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeBeforeColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.Before"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeIncludeColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.Include"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeExcludeColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.Exclude"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeOtherColor">
            <summary>
            The color that represents the <see cref="F:Atom.FilterType.Other"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeEqualsIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.Equals"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeSearchIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.Search"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeMinIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.Min"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeMaxIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.Max"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeAfterIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.After"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeBeforeIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.Before"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeIncludeIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.Include"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeExcludeIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.Exclude"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.FilterTypeOtherIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.FilterType.Other"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.FilterType)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="filterType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.FilterType)">
            <summary>
            Returns the vector source that represents the specified <paramref name="filterType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.FilterType,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="filterType"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateSelectionStateDaySelectionStateColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateSelectionState.DaySelectionState"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateSelectionStateMonthSelectionStateColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateSelectionState.MonthSelectionState"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateSelectionStateYearSelectionStateColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateSelectionState.YearSelectionState"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateSelectionStateDaySelectionStateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateSelectionState.DaySelectionState"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateSelectionStateMonthSelectionStateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateSelectionState.MonthSelectionState"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateSelectionStateYearSelectionStateIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateSelectionState.YearSelectionState"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.DateSelectionState)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="dateSelectionState"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.DateSelectionState)">
            <summary>
            Returns the vector source that represents the specified <paramref name="dateSelectionState"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.DateSelectionState,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="dateSelectionState"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTypeDayColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateType.Day"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTypeWeekColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateType.Week"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTypeMonthColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateType.Month"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTypeYearColor">
            <summary>
            The color that represents the <see cref="F:Atom.DateType.Year"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTypeDayIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateType.Day"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTypeWeekIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateType.Week"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTypeMonthIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateType.Month"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DateTypeYearIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DateType.Year"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.DateType)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="dateType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.DateType)">
            <summary>
            Returns the vector source that represents the specified <paramref name="dateType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.DateType,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="dateType"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayPeriodAMColor">
            <summary>
            The color that represents the <see cref="F:Atom.DayPeriod.AM"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayPeriodPMColor">
            <summary>
            The color that represents the <see cref="F:Atom.DayPeriod.PM"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayPeriodAMIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DayPeriod.AM"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DayPeriodPMIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DayPeriod.PM"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.DayPeriod)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="dayPeriod"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.DayPeriod)">
            <summary>
            Returns the vector source that represents the specified <paramref name="dayPeriod"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.DayPeriod,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="dayPeriod"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DirectionLeftToRightColor">
            <summary>
            The color that represents the <see cref="F:Atom.Direction.LeftToRight"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DirectionRightToLeftColor">
            <summary>
            The color that represents the <see cref="F:Atom.Direction.RightToLeft"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DirectionTopToBottomColor">
            <summary>
            The color that represents the <see cref="F:Atom.Direction.TopToBottom"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DirectionBottomToTopColor">
            <summary>
            The color that represents the <see cref="F:Atom.Direction.BottomToTop"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DirectionLeftToRightIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Direction.LeftToRight"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DirectionRightToLeftIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Direction.RightToLeft"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DirectionTopToBottomIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Direction.TopToBottom"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DirectionBottomToTopIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Direction.BottomToTop"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.Direction)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="direction"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.Direction)">
            <summary>
            Returns the vector source that represents the specified <paramref name="direction"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.Direction,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="direction"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeFillColor">
            <summary>
            The color that represents the <see cref="F:Atom.DockType.Fill"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeTopColor">
            <summary>
            The color that represents the <see cref="F:Atom.DockType.Top"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeBottomColor">
            <summary>
            The color that represents the <see cref="F:Atom.DockType.Bottom"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeLeftColor">
            <summary>
            The color that represents the <see cref="F:Atom.DockType.Left"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeRightColor">
            <summary>
            The color that represents the <see cref="F:Atom.DockType.Right"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeNoneColor">
            <summary>
            The color that represents the <see cref="F:Atom.DockType.None"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeFillIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DockType.Fill"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeTopIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DockType.Top"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeBottomIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DockType.Bottom"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeLeftIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DockType.Left"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeRightIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DockType.Right"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.DockTypeNoneIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.DockType.None"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.DockType)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="dockType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.DockType)">
            <summary>
            Returns the vector source that represents the specified <paramref name="dockType"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.DockType,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="dockType"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventRepeatOptionDailyColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventRepeatOption.Daily"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventRepeatOptionWeeklyColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventRepeatOption.Weekly"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventRepeatOptionMonthlyColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventRepeatOption.Monthly"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventRepeatOptionYearlyColor">
            <summary>
            The color that represents the <see cref="F:Atom.EventRepeatOption.Yearly"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventRepeatOptionDailyIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventRepeatOption.Daily"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventRepeatOptionWeeklyIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventRepeatOption.Weekly"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventRepeatOptionMonthlyIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventRepeatOption.Monthly"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.EventRepeatOptionYearlyIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.EventRepeatOption.Yearly"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.EventRepeatOption)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="eventRepeatOption"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.EventRepeatOption)">
            <summary>
            Returns the vector source that represents the specified <paramref name="eventRepeatOption"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.EventRepeatOption,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="eventRepeatOption"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementLeftColor">
            <summary>
            The color that represents the <see cref="F:Atom.Placement.Left"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementRightColor">
            <summary>
            The color that represents the <see cref="F:Atom.Placement.Right"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementTopColor">
            <summary>
            The color that represents the <see cref="F:Atom.Placement.Top"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementBottomColor">
            <summary>
            The color that represents the <see cref="F:Atom.Placement.Bottom"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementCenterColor">
            <summary>
            The color that represents the <see cref="F:Atom.Placement.Center"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementLeftIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Placement.Left"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementRightIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Placement.Right"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementTopIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Placement.Top"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementBottomIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Placement.Bottom"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.PlacementCenterIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Placement.Center"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.Placement)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="placement"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.Placement)">
            <summary>
            Returns the vector source that represents the specified <paramref name="placement"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.Placement,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="placement"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QuadrantFirstColor">
            <summary>
            The color that represents the <see cref="F:Atom.Quadrant.First"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QuadrantSecondColor">
            <summary>
            The color that represents the <see cref="F:Atom.Quadrant.Second"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QuadrantThirdColor">
            <summary>
            The color that represents the <see cref="F:Atom.Quadrant.Third"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QuadrantFourthColor">
            <summary>
            The color that represents the <see cref="F:Atom.Quadrant.Fourth"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QuadrantFirstIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Quadrant.First"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QuadrantSecondIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Quadrant.Second"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QuadrantThirdIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Quadrant.Third"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.QuadrantFourthIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.Quadrant.Fourth"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.Quadrant)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="quadrant"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.Quadrant)">
            <summary>
            Returns the vector source that represents the specified <paramref name="quadrant"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.Quadrant,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="quadrant"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.RectangleCornerTopLeftColor">
            <summary>
            The color that represents the <see cref="F:Atom.RectangleCorner.TopLeft"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.RectangleCornerTopRightColor">
            <summary>
            The color that represents the <see cref="F:Atom.RectangleCorner.TopRight"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.RectangleCornerBottomRightColor">
            <summary>
            The color that represents the <see cref="F:Atom.RectangleCorner.BottomRight"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.RectangleCornerBottomLeftColor">
            <summary>
            The color that represents the <see cref="F:Atom.RectangleCorner.BottomLeft"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.RectangleCornerTopLeftIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.RectangleCorner.TopLeft"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.RectangleCornerTopRightIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.RectangleCorner.TopRight"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.RectangleCornerBottomRightIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.RectangleCorner.BottomRight"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.RectangleCornerBottomLeftIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.RectangleCorner.BottomLeft"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.RectangleCorner)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="rectangleCorner"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.RectangleCorner)">
            <summary>
            Returns the vector source that represents the specified <paramref name="rectangleCorner"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.RectangleCorner,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="rectangleCorner"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TextValueDefaultColor">
            <summary>
            The color that represents the <see cref="F:Atom.TextValue.Default"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TextValuePhoneColor">
            <summary>
            The color that represents the <see cref="F:Atom.TextValue.Phone"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TextValueEmailColor">
            <summary>
            The color that represents the <see cref="F:Atom.TextValue.Email"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TextValueDefaultIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TextValue.Default"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TextValuePhoneIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TextValue.Phone"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TextValueEmailIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TextValue.Email"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.TextValue)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="textValue"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.TextValue)">
            <summary>
            Returns the vector source that represents the specified <paramref name="textValue"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.TextValue,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="textValue"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimeValueSecondColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimeValue.Second"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimeValueMinuteColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimeValue.Minute"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimeValueHourColor">
            <summary>
            The color that represents the <see cref="F:Atom.TimeValue.Hour"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimeValueSecondIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimeValue.Second"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimeValueMinuteIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimeValue.Minute"/>
            </summary>
        </member>
        <member name="F:Atom.DataModelExtensions.TimeValueHourIconPathData">
            <summary>
            The icon that represents the <see cref="F:Atom.TimeValue.Hour"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToColorHex(Atom.TimeValue)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="timeValue"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToVectorSource(Atom.TimeValue)">
            <summary>
            Returns the vector source that represents the specified <paramref name="timeValue"/>
            </summary>
        </member>
        <member name="M:Atom.DataModelExtensions.ToLocalizedString(Atom.TimeValue,Atom.ILocalization)">
            <summary>
            Returns a localized string that represents the specified <paramref name="timeValue"/>
            </summary>
        </member>
        <member name="T:Atom.DataModelHelpers">
            <summary>
            Helper methods related to the data models
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.MetaDataPropertyMapper">
            <summary>
            Maps the properties of the <see cref="T:Atom.MetaData"/> to custom values
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.DefaultMetaDataProperties">
            <summary>
            Gets the most commonly used properties of the <see cref="T:Atom.MetaData"/>
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.FileDataModelPropertyMapper">
            <summary>
            Maps the properties of the <see cref="T:Atom.FileDataModel"/> to custom values
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.DefaultFileDataModelProperties">
            <summary>
            Gets the most commonly used properties of the <see cref="T:Atom.FileDataModel"/>
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.FilesDataModelPropertyMapper">
            <summary>
            Maps the properties of the <see cref="T:Atom.FilesDataModel"/> to custom values
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.FilesDataModelPropertyTranslator">
            <summary>
            Gets the <see cref="T:Atom.PropertyTranslator`1"/> required for translating the
            values of a <see cref="T:Atom.FilesDataModel"/>
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.DefaultFilesDataModelProperties">
            <summary>
            Gets the default properties of the <see cref="T:Atom.FilesDataModel"/>.
            NOTE: The values of these properties are the most commonly used values of the model!
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.FileGroupDataModelPropertyMapper">
            <summary>
            Maps the properties of the <see cref="T:Atom.FileGroupDataModel"/> to custom values
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.FileGroupDataModelPropertyTranslator">
            <summary>
            Gets the <see cref="T:Atom.PropertyTranslator`1"/> required for translating the 
            values of a <see cref="T:Atom.FileGroupDataModel"/>
            </summary>
        </member>
        <member name="P:Atom.DataModelHelpers.DefaultFileGroupDataModelProperties">
            <summary>
            Gets the default properties of the <see cref="T:Atom.FileGroupDataModel"/>.
            NOTE: The values of these properties are the most commonly used values of the model!
            </summary>
        </member>
        <member name="T:Atom.Base64File">
            <summary>
            Contains information for a file that's encoded using the Base64 string format
            </summary>
        </member>
        <member name="P:Atom.Base64File.FileName">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:Atom.Base64File.Base64">
            <summary>
            The base64 encoding of the file
            </summary>
        </member>
        <member name="M:Atom.Base64File.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Base64File.FromFilePath(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.Base64File"/> from the file located at 
            the specified <paramref name="filePath"/>
            </summary>
            <param name="filePath">The file path</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Base64File.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.Base64File.Parse(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.Base64File.TryParse(System.String,System.IFormatProvider,Atom.Base64File@)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.Base64File.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.BaseArgs">
            <summary>
            The base for all the classes that are used as arguments
            </summary>
        </member>
        <member name="F:Atom.BaseArgs.mMaps">
            <summary>
            The maps
            </summary>
        </member>
        <member name="M:Atom.BaseArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.BaseArgs.ToArgs``1">
            <summary>
            Creates and returns an instance of <typeparamref name="TArgs"/> from the current arguments
            by copying the values of the properties with the same name and the same property type of
            the arguments
            </summary>
            <typeparam name="TArgs">The type of the arguments</typeparam>
            <returns></returns>
        </member>
        <member name="M:Atom.BaseArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Atom.BaseArgs.ArgsToArgsMap.SourceArgsType">
            <summary>
            The type of the source arguments
            </summary>
        </member>
        <member name="P:Atom.BaseArgs.ArgsToArgsMap.DestinationArgsType">
            <summary>
            The type of the destination arguments
            </summary>
        </member>
        <member name="P:Atom.BaseArgs.ArgsToArgsMap.SourcePropertyToDestinationPropertyPairs">
            <summary>
            Pairs between the source and the destination properties that can have their values copied
            </summary>
        </member>
        <member name="M:Atom.BaseArgs.ArgsToArgsMap.#ctor(System.Type,System.Type)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.BaseInfo`1">
            <summary>
            The base for all the models that provide serializable / deserializable information.
            </summary>
            <remarks>
            The default <see cref="T:Newtonsoft.Json.JsonConvert"/> is used for serializing and deserializing the object.
            </remarks>
        </member>
        <member name="M:Atom.BaseInfo`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.BaseInfo`1.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about s.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.BaseInfo`1.TryParse(System.String,System.IFormatProvider,`0@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about <paramref name="s"/>.</param>
            <param name="result">
            When this method returns, contains the result of successfully parsing <paramref name="s"/> or an
            undefined value on failure.
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.BaseInfo`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The format to use. -or- A null reference (Nothing in Visual Basic) to use the
            default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.
            </param>
            <param name="formatProvider">
            The provider to use to format the value. -or- A null reference (Nothing in Visual
            Basic) to obtain the numeric format information from the current locale setting
            of the operating system.
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.BaseInfo`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.BaseInfo`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.BaseInfo`1.Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.BaseInfo`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Atom.BaseInfo`1.op_Equality(Atom.BaseInfo{`0},Atom.BaseInfo{`0})">
            <summary>
            Determines whether two specified <see cref="T:Atom.BaseInfo`1"/>s have the same value
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="M:Atom.BaseInfo`1.op_Inequality(Atom.BaseInfo{`0},Atom.BaseInfo{`0})">
            <summary>
            Determines whether tow specified <see cref="T:Atom.BaseInfo`1"/>s have different values
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="M:Atom.BaseInfo`1.GetId">
            <summary>
            Gets the string that can be used as a unique identifier for the current <typeparamref name="TSelf"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.ColumnWidth">
            <summary>
            Represents the width of a column
            </summary>
        </member>
        <member name="P:Atom.ColumnWidth.IsRelatedToProperty">
            <summary>
            A flag indicating whether the column width is related to a property column
            </summary>
        </member>
        <member name="P:Atom.ColumnWidth.PropertyName">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="P:Atom.ColumnWidth.IsRelatedToFormula">
            <summary>
            A flag indicating whether the column width is related to a formula column
            </summary>
        </member>
        <member name="P:Atom.ColumnWidth.FormulaId">
            <summary>
            The formula id
            </summary>
        </member>
        <member name="P:Atom.ColumnWidth.IsAbsolute">
            <summary>
            A flag indicating whether the <see cref="P:Atom.ColumnWidth.Value"/> is the size of the column in pixels
            </summary>
        </member>
        <member name="P:Atom.ColumnWidth.IsAuto">
            <summary>
            A flag indicating whether the size of the column is determined by its children
            </summary>
        </member>
        <member name="P:Atom.ColumnWidth.IsStar">
            <summary>
            A flag indicating whether the <see cref="P:Atom.ColumnWidth.Value"/> is the size of the column in based on a weighted
            proportion of the available space
            </summary>
        </member>
        <member name="P:Atom.ColumnWidth.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.ColumnWidth.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ColumnWidth.ForProperty(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.ColumnWidth"/> for the property with
            the specified <paramref name="propertyName"/>
            </summary>
            <param name="propertyName">The property name</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColumnWidth.ForFomula(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.ColumnWidth"/> for the formula
            with the specified <paramref name="formulaId"/>
            </summary>
            <param name="formulaId">The formula id</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ColumnWidth.ToSizeString">
            <summary>
            Returns a string that represents the size portion of the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.ColumnWidth.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.FileDataModel">
            <summary>
            Represents a file
            </summary>
        </member>
        <member name="F:Atom.FileDataModel.mName">
            <summary>
            The member of the <see cref="P:Atom.FileDataModel.Name"/> property
            </summary>
        </member>
        <member name="P:Atom.FileDataModel.Name">
            <inheritdoc/>
        </member>
        <member name="P:Atom.FileDataModel.Length">
            <summary>
            The size of the file in bytes
            </summary>
        </member>
        <member name="M:Atom.FileDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.FileDataModel.#ctor(System.IO.FileInfo)">
            <summary>
            File info based constructor.
            NOTE: The <see cref="P:System.IO.FileInfo.Name"/> is used as the <see cref="P:Atom.FileDataModel.Name"/>, not the <see cref="P:System.IO.FileSystemInfo.FullName"/>!
            </summary>
            <param name="fileInfo">The file info</param>
        </member>
        <member name="M:Atom.FileDataModel.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.FileGroupDataModel">
            <summary>
            Represents a files group
            </summary>
        </member>
        <member name="F:Atom.FileGroupDataModel.mName">
            <summary>
            The member of the <see cref="P:Atom.FileGroupDataModel.Name"/> property
            </summary>
        </member>
        <member name="F:Atom.FileGroupDataModel.mFiles">
            <summary>
            The member of the <see cref="P:Atom.FileGroupDataModel.Files"/> property
            </summary>
        </member>
        <member name="P:Atom.FileGroupDataModel.Name">
            <inheritdoc/>
        </member>
        <member name="P:Atom.FileGroupDataModel.Length">
            <summary>
            The size of all the files in bytes
            </summary>
        </member>
        <member name="P:Atom.FileGroupDataModel.Files">
            <summary>
            The files
            </summary>
        </member>
        <member name="M:Atom.FileGroupDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.FileGroupDataModel.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.FilesDataModel">
            <summary>
            Represents a group of files
            </summary>
        </member>
        <member name="F:Atom.FilesDataModel.mFiles">
            <summary>
            The member of the <see cref="P:Atom.FilesDataModel.Files"/> property
            </summary>
        </member>
        <member name="P:Atom.FilesDataModel.Files">
            <summary>
            The files
            </summary>
        </member>
        <member name="M:Atom.FilesDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.HierarchicalItem`1">
            <summary>
            Represents the hierarchical <see cref="P:Atom.HierarchicalItem`1.Level"/> of an <see cref="P:Atom.HierarchicalItem`1.Item"/>
            </summary>
            <typeparam name="T">The type of the item</typeparam>
        </member>
        <member name="P:Atom.HierarchicalItem`1.Item">
            <summary>
            The item
            </summary>
        </member>
        <member name="P:Atom.HierarchicalItem`1.Level">
            <summary>
            The level
            </summary>
        </member>
        <member name="M:Atom.HierarchicalItem`1.#ctor(`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.HierarchicalItem`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IdentifiableModel`1">
            <summary>
            The base for all the models that may or may not execute an id based equality, usually based on whether the id
            of the model is set or not. If the conditions are not met for an id based equality then a reference based equality
            is executed instead.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
        </member>
        <member name="M:Atom.IdentifiableModel`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.IdentifiableModel`1.GetId">
            <summary>
            Gets the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.IdentifiableModel`1.Equals(`0,`0)">
            <summary>
            Determines whether the <paramref name="key1"/> and the <paramref name="key2"/> are equal or not.
            </summary>
            <param name="key1">The first id.</param>
            <param name="key2">The second id.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IdentifiableModel`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.IdentifiableModel`1.Equals(Atom.IdentifiableModel{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Atom.IdentifiableModel`1.ShouldCompareIds">
            <summary>
            Returns a flag indicating whether a comparison between the ids should be
            executed to determine whether two objects are equal or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.IdentifiableModel`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Atom.InformationModel">
            <summary>
            A model that contains simple information
            </summary>
        </member>
        <member name="F:Atom.InformationModel.mId">
            <summary>
            The member of the <see cref="P:Atom.InformationModel.Id"/> property
            </summary>
        </member>
        <member name="F:Atom.InformationModel.mName">
            <summary>
            The member of the <see cref="P:Atom.InformationModel.Name"/> property
            </summary>
        </member>
        <member name="F:Atom.InformationModel.mColor">
            <summary>
            The member of the <see cref="P:Atom.InformationModel.Color"/> property
            </summary>
        </member>
        <member name="F:Atom.InformationModel.mDescription">
            <summary>
            The member of the <see cref="P:Atom.InformationModel.Description"/> property
            </summary>
        </member>
        <member name="F:Atom.InformationModel.mVectorSource">
            <summary>
            The member of the <see cref="P:Atom.InformationModel.VectorSource"/> property
            </summary>
        </member>
        <member name="P:Atom.InformationModel.Id">
            <inheritdoc/>
        </member>
        <member name="P:Atom.InformationModel.Name">
            <inheritdoc/>
        </member>
        <member name="P:Atom.InformationModel.Color">
            <inheritdoc/>
        </member>
        <member name="P:Atom.InformationModel.Description">
            <inheritdoc/>
        </member>
        <member name="P:Atom.InformationModel.VectorSource">
            <inheritdoc/>
        </member>
        <member name="M:Atom.InformationModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.InformationModel.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.InformationModel.Equals(Atom.InformationModel)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.InformationModel.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Atom.InformationModel.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.InformationModel.op_Equality(Atom.InformationModel,Atom.InformationModel)">
            <summary>
            Determines whether two specified <see cref="T:Atom.ClassWrapper`1"/>s have the same value
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="M:Atom.InformationModel.op_Inequality(Atom.InformationModel,Atom.InformationModel)">
            <summary>
            Determines whether tow specified <see cref="T:Atom.ClassWrapper`1"/>s have different values
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IntIdentifiableModel">
            <summary>
            An implementation of the <see cref="T:Atom.IdentifiableModel`1"/> that uses an <see cref="T:System.Int32"/> as the 
            type of its id.
            </summary>
            <remarks>
            An id based comparison is executed when the id is not equal to 0.
            </remarks>
        </member>
        <member name="M:Atom.IntIdentifiableModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.IntIdentifiableModel.ShouldCompareIds(System.Int32)">
            <summary>
            Returns a flag indicating whether a comparison between the ids should be
            executed to determine whether two objects are equal or not.
            </summary>
            <param name="id">The id</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IntIdentifiableModel.ShouldCompareIds">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ItemsComparisonResult`2">
            <summary>
            Represents the result of a comparison operation that was targeting two collections of items
            </summary>
            <typeparam name="T1">The type of the items of the first collection</typeparam>
            <typeparam name="T2">The type of the items of the second collection</typeparam>
        </member>
        <member name="P:Atom.ItemsComparisonResult`2.ItemsToCreate">
            <summary>
            The items from the second collection that are missing from the first collection
            </summary>
        </member>
        <member name="P:Atom.ItemsComparisonResult`2.ItemsToUpdate">
            <summary>
            The items that are present in both collections but are not equal
            </summary>
        </member>
        <member name="P:Atom.ItemsComparisonResult`2.ItemsToDelete">
            <summary>
            The items from the first collection that do not exist in the second collection
            </summary>
        </member>
        <member name="M:Atom.ItemsComparisonResult`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="itemsToCreate">The items from the second collection that are missing from the first collection</param>
            <param name="itemsToUpdate">The items that are present in both collections but are not equal</param>
            <param name="itemsToDelete">The items from the first collection that do not exist in the second collection</param>
        </member>
        <member name="M:Atom.ItemsComparisonResult`2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ItemsManipulationResult`1">
            <summary>
            Represents the result of a manipulation operation that was targeting two collections of items
            </summary>
            <typeparam name="T">The type of the items</typeparam>
        </member>
        <member name="P:Atom.ItemsManipulationResult`1.Created">
            <summary>
            The items that were created
            </summary>
        </member>
        <member name="P:Atom.ItemsManipulationResult`1.Updated">
            <summary>
            The items that were updated
            </summary>
        </member>
        <member name="P:Atom.ItemsManipulationResult`1.Deleted">
            <summary>
            The items that were deleted
            </summary>
        </member>
        <member name="M:Atom.ItemsManipulationResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="created">The items that were created</param>
            <param name="updated">The items that were updated</param>
            <param name="deleted">The items that were deleted</param>
        </member>
        <member name="M:Atom.ItemsManipulationResult`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.MetaData">
            <summary>
            The model that describes meta data
            </summary>
        </member>
        <member name="P:Atom.MetaData.Key">
            <inheritdoc/>
        </member>
        <member name="P:Atom.MetaData.Value">
            <inheritdoc/>
        </member>
        <member name="M:Atom.MetaData.#ctor(System.String,System.Object)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.MetaData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.OrderRule">
            <summary>
            Provides information related to an order rule
            </summary>
        </member>
        <member name="P:Atom.OrderRule.OrderCondition">
            <summary>
            The order condition
            </summary>
        </member>
        <member name="P:Atom.OrderRule.OrderBy">
            <summary>
            The order by target
            </summary>
        </member>
        <member name="M:Atom.OrderRule.#ctor(Atom.OrderCondition,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="orderCondition">The order condition</param>
            <param name="orderBy">The order by target</param>
        </member>
        <member name="M:Atom.OrderRule.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.OrderRule.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The format to use. -or- A null reference (Nothing in Visual Basic) to use the
            default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.
            </param>
            <param name="formatProvider">
            The provider to use to format the value. -or- A null reference (Nothing in Visual
            Basic) to obtain the numeric format information from the current locale setting
            of the operating system.
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.OrderRule.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about s.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.OrderRule.TryParse(System.String,System.IFormatProvider,Atom.OrderRule@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about <paramref name="s"/>.</param>
            <param name="result">
            When this method returns, contains the result of successfully parsing <paramref name="s"/> or an
            undefined value on failure.
            </param>
            <returns></returns>
        </member>
        <member name="T:Atom.PhoneNumber">
            <summary>
            Represents a phone number
            </summary>
        </member>
        <member name="P:Atom.PhoneNumber.CountryCodes">
            <summary>
            The valid country codes
            </summary>
        </member>
        <member name="F:Atom.PhoneNumber.mPhoneNumberPrefixesToCountryCodesMapper">
            <summary>
            Provides maps between each phone number prefix and its related country code
            </summary>
        </member>
        <member name="P:Atom.PhoneNumber.CountryCode">
            <summary>
            The country code
            </summary>
        </member>
        <member name="P:Atom.PhoneNumber.Phone">
            <summary>
            The phone
            </summary>
        </member>
        <member name="M:Atom.PhoneNumber.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="countryCode">The country code</param>
            <param name="phone">The phone number</param>
        </member>
        <member name="M:Atom.PhoneNumber.TryParseCountryCode(Atom.PhoneNumber,System.Nullable{Atom.CountryCode}@)">
            <summary>
            Attempts to get the <see cref="T:Atom.CountryCode"/> that is associated with the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <param name="result">The result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PhoneNumber.TryParseCountryCode(System.String,System.Nullable{Atom.CountryCode}@)">
            <summary>
            Attempts to get the <see cref="T:Atom.CountryCode"/> that is associated with the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <param name="result">The result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PhoneNumber.TryParse(System.String,Atom.PhoneNumber@,Atom.CountryCode)">
            <summary>
            Tries to parse the specified <paramref name="value"/> into a valid <see cref="T:Atom.PhoneNumber"/>.
            <para>
            Ex.: +30 6969696969, 1 6969696969, 01 6969696969.
            </para>
            <para>
            Partially support ex.: +306969696969, +016969696969
            </para>
            </summary>
            <param name="value">The value</param>
            <param name="result">The result</param>
            <param name="fallbackCountryCode">
            The country code that should be used in case where the <paramref name="value"/> doesn't specify a country code
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.PhoneNumber.ToPhoneNumberString">
            <summary>
            Returns a string that contains both the country code and phone number.
            Ex.: 30 6969696969, 1 6969696969
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.PhoneNumber.ToE164PhoneNumberString">
            <summary>
            Returns a string that represents the E.164 phone number.
            Ex.: +30 6969696969, +16 969696969
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.PhoneNumber.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.PhoneNumber.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The format to use. -or- A null reference (Nothing in Visual Basic) to use the
            default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.
            </param>
            <param name="formatProvider">
            The provider to use to format the value. -or- A null reference (Nothing in Visual
            Basic) to obtain the numeric format information from the current locale setting
            of the operating system.
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.PhoneNumber.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about s.</param>
            <remarks>
            If the phone number is of type 6977594444, meaning that the <see cref="M:Atom.PhoneNumber.ToString(System.String,System.IFormatProvider)"/>
            was not used when serializing it, the <see cref="P:Atom.IApplicationEnvironment.Country"/> is used
            as the <see cref="P:Atom.PhoneNumber.CountryCode"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Atom.PhoneNumber.TryParse(System.String,System.IFormatProvider,Atom.PhoneNumber@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about <paramref name="s"/>.</param>
            <param name="result">
            When this method returns, contains the result of successfully parsing <paramref name="s"/> or an
            undefined value on failure.
            </param>
            <returns></returns>
        </member>
        <member name="T:Atom.StringIdentifiableModel">
            <summary>
            An implementation of the <see cref="T:Atom.IdentifiableModel`1"/> that uses a <see cref="T:System.String"/> as
            the type of its id.
            </summary>
            <remarks>
            An id based comparison is executed when the id is not equal to <see cref="!:null"/> or <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="M:Atom.StringIdentifiableModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.StringIdentifiableModel.ShouldCompareIds">
            <inheritdoc/>
        </member>
        <member name="M:Atom.StringIdentifiableModel.ShouldCompareIds(System.String)">
            <summary>
            Returns a flag indicating whether a comparison between the ids should be
            executed to determine whether two objects are equal or not.
            </summary>
            <param name="id">The id</param>
            <returns></returns>
        </member>
        <member name="T:Atom.TextChangedContext">
            <summary>
            Contains information related to a text change
            </summary>
        </member>
        <member name="P:Atom.TextChangedContext.NewValue">
            <summary>
            The new value
            </summary>
        </member>
        <member name="P:Atom.TextChangedContext.OldValue">
            <summary>
            The old value
            </summary>
        </member>
        <member name="M:Atom.TextChangedContext.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="newValue">The new value</param>
            <param name="oldValue">The old value</param>
        </member>
        <member name="M:Atom.TextChangedContext.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ValueModel`1">
            <summary>
            A model with a single value property of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:Atom.ValueModel`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.ValueModel`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ValueModel`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ValueModel`1.Equals(Atom.ValueModel{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ValueModel`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ValueModel`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ValueModel`1.op_Implicit(`0)~Atom.ValueModel{`0}">
            <summary>
            Creates and returns a <see cref="T:Atom.ClassWrapper`1"/> from the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.ValueModel`1.op_Explicit(Atom.ValueModel{`0})~`0">
            <summary>
            Creates and returns a <typeparamref name="T"/> from the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.ValueModel`1.op_Equality(Atom.ValueModel{`0},Atom.ValueModel{`0})">
            <summary>
            Determines whether two specified <see cref="T:Atom.ClassWrapper`1"/>s have the same value
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ValueModel`1.op_Inequality(Atom.ValueModel{`0},Atom.ValueModel{`0})">
            <summary>
            Determines whether tow specified <see cref="T:Atom.ClassWrapper`1"/>s have different values
            </summary>
            <param name="obj1">The first class wrapper</param>
            <param name="obj2">The second class wrapper</param>
            <returns></returns>
        </member>
        <member name="T:Atom.VectorSource">
            <summary>
            Represents the source of a vector drawable
            </summary>
        </member>
        <member name="P:Atom.VectorSource.Empty">
            <summary>
            An empty <see cref="T:Atom.VectorSource"/>
            </summary>
        </member>
        <member name="P:Atom.VectorSource.PathData">
            <summary>
            The path data of the icon
            </summary>
        </member>
        <member name="P:Atom.VectorSource.HasPathData">
            <summary>
            A flag indicating whether the vector source
            uses a path data
            </summary>
        </member>
        <member name="P:Atom.VectorSource.UriSource">
            <summary>
            The Uri source
            </summary>
        </member>
        <member name="P:Atom.VectorSource.HasUriSource">
            <summary>
            A flag indicating whether the vector source
            uses an external URI
            </summary>
        </member>
        <member name="M:Atom.VectorSource.#ctor">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Atom.VectorSource.FromPathData(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.VectorSource"/> from the specified <paramref name="pathData"/>
            </summary>
            <param name="pathData">The path data</param>
            <returns></returns>
        </member>
        <member name="M:Atom.VectorSource.FromUriSource(System.Uri)">
            <summary>
            Creates and returns a <see cref="T:Atom.VectorSource"/> from the specified <paramref name="uriSource"/>
            </summary>
            <param name="uriSource">The Uri source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.VectorSource.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.VectorSource.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.VectorSource.Equals(Atom.VectorSource)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.VectorSource.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Atom.VectorSource.op_Implicit(System.String)~Atom.VectorSource">
            <summary>
            Creates and returns a <see cref="T:Atom.VectorSource"/> from the specified <paramref name="pathData"/>
            </summary>
            <param name="pathData">The path data</param>
        </member>
        <member name="M:Atom.VectorSource.op_Implicit(System.Uri)~Atom.VectorSource">
            <summary>
            Creates and returns a <see cref="T:Atom.VectorSource"/> from the specified <paramref name="uriSource"/>
            </summary>
            <param name="uriSource">The URI source</param>
        </member>
        <member name="T:Atom.AmountType">
            <summary>
            Provides enumeration over the amount types
            </summary>
        </member>
        <member name="F:Atom.AmountType.Amount">
            <summary>
            The amount including the tax amount
            </summary>
        </member>
        <member name="F:Atom.AmountType.NetAmount">
            <summary>
            The net amount
            </summary>
        </member>
        <member name="F:Atom.AmountType.TaxAmount">
            <summary>
            The tax amount
            </summary>
        </member>
        <member name="T:Atom.AtomApplication">
            <summary>
            Provides enumeration over the Atom applications
            </summary>
        </member>
        <member name="F:Atom.AtomApplication.Management">
            <summary>
            Management
            </summary>
        </member>
        <member name="F:Atom.AtomApplication.WooShop">
            <summary>
            WooShop
            </summary>
        </member>
        <member name="F:Atom.AtomApplication.TrainMate">
            <summary>
            TrainMate
            </summary>
        </member>
        <member name="F:Atom.AtomApplication.AppointMate">
            <summary>
            AppointMate
            </summary>
        </member>
        <member name="F:Atom.AtomApplication.StoreMate">
            <summary>
            StoreMate
            </summary>
        </member>
        <member name="F:Atom.AtomApplication.DineMate">
            <summary>
            DineMate
            </summary>
        </member>
        <member name="F:Atom.AtomApplication.Other">
            <summary>
            A different miscellaneous application
            </summary>
        </member>
        <member name="T:Atom.Condition">
            <summary>
            Provides enumeration over the conditions
            </summary>
        </member>
        <member name="F:Atom.Condition.AND">
            <summary>
            All the conditions must be satisfied
            </summary>
        </member>
        <member name="F:Atom.Condition.OR">
            <summary>
            At least one condition must be satisfied
            </summary>
        </member>
        <member name="T:Atom.ContainCondition">
            <summary>
            Provides enumeration over the contain conditions
            </summary>
        </member>
        <member name="F:Atom.ContainCondition.Include">
            <summary>
            Include the value
            </summary>
        </member>
        <member name="F:Atom.ContainCondition.Exclude">
            <summary>
            Exclude the value
            </summary>
        </member>
        <member name="T:Atom.CountryCode">
            <summary>
            The Alpha-2 country codes
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AD">
            <summary>
            Andorra
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AE">
            <summary>
            United Arab Emirates
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AF">
            <summary>
            Afghanistan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AG">
            <summary>
            Antigua And Barbuda
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AI">
            <summary>
            Anguilla
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AL">
            <summary>
            Albania
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AM">
            <summary>
            Armenia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AN">
            <summary>
            Netherlands Antilles
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AO">
            <summary>
            Angola
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AQ">
            <summary>
            Antarctica
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AR">
            <summary>
            Argentina
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AS">
            <summary>
            American Samoa
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AT">
            <summary>
            Austria
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AU">
            <summary>
            Australia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AW">
            <summary>
            Aruba
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AX">
            <summary>
            Aland Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.AZ">
            <summary>
            Azerbaijan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BA">
            <summary>
            Bosnia And Herzegovina
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BB">
            <summary>
            Barbados
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BD">
            <summary>
            Bangladesh
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BE">
            <summary>
            Belgium
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BF">
            <summary>
            Burkina Faso
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BG">
            <summary>
            Bulgaria
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BH">
            <summary>
            Bahrain
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BI">
            <summary>
            Burundi
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BJ">
            <summary>
            Benin
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BL">
            <summary>
            Saint Barthelemy
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BM">
            <summary>
            Bermuda
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BN">
            <summary>
            Brunei
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BO">
            <summary>
            Bolivia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BR">
            <summary>
            Brazil
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BS">
            <summary>
            Bahamas
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BT">
            <summary>
            Bhutan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BV">
            <summary>
            Bouvet Island
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BW">
            <summary>
            Botswana
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BY">
            <summary>
            Belarus
            </summary>
        </member>
        <member name="F:Atom.CountryCode.BZ">
            <summary>
            Belize
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CA">
            <summary>
            Canada
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CC">
            <summary>
            Cocos Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CD">
            <summary>
            Democratic Republicofthe Congo
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CF">
            <summary>
            Central African Republic
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CG">
            <summary>
            Republicofthe Congo
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CH">
            <summary>
            Switzerland
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CI">
            <summary>
            Ivory Coast
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CK">
            <summary>
            Cook Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CL">
            <summary>
            Chile
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CM">
            <summary>
            Cameroon
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CN">
            <summary>
            China
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CO">
            <summary>
            Colombia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CR">
            <summary>
            Costa Rica
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CU">
            <summary>
            Cuba
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CV">
            <summary>
            Cape Verde
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CX">
            <summary>
            Christmas Island
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CY">
            <summary>
            Cyprus
            </summary>
        </member>
        <member name="F:Atom.CountryCode.CZ">
            <summary>
            Czech Republic
            </summary>
        </member>
        <member name="F:Atom.CountryCode.DE">
            <summary>
            Germany
            </summary>
        </member>
        <member name="F:Atom.CountryCode.DJ">
            <summary>
            Djibouti
            </summary>
        </member>
        <member name="F:Atom.CountryCode.DK">
            <summary>
            Denmark
            </summary>
        </member>
        <member name="F:Atom.CountryCode.DM">
            <summary>
            Dominica
            </summary>
        </member>
        <member name="F:Atom.CountryCode.DO">
            <summary>
            Dominican Republic
            </summary>
        </member>
        <member name="F:Atom.CountryCode.DZ">
            <summary>
            Algeria
            </summary>
        </member>
        <member name="F:Atom.CountryCode.EC">
            <summary>
            Ecuador
            </summary>
        </member>
        <member name="F:Atom.CountryCode.EE">
            <summary>
            Estonia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.EG">
            <summary>
            Egypt
            </summary>
        </member>
        <member name="F:Atom.CountryCode.EH">
            <summary>
            Western Sahara
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ER">
            <summary>
            Eritrea
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ES">
            <summary>
            Spain
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ET">
            <summary>
            Ethiopia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.FI">
            <summary>
            Finland
            </summary>
        </member>
        <member name="F:Atom.CountryCode.FJ">
            <summary>
            Fiji
            </summary>
        </member>
        <member name="F:Atom.CountryCode.FK">
            <summary>
            Falkland Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.FM">
            <summary>
            Micronesia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.FO">
            <summary>
            Faroe Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.FR">
            <summary>
            France
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GA">
            <summary>
            Gabon
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GB">
            <summary>
            United Kingdom
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GD">
            <summary>
            Grenada
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GE">
            <summary>
            Georgia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GF">
            <summary>
            French Guiana
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GG">
            <summary>
            Guernsey
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GH">
            <summary>
            Ghana
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GI">
            <summary>
            Gibraltar
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GL">
            <summary>
            Greenland
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GM">
            <summary>
            Gambia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GN">
            <summary>
            Guinea
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GP">
            <summary>
            Guadeloupe
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GQ">
            <summary>
            Equatorial Guinea
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GR">
            <summary>
            Greece
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GS">
            <summary>
            South GeorgiaΑndthe South Sandwich Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GT">
            <summary>
            Guatemala
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GU">
            <summary>
            Guam
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GW">
            <summary>
            Guinea Bissau
            </summary>
        </member>
        <member name="F:Atom.CountryCode.GY">
            <summary>
            Guyana
            </summary>
        </member>
        <member name="F:Atom.CountryCode.HK">
            <summary>
            Hong Kong
            </summary>
        </member>
        <member name="F:Atom.CountryCode.HM">
            <summary>
            Heard IslandΑnd Mc Donald Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.HN">
            <summary>
            Honduras
            </summary>
        </member>
        <member name="F:Atom.CountryCode.HR">
            <summary>
            Croatia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.HT">
            <summary>
            Haiti
            </summary>
        </member>
        <member name="F:Atom.CountryCode.HU">
            <summary>
            Hungary
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ID">
            <summary>
            Indonesia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IE">
            <summary>
            Ireland
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IL">
            <summary>
            Israel
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IM">
            <summary>
            Isleof Man
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IN">
            <summary>
            India
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IO">
            <summary>
            British Indian Ocean Territory
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IQ">
            <summary>
            Iraq
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IR">
            <summary>
            Iran
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IS">
            <summary>
            Iceland
            </summary>
        </member>
        <member name="F:Atom.CountryCode.IT">
            <summary>
            Italy
            </summary>
        </member>
        <member name="F:Atom.CountryCode.JE">
            <summary>
            Jersey
            </summary>
        </member>
        <member name="F:Atom.CountryCode.JM">
            <summary>
            Jamaica
            </summary>
        </member>
        <member name="F:Atom.CountryCode.JO">
            <summary>
            Jordan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.JP">
            <summary>
            Japan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KE">
            <summary>
            Kenya
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KG">
            <summary>
            Kyrgyzstan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KH">
            <summary>
            Cambodia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KI">
            <summary>
            Kiribati
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KM">
            <summary>
            Comoros
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KN">
            <summary>
            Saint KittsΑnd Nevis
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KP">
            <summary>
            North Korea
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KR">
            <summary>
            South Korea
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KW">
            <summary>
            Kuwait
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KY">
            <summary>
            Cayman Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.KZ">
            <summary>
            Kazakhstan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LA">
            <summary>
            Laos
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LB">
            <summary>
            Lebanon
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LC">
            <summary>
            Saint Lucia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LI">
            <summary>
            Liechtenstein
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LK">
            <summary>
            Sri Lanka
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LR">
            <summary>
            Liberia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LS">
            <summary>
            Lesotho
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LT">
            <summary>
            Lithuania
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LU">
            <summary>
            Luxembourg
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LV">
            <summary>
            Latvia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.LY">
            <summary>
            Libya
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MA">
            <summary>
            Morocco
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MC">
            <summary>
            Monaco
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MD">
            <summary>
            Moldova
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ME">
            <summary>
            Montenegro
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MF">
            <summary>
            Saint Martin
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MG">
            <summary>
            Madagascar
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MH">
            <summary>
            Marshall Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MK">
            <summary>
            Macedonia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ML">
            <summary>
            Mali
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MM">
            <summary>
            Myanmar
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MN">
            <summary>
            Mongolia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MO">
            <summary>
            Macau
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MP">
            <summary>
            Northern Mariana Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MQ">
            <summary>
            Martinique
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MR">
            <summary>
            Mauritania
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MS">
            <summary>
            Montserrat
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MT">
            <summary>
            Malta
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MU">
            <summary>
            Mauritius
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MV">
            <summary>
            Maldives
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MW">
            <summary>
            Malawi
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MX">
            <summary>
            Mexico
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MY">
            <summary>
            Malaysia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.MZ">
            <summary>
            Mozambique
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NA">
            <summary>
            Namibia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NC">
            <summary>
            New Caledonia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NE">
            <summary>
            Niger
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NF">
            <summary>
            Norfolk Island
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NG">
            <summary>
            Nigeria
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NI">
            <summary>
            Nicaragua
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NL">
            <summary>
            Netherlands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NO">
            <summary>
            Norway
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NP">
            <summary>
            Nepal
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NR">
            <summary>
            Nauru
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NU">
            <summary>
            Niue
            </summary>
        </member>
        <member name="F:Atom.CountryCode.NZ">
            <summary>
            New Zealand
            </summary>
        </member>
        <member name="F:Atom.CountryCode.OM">
            <summary>
            Oman
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PA">
            <summary>
            Panama
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PE">
            <summary>
            Peru
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PF">
            <summary>
            French Polynesia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PG">
            <summary>
            Papua New Guinea
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PH">
            <summary>
            Philippines
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PK">
            <summary>
            Pakistan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PL">
            <summary>
            Poland
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PM">
            <summary>
            Saint Pierre And Miquelon
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PN">
            <summary>
            Pitcairn
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PR">
            <summary>
            Puerto Rico
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PS">
            <summary>
            Palestine
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PT">
            <summary>
            Portugal
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PW">
            <summary>
            Palau
            </summary>
        </member>
        <member name="F:Atom.CountryCode.PY">
            <summary>
            Paraguay
            </summary>
        </member>
        <member name="F:Atom.CountryCode.QA">
            <summary>
            Qatar
            </summary>
        </member>
        <member name="F:Atom.CountryCode.RE">
            <summary>
            Reunion
            </summary>
        </member>
        <member name="F:Atom.CountryCode.RO">
            <summary>
            Romania
            </summary>
        </member>
        <member name="F:Atom.CountryCode.RS">
            <summary>
            Serbia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.RU">
            <summary>
            Russia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.RW">
            <summary>
            Rwanda
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SA">
            <summary>
            Saudi Arabia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SB">
            <summary>
            Solomon Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SC">
            <summary>
            Seychelles
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SD">
            <summary>
            Sudan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SE">
            <summary>
            Sweden
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SG">
            <summary>
            Singapore
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SH">
            <summary>
            Saint Helena
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SI">
            <summary>
            Slovenia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SJ">
            <summary>
            Svalbard And Jan Mayen
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SK">
            <summary>
            Slovakia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SL">
            <summary>
            Sierra Leone
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SM">
            <summary>
            San Marino
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SN">
            <summary>
            Senegal
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SO">
            <summary>
            Somalia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SR">
            <summary>
            Suriname
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ST">
            <summary>
            Sao Tome And Principe
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SV">
            <summary>
            El Salvador
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SY">
            <summary>
            Syria
            </summary>
        </member>
        <member name="F:Atom.CountryCode.SZ">
            <summary>
            Swaziland
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TC">
            <summary>
            Turks And Caicos Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TD">
            <summary>
            Chad
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TF">
            <summary>
            French Southern Territories
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TG">
            <summary>
            Togo
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TH">
            <summary>
            Thailand
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TJ">
            <summary>
            Tajikistan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TK">
            <summary>
            Tokelau
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TL">
            <summary>
            East Timor
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TM">
            <summary>
            Turkmenistan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TN">
            <summary>
            Tunisia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TO">
            <summary>
            Tonga
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TR">
            <summary>
            Turkey
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TT">
            <summary>
            Trinidad And Tobago
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TV">
            <summary>
            Tuvalu
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TW">
            <summary>
            Taiwan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.TZ">
            <summary>
            Tanzania
            </summary>
        </member>
        <member name="F:Atom.CountryCode.UA">
            <summary>
            Ukraine
            </summary>
        </member>
        <member name="F:Atom.CountryCode.UG">
            <summary>
            Uganda
            </summary>
        </member>
        <member name="F:Atom.CountryCode.UM">
            <summary>
            United States Minor Outlying Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.US">
            <summary>
            United States
            </summary>
        </member>
        <member name="F:Atom.CountryCode.UY">
            <summary>
            Uruguay
            </summary>
        </member>
        <member name="F:Atom.CountryCode.UZ">
            <summary>
            Uzbekistan
            </summary>
        </member>
        <member name="F:Atom.CountryCode.VA">
            <summary>
            Vatican
            </summary>
        </member>
        <member name="F:Atom.CountryCode.VC">
            <summary>
            Saint Vincent and the Grenadines
            </summary>
        </member>
        <member name="F:Atom.CountryCode.VE">
            <summary>
            Venezuela
            </summary>
        </member>
        <member name="F:Atom.CountryCode.VG">
            <summary>
            British Virgin Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.VI">
            <summary>
            US Virgin Islands
            </summary>
        </member>
        <member name="F:Atom.CountryCode.VN">
            <summary>
            Vietnam
            </summary>
        </member>
        <member name="F:Atom.CountryCode.VU">
            <summary>
            Vanuatu
            </summary>
        </member>
        <member name="F:Atom.CountryCode.WF">
            <summary>
            WallisΑnd Futuna
            </summary>
        </member>
        <member name="F:Atom.CountryCode.WS">
            <summary>
            Samoa
            </summary>
        </member>
        <member name="F:Atom.CountryCode.YE">
            <summary>
            Yemen
            </summary>
        </member>
        <member name="F:Atom.CountryCode.YT">
            <summary>
            Mayotte
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ZA">
            <summary>
            South Africa
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ZM">
            <summary>
            Zambia
            </summary>
        </member>
        <member name="F:Atom.CountryCode.ZW">
            <summary>
            Zimbabwe
            </summary>
        </member>
        <member name="T:Atom.CRUDOperation">
            <summary>
            Provides enumeration over the CRUD operations
            </summary>
        </member>
        <member name="F:Atom.CRUDOperation.Create">
            <summary>
            Create operation
            </summary>
        </member>
        <member name="F:Atom.CRUDOperation.Read">
            <summary>
            Read operation
            </summary>
        </member>
        <member name="F:Atom.CRUDOperation.Update">
            <summary>
            Update operation
            </summary>
        </member>
        <member name="F:Atom.CRUDOperation.Delete">
            <summary>
            Delete operation
            </summary>
        </member>
        <member name="T:Atom.CurrencyCode">
            <summary>
            The currency code enum format ISO 4217
            </summary>
        </member>
        <member name="T:Atom.DateRange">
            <summary>
            Provides enumeration over the date ranges
            </summary>
        </member>
        <member name="F:Atom.DateRange.Day">
            <summary>
            Day based range
            </summary>
        </member>
        <member name="F:Atom.DateRange.Week">
            <summary>
            Week based range
            </summary>
        </member>
        <member name="F:Atom.DateRange.Month">
            <summary>
            Month based range
            </summary>
        </member>
        <member name="F:Atom.DateRange.Year">
            <summary>
            Year based range
            </summary>
        </member>
        <member name="T:Atom.DateSelectionState">
            <summary>
            Provides enumeration for the date selection states
            </summary>
        </member>
        <member name="F:Atom.DateSelectionState.DaySelectionState">
            <summary>
            A state where the user selects the day of the month
            </summary>
        </member>
        <member name="F:Atom.DateSelectionState.MonthSelectionState">
            <summary>
            A state where the user selects the month of the year
            </summary>
        </member>
        <member name="F:Atom.DateSelectionState.YearSelectionState">
            <summary>
            A state where the user selects a year
            </summary>
        </member>
        <member name="T:Atom.DateTimeGroupByOption">
            <summary>
            Provides enumeration over the grouping options when a date time type is selected
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.Year">
            <summary>
            Group by year
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.Month">
            <summary>
            Group by month
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.Day">
            <summary>
            Group by day
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.Hour">
            <summary>
            Group by hour
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.Minute">
            <summary>
            Group by minute
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.Second">
            <summary>
            Group by second
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.Millisecond">
            <summary>
            Group by second
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.DayOfYear">
            <summary>
            Group by day of year
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.DayOfWeek">
            <summary>
            Group by day of week
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.EachMonthOfEachYear">
            <summary>
            Group by each month of each year
            </summary>
        </member>
        <member name="F:Atom.DateTimeGroupByOption.EachDayOfEachMonthOfEachYear">
            <summary>
            Group by each day of each month of each year
            </summary>
        </member>
        <member name="T:Atom.DateType">
            <summary>
            Provides enumeration for the date types
            </summary>
        </member>
        <member name="T:Atom.DayPeriod">
            <summary>
            Provides enumeration for the day periods
            </summary>
        </member>
        <member name="F:Atom.DayPeriod.AM">
            <summary>
            Before midday
            </summary>
        </member>
        <member name="F:Atom.DayPeriod.PM">
            <summary>
            Post midday
            </summary>
        </member>
        <member name="T:Atom.Direction">
            <summary>
            Provides enumeration for the directions
            </summary>
        </member>
        <member name="F:Atom.Direction.LeftToRight">
            <summary>
            From left to right
            </summary>
        </member>
        <member name="F:Atom.Direction.RightToLeft">
            <summary>
            From right to left
            </summary>
        </member>
        <member name="F:Atom.Direction.TopToBottom">
            <summary>
            From top to bottom
            </summary>
        </member>
        <member name="F:Atom.Direction.BottomToTop">
            <summary>
            From bottom to top
            </summary>
        </member>
        <member name="T:Atom.DockType">
            <summary>
            Provides enumeration for the dock types
            </summary>
        </member>
        <member name="F:Atom.DockType.Fill">
            <summary>
            Fill all the available space
            </summary>
        </member>
        <member name="F:Atom.DockType.Top">
            <summary>
            Position at the top of the available space
            </summary>
        </member>
        <member name="F:Atom.DockType.Bottom">
            <summary>
            Position at the bottom of the available space
            </summary>
        </member>
        <member name="F:Atom.DockType.Left">
            <summary>
            Position at the left of the available space
            </summary>
        </member>
        <member name="F:Atom.DockType.Right">
            <summary>
            Position at the right of the available space
            </summary>
        </member>
        <member name="F:Atom.DockType.None">
            <summary>
            No docking
            </summary>
        </member>
        <member name="T:Atom.ErrorType">
            <summary>
            Provides enumeration over the error types
            </summary>
        </member>
        <member name="F:Atom.ErrorType.Error">
            <summary>
            A standard error
            </summary>
        </member>
        <member name="F:Atom.ErrorType.Warning">
            <summary>
            A warning
            </summary>
        </member>
        <member name="F:Atom.ErrorType.Information">
            <summary>
            An informative message
            </summary>
        </member>
        <member name="F:Atom.ErrorType.Hidden">
            <summary>
            An error that should get hidden
            </summary>
        </member>
        <member name="T:Atom.EventRepeatOption">
            <summary>
            Provides enumeration for the event repeat options
            </summary>
        </member>
        <member name="F:Atom.EventRepeatOption.Daily">
            <summary>
            Daily recurrence
            </summary>
        </member>
        <member name="F:Atom.EventRepeatOption.Weekly">
            <summary>
            Weekly recurrence
            </summary>
        </member>
        <member name="F:Atom.EventRepeatOption.Monthly">
            <summary>
            Monthly recurrence
            </summary>
        </member>
        <member name="F:Atom.EventRepeatOption.Yearly">
            <summary>
            Yearly recurrence
            </summary>
        </member>
        <member name="T:Atom.EventState">
            <summary>
            Provides enumeration for the event states
            </summary>
        </member>
        <member name="F:Atom.EventState.Scheduled">
            <summary>
            Scheduled
            </summary>
        </member>
        <member name="F:Atom.EventState.InProgress">
            <summary>
            In progress
            </summary>
        </member>
        <member name="F:Atom.EventState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:Atom.EventState.NotStarted">
            <summary>
            Not started
            </summary>
        </member>
        <member name="F:Atom.EventState.Cancelled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="T:Atom.FilterType">
            <summary>
            Provides enumeration over the filter types
            </summary>
        </member>
        <member name="F:Atom.FilterType.Equals">
            <summary>
            An equals filter
            </summary>
        </member>
        <member name="F:Atom.FilterType.Search">
            <summary>
            A search filter
            </summary>
        </member>
        <member name="F:Atom.FilterType.Min">
            <summary>
            A minimum filter
            </summary>
        </member>
        <member name="F:Atom.FilterType.Max">
            <summary>
            A maximum filter
            </summary>
        </member>
        <member name="F:Atom.FilterType.After">
            <summary>
            An after filter
            </summary>
        </member>
        <member name="F:Atom.FilterType.Before">
            <summary>
            A before filter
            </summary>
        </member>
        <member name="F:Atom.FilterType.Include">
            <summary>
            An include filter
            </summary>
        </member>
        <member name="F:Atom.FilterType.Exclude">
            <summary>
            An exclude filter
            </summary>
        </member>
        <member name="F:Atom.FilterType.Other">
            <summary>
            An other type of filter
            </summary>
        </member>
        <member name="T:Atom.GroupByCondition">
            <summary>
            Provides enumeration over the group by condition options
            </summary>
        </member>
        <member name="F:Atom.GroupByCondition.Sum">
            <summary>
            Sum all the numeric values
            </summary>
        </member>
        <member name="F:Atom.GroupByCondition.Average">
            <summary>
            Gets the average of all the numeric values
            </summary>
        </member>
        <member name="F:Atom.GroupByCondition.Greatest">
            <summary>
            Gets the greatest of all the numeric values
            </summary>
        </member>
        <member name="F:Atom.GroupByCondition.Least">
            <summary>
            Gets the smallest of all the numeric values
            </summary>
        </member>
        <member name="F:Atom.GroupByCondition.AbsoluteSum">
            <summary>
            Sums all the numeric values and then gets the absolute value
            </summary>
        </member>
        <member name="F:Atom.GroupByCondition.SumAbsolutes">
            <summary>
            Gets the absolute value of all the numeric values before performing the sum
            </summary>
        </member>
        <member name="T:Atom.LanguageCode">
            <summary>
            Provides enumerations for the available languages based on the ISO 639-1
            </summary>
        </member>
        <member name="F:Atom.LanguageCode.AA">
            <summary>
            Afar
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AB">
            <summary>
            Abkhazian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AE">
            <summary>
            Avestan
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AF">
            <summary>
            Afrikaans
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AK">
            <summary>
            Akan
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AM">
            <summary>
            Amharic
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AN">
            <summary>
            Aragonese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AR">
            <summary>
            Arabic
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AS">
            <summary>
            Assamese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AV">
            <summary>
            Avaric
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AY">
            <summary>
            Aymara
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.AZ">
            <summary>
            Azerbaijani
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BA">
            <summary>
            Bashkir
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BE">
            <summary>
            Belarusian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BG">
            <summary>
            Bulgarian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BI">
            <summary>
            Bislama
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BM">
            <summary>
            Bambara
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BN">
            <summary>
            Bengali
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BO">
            <summary>
            Tibetan
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BR">
            <summary>
            Breton
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.BS">
            <summary>
            Bosnian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CA">
            <summary>
            Catalan, Valencian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CE">
            <summary>
            Chechen
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CH">
            <summary>
            Chamorro
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CO">
            <summary>
            Corsican
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CR">
            <summary>
            Cree
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CS">
            <summary>
            Czech
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CU">
            <summary>
            Church Slavic, Old Slavonic, Church Slavonic, Old Bulgarian, Old Church Slavonic
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CV">
            <summary>
            Chuvash
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.CY">
            <summary>
            Welsh
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.DA">
            <summary>
            Danish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.DE">
            <summary>
            German
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.DV">
            <summary>
            Divehi, Dhivehi, Maldivian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.DZ">
            <summary>
            Dzongkha
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.EE">
            <summary>
            Ewe
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.EL">
            <summary>
            Greek, Modern (1453–)
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.EN">
            <summary>
            English
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.EO">
            <summary>
            Esperanto
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ES">
            <summary>
            Spanish, Castilian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ET">
            <summary>
            Estonian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.EU">
            <summary>
            Basque
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.FA">
            <summary>
            Persian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.FF">
            <summary>
            Fulah
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.FI">
            <summary>
            Finnish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.FJ">
            <summary>
            Fijian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.FO">
            <summary>
            Faroese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.FR">
            <summary>
            French
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.FY">
            <summary>
            Western Frisian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.GA">
            <summary>
            Irish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.GD">
            <summary>
            Gaelic, Scottish Gaelic
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.GL">
            <summary>
            Galician
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.GN">
            <summary>
            Guarani
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.GU">
            <summary>
            Gujarati
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.GV">
            <summary>
            Manx
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HA">
            <summary>
            Hausa
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HE">
            <summary>
            Hebrew
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HI">
            <summary>
            Hindi
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HO">
            <summary>
            Hiri Motu
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HR">
            <summary>
            Croatian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HT">
            <summary>
            Haitian, Haitian Creole
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HU">
            <summary>
            Hungarian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HY">
            <summary>
            Armenian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.HZ">
            <summary>
            Herero
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.IA">
            <summary>
            Interlingua (International Auxiliary Language Association)
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ID">
            <summary>
            Indonesian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.IE">
            <summary>
            Interlingue, Occidental
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.IG">
            <summary>
            Igbo
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.II">
            <summary>
            Sichuan Yi, Nuosu
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.IK">
            <summary>
            Inupiaq
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.IO">
            <summary>
            Ido
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.IS">
            <summary>
            Icelandic
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.IT">
            <summary>
            Italian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.IU">
            <summary>
            Inuktitut
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.JA">
            <summary>
            Japanese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.JV">
            <summary>
            Javanese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KA">
            <summary>
            Georgian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KG">
            <summary>
            Kongo
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KI">
            <summary>
            Kikuyu, Gikuyu
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KJ">
            <summary>
            Kuanyama, Kwanyama
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KK">
            <summary>
            Kazakh
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KL">
            <summary>
            Kalaallisut, Greenlandic
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KM">
            <summary>
            Central Khmer
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KN">
            <summary>
            Kannada
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KO">
            <summary>
            Korean
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KR">
            <summary>
            Kanuri
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KS">
            <summary>
            Kashmiri
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KU">
            <summary>
            Kurdish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KV">
            <summary>
            Komi
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KW">
            <summary>
            Cornish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.KY">
            <summary>
            Kirghiz, Kyrgyz
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LA">
            <summary>
            Latin
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LB">
            <summary>
            Luxembourgish, Letzeburgesch
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LG">
            <summary>
            Ganda
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LI">
            <summary>
            Limburgan, Limburger, Limburgish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LN">
            <summary>
            Lingala
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LO">
            <summary>
            Lao
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LT">
            <summary>
            Lithuanian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LU">
            <summary>
            Luba-Katanga
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.LV">
            <summary>
            Latvian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MG">
            <summary>
            Malagasy
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MH">
            <summary>
            Marshallese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MI">
            <summary>
            Maori
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MK">
            <summary>
            Macedonian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ML">
            <summary>
            Malayalam
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MN">
            <summary>
            Mongolian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MR">
            <summary>
            Marathi
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MS">
            <summary>
            Malay
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MT">
            <summary>
            Maltese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.MY">
            <summary>
            Burmese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NA">
            <summary>
            Nauru
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NB">
            <summary>
            Norwegian Bokmål
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ND">
            <summary>
            North Ndebele
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NE">
            <summary>
            Nepali
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NG">
            <summary>
            Ndonga
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NL">
            <summary>
            Dutch, Flemish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NN">
            <summary>
            Norwegian Nynorsk
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NO">
            <summary>
            Norwegian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NR">
            <summary>
            South Ndebele
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NV">
            <summary>
            Navajo, Navaho
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.NY">
            <summary>
            Chichewa, Chewa, Nyanja
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.OC">
            <summary>
            Occitan
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.OJ">
            <summary>
            Ojibwa
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.OM">
            <summary>
            Oromo
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.OR">
            <summary>
            Oriya
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.OS">
            <summary>
            Ossetian, Ossetic
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.PA">
            <summary>
            Punjabi, Panjabi
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.PI">
            <summary>
            Pali
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.PL">
            <summary>
            Polish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.PS">
            <summary>
            Pashto, Pushto
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.PT">
            <summary>
            Portuguese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.QU">
            <summary>
            Quechua
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.RM">
            <summary>
            Romansh
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.RN">
            <summary>
            Rundi
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.RO">
            <summary>
            Romanian, Moldavian, Moldovan
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.RU">
            <summary>
            Russian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.RW">
            <summary>
            Kinyarwanda
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SA">
            <summary>
            Sanskrit
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SC">
            <summary>
            Sardinian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SD">
            <summary>
            Sindhi
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SE">
            <summary>
            Northern Sami
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SG">
            <summary>
            Sango
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SI">
            <summary>
            Sinhala, Sinhalese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SK">
            <summary>
            Slovak
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SL">
            <summary>
            Slovenian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SM">
            <summary>
            Samoan
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SN">
            <summary>
            Shona
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SO">
            <summary>
            Somali
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SQ">
            <summary>
            Albanian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SR">
            <summary>
            Serbian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SS">
            <summary>
            Swati
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ST">
            <summary>
            Southern Sotho
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SU">
            <summary>
            Sundanese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SV">
            <summary>
            Swedish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.SW">
            <summary>
            Swahili
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TA">
            <summary>
            Tamil
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TE">
            <summary>
            Telugu
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TG">
            <summary>
            Tajik
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TH">
            <summary>
            Thai
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TI">
            <summary>
            Tigrinya
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TK">
            <summary>
            Turkmen
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TL">
            <summary>
            Tagalog
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TN">
            <summary>
            Tswana
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TO">
            <summary>
            Tonga (Tonga Islands)
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TR">
            <summary>
            Turkish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TS">
            <summary>
            Tsonga
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TT">
            <summary>
            Tatar
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TW">
            <summary>
            Twi
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.TY">
            <summary>
            Tahitian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.UG">
            <summary>
            Uighur, Uyghur
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.UK">
            <summary>
            Ukrainian
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.UR">
            <summary>
            Urdu
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.UZ">
            <summary>
            Uzbek
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.VE">
            <summary>
            Venda
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.VI">
            <summary>
            Vietnamese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.VO">
            <summary>
            Volapük
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.WA">
            <summary>
            Walloon
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.WO">
            <summary>
            Wolof
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.XH">
            <summary>
            Xhosa
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.YI">
            <summary>
            Yiddish
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.YO">
            <summary>
            Yoruba
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ZA">
            <summary>
            Zhuang, Chuang
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ZH">
            <summary>
            Chinese
            </summary> 
        </member>
        <member name="F:Atom.LanguageCode.ZU">
            <summary>
            Zulu
            </summary> 
        </member>
        <member name="T:Atom.Month">
            <summary>
            Provides enumeration for the months
            </summary>
        </member>
        <member name="F:Atom.Month.January">
            <summary>
            Indicates January
            </summary>
        </member>
        <member name="F:Atom.Month.February">
            <summary>
            Indicates February
            </summary>
        </member>
        <member name="F:Atom.Month.March">
            <summary>
            Indicates March
            </summary>
        </member>
        <member name="F:Atom.Month.April">
            <summary>
            Indicates April
            </summary>
        </member>
        <member name="F:Atom.Month.May">
            <summary>
            Indicates May
            </summary>
        </member>
        <member name="F:Atom.Month.June">
            <summary>
            Indicates June
            </summary>
        </member>
        <member name="F:Atom.Month.July">
            <summary>
            Indicates July
            </summary>
        </member>
        <member name="F:Atom.Month.August">
            <summary>
            Indicates August
            </summary>
        </member>
        <member name="F:Atom.Month.September">
            <summary>
            Indicates September
            </summary>
        </member>
        <member name="F:Atom.Month.October">
            <summary>
            Indicates October
            </summary>
        </member>
        <member name="F:Atom.Month.Novembre">
            <summary>
            Indicates Novembre
            </summary>
        </member>
        <member name="F:Atom.Month.December">
            <summary>
            Indicates December
            </summary>
        </member>
        <member name="T:Atom.NumericEqualityOperator">
            <summary>
            Provides enumeration over the equality operators
            </summary>
        </member>
        <member name="F:Atom.NumericEqualityOperator.EqualsTo">
            <summary>
            Equals to "=="
            </summary>
        </member>
        <member name="F:Atom.NumericEqualityOperator.NotEqualsTo">
            <summary>
            Not equals to "!="
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Atom.NumericEqualityOperator.LessThan" -->
        <member name="F:Atom.NumericEqualityOperator.GreaterThan">
            <summary>
            Greater than ">"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Atom.NumericEqualityOperator.LessOrEqualThan" -->
        <member name="F:Atom.NumericEqualityOperator.GreaterOrEqualThan">
            <summary>
            Greater or equal than ">="
            </summary>
        </member>
        <member name="T:Atom.OrderCondition">
            <summary>
            Provides enumeration for the order conditions
            </summary>
        </member>
        <member name="F:Atom.OrderCondition.Ascending">
            <summary>
            Ascending sort order
            </summary>
        </member>
        <member name="F:Atom.OrderCondition.Descending">
            <summary>
            Descending sort order
            </summary>
        </member>
        <member name="T:Atom.Placement">
            <summary>
            Provides enumeration for the  placement positions
            </summary>
        </member>
        <member name="F:Atom.Placement.Left">
            <summary>
            Placement on the left side
            </summary>
        </member>
        <member name="F:Atom.Placement.Right">
            <summary>
            Placement on the right side
            </summary>
        </member>
        <member name="F:Atom.Placement.Top">
            <summary>
            Placement on the top side
            </summary>
        </member>
        <member name="F:Atom.Placement.Bottom">
            <summary>
            Placement on the bottom side
            </summary>
        </member>
        <member name="F:Atom.Placement.Center">
            <summary>
            Placement on the center side
            </summary>
        </member>
        <member name="T:Atom.Quadrant">
            <summary>
            Provides enumeration over the quadrants
            </summary>
        </member>
        <member name="F:Atom.Quadrant.First">
            <summary>
            The first quadrant
            </summary>
        </member>
        <member name="F:Atom.Quadrant.Second">
            <summary>
            The second quadrant
            </summary>
        </member>
        <member name="F:Atom.Quadrant.Third">
            <summary>
            The third quadrant
            </summary>
        </member>
        <member name="F:Atom.Quadrant.Fourth">
            <summary>
            The second quadrant
            </summary>
        </member>
        <member name="T:Atom.QueueStatus">
            <summary>
            Provides enumeration over the queue statuses
            </summary>
        </member>
        <member name="F:Atom.QueueStatus.Pending">
            <summary>
            Pending (waiting) status
            </summary>
        </member>
        <member name="F:Atom.QueueStatus.Accepted">
            <summary>
            Accepted status
            </summary>
        </member>
        <member name="F:Atom.QueueStatus.Rejected">
            <summary>
            Rejected status
            </summary>
        </member>
        <member name="T:Atom.RectangleCorner">
            <summary>
            Provides enumeration for the corner rectangle corners
            </summary>
        </member>
        <member name="F:Atom.RectangleCorner.TopLeft">
            <summary>
            The top left corner
            </summary>
        </member>
        <member name="F:Atom.RectangleCorner.TopRight">
            <summary>
            The top right corner
            </summary>
        </member>
        <member name="F:Atom.RectangleCorner.BottomRight">
            <summary>
            The bottom right corner
            </summary>
        </member>
        <member name="F:Atom.RectangleCorner.BottomLeft">
            <summary>
            The bottom left corner
            </summary>
        </member>
        <member name="T:Atom.SchedulingRule">
            <summary>
            Provides enumeration over the scheduling rules
            </summary>
        </member>
        <member name="F:Atom.SchedulingRule.Date">
            <summary>
            Schedule using a specific date
            </summary>
        </member>
        <member name="F:Atom.SchedulingRule.CRONExpression">
            <summary>
            Schedule using a CRON expression
            </summary>
        </member>
        <member name="T:Atom.Sex">
            <summary>
            Provides enumeration for the sex options
            </summary>
        </member>
        <member name="F:Atom.Sex.Male">
            <summary>
            Male
            </summary>
        </member>
        <member name="F:Atom.Sex.Female">
            <summary>
            Female
            </summary>
        </member>
        <member name="T:Atom.StringEqualityOperator">
            <summary>
            Provides enumeration over the string equality operator
            </summary>
        </member>
        <member name="F:Atom.StringEqualityOperator.Contains">
            <summary>
            String contains a sub string value
            </summary>
        </member>
        <member name="F:Atom.StringEqualityOperator.Equals">
            <summary>
            String is equal to a value
            </summary>
        </member>
        <member name="F:Atom.StringEqualityOperator.StartsWith">
            <summary>
            String that starts with a value
            </summary>
        </member>
        <member name="F:Atom.StringEqualityOperator.EndsWith">
            <summary>
            String that ends with a value
            </summary>
        </member>
        <member name="F:Atom.StringEqualityOperator.Regex">
            <summary>
            String that satisfies a regex
            </summary>
        </member>
        <member name="T:Atom.TextValue">
            <summary>
            Provides enumeration for the text value types
            </summary>
        </member>
        <member name="F:Atom.TextValue.Default">
            <summary>
            A simple text value
            </summary>
        </member>
        <member name="F:Atom.TextValue.Phone">
            <summary>
            A phone number
            </summary>
        </member>
        <member name="F:Atom.TextValue.Email">
            <summary>
            An email
            </summary>
        </member>
        <member name="T:Atom.TimePeriod">
            <summary>
            Provides enumeration over the standard periods
            </summary>
        </member>
        <member name="F:Atom.TimePeriod.Second">
            <summary>
            Second period
            </summary>
        </member>
        <member name="F:Atom.TimePeriod.Minute">
            <summary>
            Minute period
            </summary>
        </member>
        <member name="F:Atom.TimePeriod.Hour">
            <summary>
            Hour period
            </summary>
        </member>
        <member name="F:Atom.TimePeriod.Day">
            <summary>
            Day period
            </summary>
        </member>
        <member name="F:Atom.TimePeriod.Week">
            <summary>
            Week period
            </summary>
        </member>
        <member name="F:Atom.TimePeriod.Month">
            <summary>
            Month period
            </summary>
        </member>
        <member name="F:Atom.TimePeriod.Year">
            <summary>
            Year period
            </summary>
        </member>
        <member name="T:Atom.TimeValue">
            <summary>
            Provides enumeration for the time value types
            </summary>
        </member>
        <member name="F:Atom.TimeValue.Second">
            <summary>
            Seconds time value
            </summary>
        </member>
        <member name="F:Atom.TimeValue.Minute">
            <summary>
            Minutes time value
            </summary>
        </member>
        <member name="F:Atom.TimeValue.Hour">
            <summary>
            Hours time value
            </summary>
        </member>
        <member name="T:Atom.VersionType">
            <summary>
            Provides enumeration for the version types
            </summary>
        </member>
        <member name="F:Atom.VersionType.Release">
            <summary>
            Release version
            </summary>
        </member>
        <member name="F:Atom.VersionType.Alpha">
            <summary>
            Alpha version
            </summary>
        </member>
        <member name="F:Atom.VersionType.Beta">
            <summary>
            Beta version
            </summary>
        </member>
        <member name="F:Atom.VersionType.Preview">
            <summary>
            Preview version
            </summary>
        </member>
        <member name="T:Atom.WordReplacementMethod">
            <summary>
            Provides enumeration over the word replacement methods
            </summary>
        </member>
        <member name="T:Atom.AspectRatio">
            <summary>
            Represents an aspect ratio.
            </summary>
            <remarks>
            The default aspect ratio is 1:1.
            </remarks>
        </member>
        <member name="P:Atom.AspectRatio.Wide16x9">
            <summary>
            Wide aspect ratio 16x9
            </summary>
        </member>
        <member name="P:Atom.AspectRatio.Square">
            <summary>
            Square aspect ratio
            </summary>
        </member>
        <member name="F:Atom.AspectRatio.mX">
            <summary>
            The member of the <see cref="P:Atom.AspectRatio.X"/> property
            </summary>
        </member>
        <member name="F:Atom.AspectRatio.mY">
            <summary>
            The member of the <see cref="P:Atom.AspectRatio.Y"/> property
            </summary>
        </member>
        <member name="P:Atom.AspectRatio.X">
            <summary>
            The X part of the aspect ration
            </summary>
        </member>
        <member name="P:Atom.AspectRatio.Y">
            <summary>
            The Y part of the aspect ratio
            </summary>
        </member>
        <member name="P:Atom.AspectRatio.Ratio">
            <summary>
            The ratio
            </summary>
        </member>
        <member name="M:Atom.AspectRatio.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Standard constructor
            </summary>
            <param name="x">The X part of the aspect ration</param>
            <param name="y">The Y part of the aspect ratio</param>
        </member>
        <member name="M:Atom.AspectRatio.FromString(System.String)">
            <summary>
            Converts a string that uses the format X:Y to an <see cref="T:Atom.AspectRatio"/>
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.AspectRatio.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.AspectRatio.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The format to use. -or- A null reference (Nothing in Visual Basic) to use the
            default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.
            </param>
            <param name="formatProvider">
            The provider to use to format the value. -or- A null reference (Nothing in Visual
            Basic) to obtain the numeric format information from the current locale setting
            of the operating system.
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.AspectRatio.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about s.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.AspectRatio.TryParse(System.String,System.IFormatProvider,Atom.AspectRatio@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about <paramref name="s"/>.</param>
            <param name="result">
            When this method returns, contains the result of successfully parsing <paramref name="s"/> or an
            undefined value on failure.
            </param>
            <returns></returns>
        </member>
        <member name="T:Atom.DayOfWeekTimeRange">
            <summary>
            Represents a time range of a specific week day
            </summary>
        </member>
        <member name="F:Atom.DayOfWeekTimeRange.mDaysOfWeek">
            <summary>
            The values of the <see cref="P:Atom.DayOfWeekTimeRange.DayOfWeek"/> enum.
            </summary>
        </member>
        <member name="P:Atom.DayOfWeekTimeRange.DayOfWeek">
            <summary>
            The day of week
            </summary>
        </member>
        <member name="P:Atom.DayOfWeekTimeRange.Start">
            <summary>
            The start
            </summary>
        </member>
        <member name="P:Atom.DayOfWeekTimeRange.End">
            <summary>
            The end
            </summary>
        </member>
        <member name="P:Atom.DayOfWeekTimeRange.Atom#IReadOnlyRangeable{System#TimeOnly}#Minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="P:Atom.DayOfWeekTimeRange.Atom#IReadOnlyRangeable{System#TimeOnly}#Maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.#ctor(System.DayOfWeek,System.TimeOnly,System.TimeOnly)">
            <summary>
            Default constructor
            </summary>
            <param name="dayOfWeek">The day of week</param>
            <param name="start">The first value</param>
            <param name="end">The second value</param>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.Contains(System.Collections.Generic.IEnumerable{Atom.DayOfWeekTimeRange},System.DateTime)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="dateTime"/> is contained withing the specified <paramref name="values"/>
            </summary>
            <param name="values">The values</param>
            <param name="dateTime">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.Contains(System.Collections.Generic.IEnumerable{Atom.DayOfWeekTimeRange},System.TimeOnly)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="time"/> is contained withing the specified <paramref name="values"/>
            </summary>
            <param name="values">The values</param>
            <param name="time">The time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.Convert(System.Collections.Generic.IEnumerable{Atom.DayOfWeekTimeRange})">
            <summary>
            Converts the specified <paramref name="values"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/>
            that maps the <see cref="T:System.DayOfWeek"/> values with the related <see cref="T:Atom.TimeRange"/>s
            </summary>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.Convert(System.Collections.Generic.IReadOnlyDictionary{System.DayOfWeek,System.Collections.Generic.IEnumerable{Atom.TimeRange}})">
            <summary>
            Converts a dictionary that maps the <see cref="T:System.DayOfWeek"/> values with the related <see cref="T:Atom.TimeRange"/>s
            to a collection of <see cref="T:Atom.DayOfWeekTimeRange"/>s
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.MergeOverlapping(System.Collections.Generic.IEnumerable{Atom.DayOfWeekTimeRange})">
            <summary>
            Merges the overlapping <see cref="T:Atom.DayOfWeekTimeRange"/>s
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.ToDictionary(System.Collections.Generic.IEnumerable{Atom.DayOfWeekTimeRange})">
            <summary>
            Creates and returns a <see cref="T:System.Collections.Generic.Dictionary`2"/> by pairing the <see cref="P:Atom.DayOfWeekTimeRange.DayOfWeek"/>s of the specified
            <paramref name="value"/> with their related <see cref="T:Atom.TimeRange"/>s
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.GetDefaultValue">
            <summary>
            Gets the default day of week time ranges
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.DayOfWeekTimeRange.Normalize(System.Collections.Generic.IReadOnlyDictionary{System.DayOfWeek,System.Collections.Generic.IEnumerable{Atom.TimeRange}})">
            <summary>
            Normalizes the specified <paramref name="dayOfWeekTimeRanges"/>
            </summary>
            <param name="dayOfWeekTimeRanges">The day of week time ranges</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DaySpan">
            <summary>
            Represent a span of days
            </summary>
        </member>
        <member name="F:Atom.DaySpan.mNumberOfDays">
            <summary>
            The member of the <see cref="P:Atom.DaySpan.NumberOfDays"/> property
            </summary>
        </member>
        <member name="F:Atom.DaySpan.mDays">
            <summary>
            The member of the <see cref="P:Atom.DaySpan.Days"/> property
            </summary>
        </member>
        <member name="P:Atom.DaySpan.StartingDate">
            <summary>
            The start date.
            </summary>
        </member>
        <member name="P:Atom.DaySpan.EndingDate">
            <summary>
            The end date.
            </summary>
        </member>
        <member name="P:Atom.DaySpan.StartingDateTime">
            <summary>
            The starting date
            </summary>
        </member>
        <member name="P:Atom.DaySpan.EndingDateTime">
            <summary>
            The ending date
            </summary>
        </member>
        <member name="P:Atom.DaySpan.NumberOfDays">
            <summary>
            Gets the number of days of the day span
            </summary>
        </member>
        <member name="P:Atom.DaySpan.Days">
            <summary>
            Gets the date times that are between the <see cref="P:Atom.DaySpan.StartingDateTime"/> and the <see cref="P:Atom.DaySpan.EndingDateTime"/>
            </summary>
        </member>
        <member name="P:Atom.DaySpan.SecondsDuration">
            <summary>
            The duration of the day span in seconds
            </summary>
        </member>
        <member name="P:Atom.DaySpan.Atom#IReadOnlyRangeable{System#DateOnly}#Minimum">
            <summary>
            The minimum
            </summary>
        </member>
        <member name="P:Atom.DaySpan.Atom#IReadOnlyRangeable{System#DateOnly}#Maximum">
            <summary>
            The maximum
            </summary>
        </member>
        <member name="P:Atom.DaySpan.Atom#IReadOnlyRangeable{System#DateTime}#Minimum">
            <summary>
            The minimum
            </summary>
        </member>
        <member name="P:Atom.DaySpan.Atom#IReadOnlyRangeable{System#DateTime}#Maximum">
            <summary>
            The maximum
            </summary>
        </member>
        <member name="M:Atom.DaySpan.#ctor(System.DateOnly,System.DateOnly)">
            <summary>
            Default constructor
            </summary>
            <param name="startingDate">The starting date</param>
            <param name="endingDate">The ending date</param>
        </member>
        <member name="M:Atom.DaySpan.#ctor(System.DateOnly,System.UInt32)">
            <summary>
            Duration based constructor
            </summary>
            <param name="startingDate">The starting date</param>
            <param name="numberOfDays">The duration of the day span in days</param>
        </member>
        <member name="M:Atom.DaySpan.#ctor(System.UInt32,System.DateOnly)">
            <summary>
            Duration based constructor
            </summary>
            <param name="numberOfDays">The duration of the day span in days</param>
            <param name="endingDate">The ending date</param>
        </member>
        <member name="M:Atom.DaySpan.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Default constructor
            </summary>
            <param name="startingDate">The starting date</param>
            <param name="endingDate">The ending date</param>
        </member>
        <member name="M:Atom.DaySpan.#ctor(System.DateTime,System.UInt32)">
            <summary>
            Duration based constructor
            </summary>
            <param name="startingDate">The starting date</param>
            <param name="numberOfDays">The duration of the day span in days</param>
        </member>
        <member name="M:Atom.DaySpan.#ctor(System.UInt32,System.DateTime)">
            <summary>
            Duration based constructor
            </summary>
            <param name="numberOfDays">The duration of the day span in days</param>
            <param name="endingDate">The ending date</param>
        </member>
        <member name="M:Atom.DaySpan.Contains(System.DateTime)">
            <summary>
            Checks if the specified <paramref name="date"/> is contained in the day span.
            </summary>
            <param name="date">The date to check if is contained in the current day span.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.Contains(System.DateOnly)">
            <summary>
            Checks if the specified <paramref name="date"/> is contained in the day span.
            </summary>
            <param name="date">The date to check if is contained in the current day span.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DaySpan.ToString(System.String,System.String,System.String,System.String)">
            <summary>
            Returns a string that represents the current object
            </summary>
            <param name="yearsFormat">The format that should be used for displaying the years</param>
            <param name="monthsFormat">The format that should be used for displaying the months</param>
            <param name="daysFormat">The format that should be used for displaying the days</param>
            <param name="separator">The separator that should be used for separating the date parts</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.ToMinimalString">
            <summary>
            Returns a string that represents the day span using a minimal format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DaySpan.Equals(Atom.DaySpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">The other object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.CompareTo(Atom.DaySpan)">
            <summary>
            Compares the current object to the specified <paramref name="other"/>
            </summary>
            <param name="other">The object to be compared to</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.CompareTo(System.Object)">
            <summary>
            Compares the current object to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare to the current object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DaySpan.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">
            The format to use. -or- A null reference (Nothing in Visual Basic) to use the
            default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.
            </param>
            <param name="formatProvider">
            The provider to use to format the value. -or- A null reference (Nothing in Visual
            Basic) to obtain the numeric format information from the current locale setting
            of the operating system.
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about s.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.TryParse(System.String,System.IFormatProvider,Atom.DaySpan@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">An object that provides culture-specific formatting information about <paramref name="s"/>.</param>
            <param name="result">
            When this method returns, contains the result of successfully parsing <paramref name="s"/> or an
            undefined value on failure.
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.op_Equality(Atom.DaySpan,Atom.DaySpan)">
            <summary>
            Determines whether two specified <see cref="T:Atom.DaySpan"/>s have the same value
            </summary>
            <param name="obj1">The first day span</param>
            <param name="obj2">The second day span</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DaySpan.op_Inequality(Atom.DaySpan,Atom.DaySpan)">
            <summary>
            Determines whether tow specified <see cref="T:Atom.DaySpan"/>s have different values
            </summary>
            <param name="obj1">The first day span</param>
            <param name="obj2">The second day span</param>
            <returns></returns>
        </member>
        <member name="T:Atom.LocalizedValue">
            <summary>
            A <see cref="T:System.String"/> <see cref="P:Atom.LocalizedValue.Value"/> at a specific <see cref="P:Atom.LocalizedValue.Language"/>
            </summary>
        </member>
        <member name="F:Atom.LocalizedValue.mValue">
            <summary>
            The member of the <see cref="P:Atom.LocalizedValue.Value"/> property
            </summary>
        </member>
        <member name="P:Atom.LocalizedValue.Language">
            <summary>
            The language
            </summary>
        </member>
        <member name="P:Atom.LocalizedValue.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.LocalizedValue.#ctor(Atom.LanguageCode,System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.NotNullEnumerable`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            </summary>
            <typeparam name="T">The type of the items</typeparam>
        </member>
        <member name="F:Atom.NotNullEnumerable`1.mItems">
            <summary>
            The items
            </summary>
        </member>
        <member name="M:Atom.NotNullEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.NotNullEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.NotNullEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.NotNullEnumerable`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.Range`1">
            <summary>
            Represents a range of values
            </summary>
            <typeparam name="T">The type of the values</typeparam>
        </member>
        <member name="P:Atom.Range`1.Minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="P:Atom.Range`1.Maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:Atom.Range`1.#ctor(`0,`0)">
            <summary>
            Default constructor
            </summary>
            <param name="value1">The first value</param>
            <param name="value2">The second value</param>
        </member>
        <member name="T:Atom.TimeRange">
            <summary>
            Represents a time range
            </summary>
        </member>
        <member name="P:Atom.TimeRange.Start">
            <summary>
            The start
            </summary>
        </member>
        <member name="P:Atom.TimeRange.End">
            <summary>
            The end
            </summary>
        </member>
        <member name="P:Atom.TimeRange.Atom#IReadOnlyRangeable{System#TimeOnly}#Minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="P:Atom.TimeRange.Atom#IReadOnlyRangeable{System#TimeOnly}#Maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:Atom.TimeRange.#ctor(System.TimeOnly,System.TimeOnly)">
            <summary>
            Default constructor
            </summary>
            <param name="value1">The first value</param>
            <param name="value2">The second value</param>
        </member>
        <member name="T:Atom.DateOnlyExtensions">
            <summary>
            The extension for the <see cref="T:System.DateOnly"/>
            </summary>
        </member>
        <member name="M:Atom.DateOnlyExtensions.ToDateTime(System.DateOnly)">
            <summary>
            Create and return the <see cref="T:System.DateTime"/> from the specified <paramref name="value"/>
            using the 00:00:00:00 as the time value
            </summary>
            <param name="value">The date value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateOnlyExtensions.ToISO8601String(System.DateOnly)">
            <summary>
            Returns a string that represents the specified <paramref name="value"/> using the ISO8601 format
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DateTimeConstants">
            <summary>
            Constants associated with dates and times
            </summary>
        </member>
        <member name="P:Atom.DateTimeConstants.Q1Months">
            <summary>
            The months of the first quarter of the year
            </summary>
        </member>
        <member name="P:Atom.DateTimeConstants.Q2Months">
            <summary>
            The months of the second quarter of the year
            </summary>
        </member>
        <member name="P:Atom.DateTimeConstants.Q3Months">
            <summary>
            The months of the third quarter of the year
            </summary>
        </member>
        <member name="P:Atom.DateTimeConstants.Q4Months">
            <summary>
            The months of the fourth quarter of the year
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.DateAndTimeFormat">
            <summary>
            The standard date and time format
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.ShortDateFormat">
            <summary>
            The date only format
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.TimeFormat">
            <summary>
            The time only format
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.AllDayTimeFormat">
            <summary>
            The time only format
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.ISO8601Format">
            <summary>
            The format that is used for the ISO8601 standard
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.SundayShort">
            <summary>
            The Sunday short code
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.MondayShort">
            <summary>
            The Monday short code
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.TuesdayShort">
            <summary>
            The Tuesday short code
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.WednesdayShort">
            <summary>
            The Wednesday short code
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.ThursdayShort">
            <summary>
            The Thursday short code
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.FridayShort">
            <summary>
            The Friday short code
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.SaturdayShort">
            <summary>
            The Saturday short code
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.JanuaryName">
            <summary>
            The name of January
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.FenruaryName">
            <summary>
            The name of February
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.MarchName">
            <summary>
            The name of March
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.AprilName">
            <summary>
            The name of April
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.MayName">
            <summary>
            The name of May
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.JuneName">
            <summary>
            The name of June
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.JulyName">
            <summary>
            The name of July
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.AugustName">
            <summary>
            The name of August
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.SeptemberName">
            <summary>
            The name of September
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.OctoberName">
            <summary>
            The name of October
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.NovemberName">
            <summary>
            The name of November
            </summary>
        </member>
        <member name="F:Atom.DateTimeConstants.DecemberName">
            <summary>
            The name of December
            </summary>
        </member>
        <member name="T:Atom.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
            Converts a given <paramref name="date"/> into a Unix timestamp
            </summary>
            <param name="date">The date</param>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToUnixTimeSeconds(System.DateTime)">
            <summary>
            Converts a given <paramref name="date"/> into a Unix timestamp
            </summary>
            <param name="date">The date</param>
        </member>
        <member name="M:Atom.DateTimeExtensions.GetQuarter(System.DateTime)">
            <summary>
            Gets the quarter that contains the specified <paramref name="date"/>
            </summary>
            <param name="date">The date</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToString(System.Nullable{System.DateTime},System.String)">
            <summary>
            Returns a string based on the output format of a nullable date time
            </summary>
            <param name="dt">The nullable date time</param>
            <param name="format">The output format</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToTimeString(System.DateTime)">
            <summary>
            Returns a string that presents the hour and the minute of the given <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToISO8601String(System.DateTime)">
            <summary>
            Returns a string that represents the specified <paramref name="dt"/> using the ISO8601 format
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToShortDateTimeString(System.DateTime)">
            <summary>
            Returns a string that represents the specified <paramref name="dt"/> using a short date and time format
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToShortDateString(System.DateTime)">
            <summary>
            Returns a string that represents the specified <paramref name="dt"/> using a short date format
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.GetFullMonthName(System.DateTime)">
            <summary>
            Gets the full name of the month of the given date time
            </summary>
            <param name="dt">The given date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.GetShortDayName(System.DateTime)">
            <summary>
            Gets the day name acronym of the specified <paramref name="date"/>
            </summary>
            <param name="date">The date whose day acronym we want to get</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.GetShortMonthName(System.DateTime)">
            <summary>
            Gets the short name of the month of the specified <paramref name="date"/>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToString(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Returns a string based on the output format of a nullable date time offset
            </summary>
            <param name="dto">The nullable date time offset</param>
            <param name="format">The output format</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToTime(System.DateTimeOffset)">
            <summary>
            Returns a string that presents the hour and the minute of the given <paramref name="dto"/>
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.GetFullMonthName(System.DateTimeOffset)">
            <summary>
            Gets the full name of the month of the given date time
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToISO8601String(System.DateTimeOffset)">
            <summary>
            Returns a string that represents the specified <paramref name="dto"/> using the ISO8601 format
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToShortDateTimeString(System.DateTimeOffset)">
            <summary>
            Returns a string that represents the specified <paramref name="dto"/> using a short date and time format
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToShortDateString(System.DateTimeOffset)">
            <summary>
            Returns a string that represents the specified <paramref name="dto"/> using a short date format
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToLocalDateTimeFromKnowTimeZone(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            Gets the local date time based on the specified <paramref name="timeZone"/> of the specified
            <paramref name="dto"/>
            </summary>
            <param name="dto">The date time offset</param>
            <param name="timeZone">The time zone</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToStartOfTheDay(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> with the same year,month and day
            as the specified <paramref name="dt"/> but with the time value set to 0
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToEndOfTheDay(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> with the same year, month and day
            as the specified <paramref name="dt"/> but with the time value set to their maximum value
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToStartOfTheWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> based on the specified <paramref name="dt"/>
            that represents the start of the week of the <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <param name="startOfWeek">The day of week that should be considered as the start of the week</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToEndOfTheWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> based on the specified <paramref name="dt"/>
            that represents the end of the week of the <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <param name="startOfWeek">The day of week that should be considered as the start of the week</param>
            <remarks>
            The time component is set to 23:59:59
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToStartOfTheMonth(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> based on the specified <paramref name="dt"/>
            that represents the start of the month of the <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToEndOfTheMonth(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> based on the specified <paramref name="dt"/>
            that represents the end of the month of the <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <remarks>
            The time component is set to 23:59:59
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToStartOfTheYear(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> based on the specified <paramref name="dt"/>
            that represents the start of the year of the <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToEndOfTheYear(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> based on the specified <paramref name="dt"/>
            that represents the end of the year of the <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <remarks>
            The time component is set to 23:59:59
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToStartOfTheDecade(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> based on the specified <paramref name="dt"/>
            that represents the start of the decade of the <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ToEndOfTheDecade(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> based on the specified <paramref name="dt"/>
            that represents the end of the decade of the <paramref name="dt"/>
            </summary>
            <param name="dt">The date time</param>
            <remarks>
            The time component is set to 23:59:59
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days the month of a specific date time has
            </summary>
            <param name="datetime">The specific date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.MonthDifference(System.DateTime,System.DateTime)">
            <summary>
            Gets the difference in months of the two specified date time values
            </summary>
            <param name="dt1">The first date time value</param>
            <param name="dt2">The second date time value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ChangeKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Changes the kind value of a date time value
            </summary>
            <param name="dateTime">The date time</param>
            <param name="kind">The kind</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ChangeYear(System.DateTime,System.Int32)">
            <summary>
            Changes the year value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new year value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ChangeMonth(System.DateTime,System.Int32)">
            <summary>
            Changes the month value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new month value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ChangeDay(System.DateTime,System.Int32)">
            <summary>
            Changes the day value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new day value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ChangeHour(System.DateTime,System.Int32)">
            <summary>
            Changes the hour value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new hour value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ChangeMinute(System.DateTime,System.Int32)">
            <summary>
            Changes the minute value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new minute value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeExtensions.ChangeSecond(System.DateTime,System.Int32)">
            <summary>
            Changes the second value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DateTimeHelpers">
            <summary>
            Helper methods for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:Atom.DateTimeHelpers.CalculateAge(System.DateTime)">
            <summary>
            Calculates the age given the specified <paramref name="birthdayDate"/>
            </summary>
            <param name="birthdayDate">The birthday date</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeHelpers.CalculateTimeRangesPerDay(System.DateTime,System.DateTime)">
            <summary>
            Calculates the time ranges per day between the specified <paramref name="start"/> and
            the specified <paramref name="end"/>
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeHelpers.CalculateAge(System.DateOnly)">
            <summary>
            Calculates the age given the specified <paramref name="birthdayDate"/>
            </summary>
            <param name="birthdayDate">The birthday date</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeHelpers.FromUnixTimeMilliseconds(System.Int64)">
            <summary>
            Creates and returns a <see cref="T:System.DateTime"/> from the specified Unix timestamp milliseconds
            </summary>
            <param name="milliseconds">The milliseconds that represent a Unix timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeHelpers.FromUnixTimeSeconds(System.Int64)">
            <summary>
            Creates and returns a <see cref="T:System.DateTime"/> from the specified Unix timestamp seconds
            </summary>
            <param name="milliseconds">The seconds that represent a Unix timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeHelpers.GetDaysBetween(System.DateTime,System.DateTime)">
            <summary>
            Gets all the dates that represents days between the specified <paramref name="startDate"/> and the specified
            <paramref name="endDate"/>
            </summary>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeHelpers.GetMonthsBetween(System.DateTime,System.DateTime)">
            <summary>
            Gets all the dates that represent months between the specified <paramref name="startDate"/> and the specified
            <paramref name="endDate"/>
            </summary>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DateTimeHelpers.GetYearsBetween(System.DateTime,System.DateTime)">
            <summary>
            Gets all the dates that represent years between the specified <paramref name="startDate"/> and the specified
            <paramref name="endDate"/>
            </summary>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DecimalExtensions">
            <summary>
            Extension methods for <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:Atom.DecimalExtensions.ToString(System.Decimal,System.Char)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="d"/>
            using the <paramref name="separator"/> as the decimals separator
            </summary>
            <param name="d">The decimal</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DecimalExtensions.Round(System.Decimal,System.Int32)">
            <summary>
            Rounds the specified <paramref name="d"/> to the specified <paramref name="decimals"/> places
            </summary>
            <param name="d">The decimal</param>
            <param name="decimals">The decimal places</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DecimalHelpers">
            <summary>
            Helper methods related to <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:Atom.DecimalHelpers.CalculateCombinations(System.Decimal,System.Collections.Generic.IEnumerable{System.Decimal},System.Int32,System.Decimal)">
            <summary>
            Calculates the possible value combinations for <paramref name="target"/>, using the <paramref name="values"/>
            </summary>
            <param name="target">The target value</param>
            <param name="values">The values</param>
            <param name="numberOfUniqueBanknotes">The number of unique values that will make up the target</param>
            <param name="minimumBanknote">The minimum value that will make up the target</param>
        </member>
        <member name="M:Atom.DecimalHelpers.DecimalCompare(System.Nullable{System.Decimal},Atom.NumericEqualityOperator,System.Nullable{System.Decimal})">
            <summary>
            Compares the <paramref name="value"/> against the <paramref name="d"/> using the specified <paramref name="numericEqualityOperator"/>.
            Ex.: Operator = <see cref="F:Atom.NumericEqualityOperator.LessOrEqualThan"/> -> <paramref name="d"/> LessThanOrEqual <paramref name="value"/>.
            </summary>
            <param name="numericEqualityOperator">The operator</param>
            <param name="d">The decimal value</param>
            <param name="value">The decimal value that will be used by the filter</param>
            <returns></returns>
        </member>
        <member name="T:Atom.FixedValue">
            <summary>
            Represents a value that is composed by another <see cref="P:Atom.FixedValue.Value"/> multiplied by <see cref="P:Atom.FixedValue.NumberOfValues"/> times
            </summary>
        </member>
        <member name="P:Atom.FixedValue.NumberOfValues">
            <summary>
            The number of used values
            </summary>
        </member>
        <member name="P:Atom.FixedValue.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Atom.FixedValue.Total">
            <summary>
            The total
            </summary>
        </member>
        <member name="M:Atom.FixedValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.FixedValue.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.FixedValuesCombination">
            <summary>
            Represents a combination of <see cref="T:Atom.FixedValue"/>s
            </summary>
        </member>
        <member name="F:Atom.FixedValuesCombination.mFixedValues">
            <summary>
            The member of the <see cref="P:Atom.FixedValuesCombination.FixedValues"/> property
            </summary>
        </member>
        <member name="P:Atom.FixedValuesCombination.FixedValues">
            <summary>
            The fixed values
            </summary>
        </member>
        <member name="P:Atom.FixedValuesCombination.Total">
            <summary>
            The total values
            </summary>
        </member>
        <member name="M:Atom.FixedValuesCombination.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.FixedValuesCombination.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.FixedValuesCombination.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.FixedValuesCombination.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Atom.DictionaryExtensions">
            <summary>
            Extension methods associated with <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="M:Atom.DictionaryExtensions.GetKeyFromValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``1)">
            <summary>
            Gets the key linked with the specified <paramref name="value"/>
            </summary>
            <typeparam name="TKey">The type of the keys</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="value">The value contained in the dictionary</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DictionaryExtensions.GetKeyFromValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``1,``0)">
            <summary>
            Gets the key linked with the specified <paramref name="value"/> if found,
            otherwise returns the <paramref name="fallbackKey"/>
            </summary>
            <typeparam name="TKey">The type of the keys</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="value">The value contained in the dictionary</param>
            <param name="fallbackKey">The fallback key</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DictionaryExtensions.GetKeyFromValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Nullable{``1},System.Nullable{``0})">
            <summary>
            Gets the key linked with the specified <paramref name="value"/> if found,
            otherwise returns the <paramref name="fallbackKey"/>
            </summary>
            <typeparam name="TKey">The type of the keys</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="value">The value contained in the dictionary</param>
            <param name="fallbackKey">The fallback key</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DictionaryExtensions.IndexOfValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``1)">
            <summary>
            Gets the index of the specified <paramref name="value"/>
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DictionaryExtensions.IndexOfKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Gets the index of the specified <paramref name="key"/>
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DirectoryHelpers">
            <summary>
            Helper methods related to directories
            </summary>
        </member>
        <member name="F:Atom.DirectoryHelpers.ExplorerProcessName">
            <summary>
            The explorer process name
            </summary>
        </member>
        <member name="M:Atom.DirectoryHelpers.OpenDirectory(System.String)">
            <summary>
            Opens the directory with the specified <paramref name="directoryPath"/>
            </summary>
            <param name="directoryPath">The directory path</param>
        </member>
        <member name="M:Atom.DirectoryHelpers.CopyDirectory(System.String,System.String)">
            <summary>
            Copies the directory and its content including sub directories
            </summary>
            <param name="source">The source directory path</param>
            <param name="destination">The destination directory path</param>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="T:Atom.DI">
            <summary>
            The default application services that should be available everywhere in the application
            </summary>
        </member>
        <member name="F:Atom.DI.mLocalization">
            <summary>
            The member of the <see cref="P:Atom.DI.Localization"/> property
            </summary>
        </member>
        <member name="P:Atom.DI.Localization">
            <summary>
            The localization resources
            </summary>
        </member>
        <member name="M:Atom.DI.TryGetService``1(``0@)">
            <summary>
            Attempts to get the requested service from the service provider
            </summary>
            <typeparam name="TService">The type of the service</typeparam>
            <param name="service">The service</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DI.GetRequiredService``1">
            <summary>
            Gets the requested service from the service provider
            </summary>
            <typeparam name="TService">The type of the service</typeparam>
            <returns></returns>
        </member>
        <member name="M:Atom.DI.GetServices``1">
            <summary>
            Get an enumeration of services of type <typeparamref name="TService"/> from the service provider.
            </summary>
            <typeparam name="TService">The type of the service</typeparam>
            <returns></returns>
        </member>
        <member name="M:Atom.DI.TryGetService(System.Type,System.Object@)">
            <summary>
            Attempts to get the requested service from the service provider
            </summary>
            <param name="serviceType">The type of the service</param>
            <param name="service">The service</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DI.GetRequiredService(System.Type)">
            <summary>
            Gets the requested service of the specified <paramref name="serviceType"/> from the service provider
            </summary>
            <param name="serviceType">The type of the service</param>
            <returns></returns>
        </member>
        <member name="P:Atom.DI.SynchronizationContext">
            <summary>
            The synchronization context that is used for queuing work in the main thread
            </summary>
        </member>
        <member name="P:Atom.DI.FrameworkEnvironment">
            <summary>
            The framework environment
            </summary>
        </member>
        <member name="P:Atom.DI.TaskManager">
            <summary>
            The task manager
            </summary>
        </member>
        <member name="P:Atom.DI.FileManager">
            <summary>
            The file manager
            </summary>
        </member>
        <member name="P:Atom.DI.ApplicationEnvironment">
            <summary>
            The application environment
            </summary>
        </member>
        <member name="P:Atom.DI.Mapper">
            <summary>
            The mapper
            </summary>
        </member>
        <member name="P:Atom.DI.ReflectionCacher">
            <summary>
            The reflection cacher
            </summary>
        </member>
        <member name="P:Atom.DI.MetaDataCacher">
            <summary>
            The meta data cacher
            </summary>
        </member>
        <member name="P:Atom.DI.DynamicTypesManager">
            <summary>
            The dynamic types manager
            </summary>
        </member>
        <member name="P:Atom.DI.HealthChecksManager">
            <summary>
            The health checks manager
            </summary>
        </member>
        <member name="T:Atom.DIHelpers">
            <summary>
            Helper methods related to the DI
            </summary>
        </member>
        <member name="M:Atom.DIHelpers.LoadFromFile``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Searches the assembly with the specified <paramref name="assemblyFileName"/> for a service of type <typeparamref name="TKey"/>
            and if found one, it instantiates it using the default parameterless constructor and sets it at the specified <paramref name="diProperty"/>
            </summary>
            <typeparam name="TKey">The type of the DI service</typeparam>
            <param name="diProperty">The DI property</param>
            <param name="assemblyFileName">The assembly file name</param>
        </member>
        <member name="M:Atom.DIHelpers.LoadFromFile(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Searches the assembly with the specified <paramref name="assemblyFileName"/> for a service of the type of the <paramref name="diProperty"/>
            and if found one, it instantiates it using the default parameterless constructor and sets it at the specified <paramref name="diProperty"/>
            </summary>
            <param name="diProperty">The DI property</param>
            <param name="assemblyFileName">The assembly file name</param>
        </member>
        <member name="T:Atom.DoubleExtensions">
            <summary>
            Extension methods for <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:Atom.DoubleExtensions.IsNaN(System.Double)">
            <summary>
            Checks if the specified <paramref name="d"/> is not a number and returns true if it is and false if it isn't
            </summary>
            <param name="d">The double value to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DoubleExtensions.ToString(System.Double,System.Char)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="d"/>
            using the <paramref name="separator"/> as the decimals separator
            </summary>
            <param name="d">The double</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="T:Atom.EnumHelpers">
            <summary>
            Helper methods for <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="M:Atom.EnumHelpers.GetEnumValues``1">
            <summary>
            Gets the values of an enum of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the enum</typeparam>
            <returns></returns>
        </member>
        <member name="M:Atom.EnumHelpers.ToEnum``1(System.String)">
            <summary>
            Returns the <typeparamref name="T"/> that represents the specified <paramref name="name"/>
            </summary>
            <typeparam name="T">The type of the enum</typeparam>
            <param name="name">The name of the enum value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DelegateEqualityComparer`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that uses delegates to establish the equality rules
            </summary>
            <typeparam name="T">The type of the items</typeparam>
        </member>
        <member name="F:Atom.DelegateEqualityComparer`1.mComparer">
            <summary>
            The comparer
            </summary>
        </member>
        <member name="F:Atom.DelegateEqualityComparer`1.mHashCodeGenerator">
            <summary>
            The hash code generator
            </summary>
        </member>
        <member name="M:Atom.DelegateEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Default constructor
            </summary>
            <param name="comparer">The comparer</param>
            <param name="hashCodeGenerator">The hash code generator</param>
        </member>
        <member name="M:Atom.DelegateEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.DelegateEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Atom.ListEqualityComparer`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used for comparing lists.
            </summary>
            <typeparam name="T">The type of the items of the list</typeparam>
        </member>
        <member name="F:Atom.ListEqualityComparer`1.mItemEqualityComparer">
            <summary>
            The comparer used for comparing the items of the lists
            </summary>
        </member>
        <member name="F:Atom.ListEqualityComparer`1.Default">
            <summary>
            A single instance of the comparer standardly configured
            </summary>
        </member>
        <member name="M:Atom.ListEqualityComparer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ListEqualityComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Comparer based constructor
            </summary>
            <param name="itemEqualityComparer">The comparer used for comparing the items of the lists</param>
        </member>
        <member name="M:Atom.ListEqualityComparer`1.Equals(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ListEqualityComparer`1.GetHashCode(System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ReferenceEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.EqualityComparer`1"/> that provides references based comparison between two objects
            </summary>
        </member>
        <member name="P:Atom.ReferenceEqualityComparer.Instance">
            <summary>
            The single instance of the <see cref="T:Atom.ReferenceEqualityComparer"/>
            </summary>
        </member>
        <member name="M:Atom.ReferenceEqualityComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ReferenceEqualityComparer.GetHashCode(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ReferenceEqualityComparer`1">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that uses referenced based equality comparison
            </summary>
            <typeparam name="T">The type of the items</typeparam>
        </member>
        <member name="M:Atom.ReferenceEqualityComparer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ExceptionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Exception"/>
            </summary>
        </member>
        <member name="M:Atom.ExceptionExtensions.AggregateExceptionMessages(System.Exception)">
            <summary>
            Aggregates the <see cref="P:System.Exception.Message"/> in the <paramref name="exception"/> exception stack trace
            </summary>
            <param name="exception">The exception</param>
            <returns></returns>
        </member>
        <member name="T:Atom.AggregationExpressionBuilder">
            <summary>
            Provides methods for generating an aggregation expression
            </summary>
        </member>
        <member name="F:Atom.AggregationExpressionBuilder.mPropertyMapOverrides">
            <summary>
            The property map overrides
            </summary>
        </member>
        <member name="F:Atom.AggregationExpressionBuilder.mSourceTypes">
            <summary>
            The member of the 
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.ShouldCreateConversionExpressionsWhenPossible">
            <summary>
            A flag indicating whether convert <see cref="T:System.Linq.Expressions.UnaryExpression"/>s
            should be created when possible, for mapping properties with different
            property types
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.ResultType">
            <summary>
            The result type
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.SourceTypes">
            <summary>
            The source type
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.AggregationExpression">
            <summary>
            The aggregation expression that is generated
            </summary>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.#ctor(System.Type,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="resultType">The type of the result</param>
            <param name="shouldCreateConversionExpressionsWhenPossible">
            A flag indicating whether convert <see cref="T:System.Linq.Expressions.UnaryExpression"/>s
            should be created when possible, for mapping properties with different
            property types
            </param>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.AddSourceType(System.Type)">
            <summary>
            Adds a source type
            </summary>
            <param name="sourceType">The source type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.AddPropertyMapOverride(Atom.AggregationExpressionBuilder.PropertyMapOverride)">
            <summary>
            Adds a property map override
            </summary>
            <param name="propertyMapOverride">The property map override</param>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.NormalizePropertyName(Atom.AggregationExpressionBuilder.PropertyNameNormalizationContext)">
            <summary>
            Normalizes the name of a property
            </summary>
            <param name="context">The context</param>
            <returns></returns>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.PrioritizeProperty(Atom.AggregationExpressionBuilder.PropertyPrioritizationContext)">
            <summary>
            Gets the priority of the property when having to choose between properties with the same normalized name
            </summary>
            <param name="context">The context</param>
            <returns></returns>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.PropertyNameNormalizationContext.SourceType">
            <summary>
            The source type
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.PropertyNameNormalizationContext.SourceTypeProperty">
            <summary>
            The property of the source type
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.PropertyNameNormalizationContext.ResultType">
            <summary>
            The result type
            </summary>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.PropertyNameNormalizationContext.#ctor(System.Type,System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Default constructor
            </summary>
            <param name="sourceType">The source type</param>
            <param name="property">The property of the source type</param>
            <param name="resultType">The result type</param>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.PropertyPrioritizationContext.NormalizedPropertyName">
            <summary>
            The normalized property name
            </summary>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.PropertyPrioritizationContext.#ctor(System.Type,System.Reflection.PropertyInfo,System.Type,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="sourceType">The source type</param>
            <param name="property">The property of the source type</param>
            <param name="resultType">The result type</param>
            <param name="normalizedPropertyName">The normalized property name</param>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.PropertyMapOverride.ResultTypePropertySelector">
            <summary>
            The result type property selector
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.PropertyMapOverride.ResultTypeProperty">
            <summary>
            The selected property from the result type
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.PropertyMapOverride.ValueSelector">
            <summary>
            The value selector
            </summary>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.PropertyMapOverride.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.SourceTypePropertyInfo.Type">
            <summary>
            The type that contains the <see cref="P:Atom.AggregationExpressionBuilder.SourceTypePropertyInfo.Property"/>
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.SourceTypePropertyInfo.Property">
            <summary>
            The property
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.SourceTypePropertyInfo.NormalizedName">
            <summary>
            The normalized name of the property
            </summary>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder.SourceTypePropertyInfo.Priority">
            <summary>
            The priority that is used when mapping properties from different source types 
            but with the same name
            </summary>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder.SourceTypePropertyInfo.#ctor(System.Type,System.Reflection.PropertyInfo,System.String,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="type">The type that contains the <see cref="P:Atom.AggregationExpressionBuilder.SourceTypePropertyInfo.Property"/></param>
            <param name="property">The property</param>
            <param name="normalizedName">The normalized name of the property</param>
            <param name="priority">
            The priority that is used when mapping properties from different source types 
            but with the same name
            </param>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder`2.AggregationExpression">
            <summary>
            The expression that is generated
            </summary>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder`2.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="shouldCreateConversionExpressionsWhenPossible">
            A flag indicating whether convert <see cref="T:System.Linq.Expressions.UnaryExpression"/>s
            should be created when possible, for mapping properties with different
            property types
            </param>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder`2.SetPropertyMapOverride``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets a property map override
            </summary>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="resultPropertySelector">Selects a property from the result type</param>
            <param name="valueSelector">Uses the source to select a value to be set to the selected property</param>
            <returns></returns>
        </member>
        <member name="P:Atom.AggregationExpressionBuilder`3.AggregationExpression">
            <summary>
            The expression that is generated
            </summary>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder`3.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="shouldCreateConversionExpressionsWhenPossible">
            A flag indicating whether convert <see cref="T:System.Linq.Expressions.UnaryExpression"/>s
            should be created when possible, for mapping properties with different
            property types
            </param>
        </member>
        <member name="M:Atom.AggregationExpressionBuilder`3.SetPropertyMapOverride``1(System.Linq.Expressions.Expression{System.Func{`2,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Sets a property map override
            </summary>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="resultPropertySelector">Selects a property from the result type</param>
            <param name="valueSelector">Uses the source to select a value to be set to the selected property</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ExpressionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.Expressions.Expression"/>s
            </summary>
        </member>
        <member name="F:Atom.ExpressionExtensions.ExpressionDebugViewProperty">
            <summary>
            The internal DebugView property of the <see cref="T:System.Linq.Expressions.Expression"/> that is used for providing a string representation
            of the <see cref="T:System.Linq.Expressions.Expression"/> that can be used for debugging
            </summary>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Compiles an expression and gets the functions return value.
            NOTE: This method can be used to retrieve a value from a class member as well!
            </summary>
            <typeparam name="T">The type of return value</typeparam>
            <param name="lambda">The expression to compile</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
            Compiles an expression and gets the functions return value.
            NOTE: This method can be used to retrieve a value from a class member as well!
            </summary>
            <typeparam name="In">The type that is inserted to the function</typeparam>
            <typeparam name="T">The type of return value</typeparam>
            <param name="lambda">The expression to compile</param>
            <param name="input">The input parameter</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Sets the underlying properties value to the given value
            from an expression that contains the property
            </summary>
            <typeparam name="T">The type of value to set</typeparam>
            <param name="lambda">The expression</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Atom.ExpressionExtensions.SetPropertyValue``2(System.Linq.Expressions.Expression{System.Func{``1}},``0,``1)">
            <summary>
            Sets the underlying properties value to the given value
            from an expression that contains the property
            </summary>
            <typeparam name="In">The type that is inserted to the function</typeparam>
            <typeparam name="T">The type of value to set</typeparam>
            <param name="lambda">The expression</param>
            <param name="input">The input parameter</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Atom.ExpressionExtensions.SetMemberValue``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Sets the underlying members value to the given value
            from an expression that contains the property
            </summary>
            <typeparam name="T">The type of value to set</typeparam>
            <param name="lambda">The expression</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Used for analyzing an expression like x => x.Property and returning the
            <see cref="T:System.Reflection.PropertyInfo"/> of the accessed property.
            </summary>
            <typeparam name="TSource">The type of the container of the property</typeparam>
            <typeparam name="TProperty">The type of the target property</typeparam>
            <param name="propertyExpression">The expression targeting the property</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Used for analyzing an expression like () => SomeInstance.Property and returning the
            <see cref="T:System.Reflection.PropertyInfo"/> of the accessed property.
            </summary>
            <typeparam name="TProperty">The type of the target property</typeparam>
            <param name="propertyExpression">The expression targeting the property</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetPropertyInfos``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Used for analyzing an expression like x => x.Property1.Property2...PropertyN and returning
            the <see cref="T:System.Reflection.PropertyInfo"/>s.
            Ex.: input: x => x.Property1.Property2.Property3
                 output: [Property1, Property2, Property3...PropertyN]
            </summary>
            <typeparam name="TSource">The type of the container of the property</typeparam>
            <typeparam name="TProperty">The type of the last targeted property of the chain</typeparam>
            <param name="propertyExpression">The expression targeting the property</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetPropertyInfos``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Used for analyzing an expression like x => x.Property1.Property2.Property3...PropertyN and returning
            the <see cref="T:System.Reflection.PropertyInfo"/>s.
            Ex.: input: x => x.Property1.Property2.Property3
                 output: [Property1, Property2, Property3...PropertyN]
            </summary>
            <typeparam name="TProperty">The type of the last targeted property of the chain</typeparam>
            <param name="propertyExpression">The expression targeting the property</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetPropertyInfos(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Used for analyzing an expression like x => x.Property1.Property2.Property3...PropertyN and returning
            the <see cref="T:System.Reflection.PropertyInfo"/>s
            Ex.: input: x => x.Property1.Property2.Property3
                 output: [Property1, Property2, Property3...PropertyN]
            </summary>
            <param name="propertyExpression">The expression targeting the property</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetPropertyInfos(System.Linq.Expressions.MemberExpression)">
            <summary>
            Used for analyzing an expression like x.Property1.Property2.Property3...PropertyN and returning
            the <see cref="T:System.Reflection.PropertyInfo"/>s
            Ex.: input: x => x.Property1.Property2.Property3
                 output: [Property1, Property2, Property3...PropertyN]
                 
                 input: x => x.Property1.First().Property2.First()...PropertyN
                 output: [Property1, Property2, Property3...PropertyN]
            </summary>
            <param name="memberExpression">The member expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.ToExpression``2(System.Func{``0,``1})">
            <summary>
            Converts the given <paramref name="method"/> to an expression
            </summary>
            <typeparam name="T">The type of the input parameter of the method</typeparam>
            <typeparam name="TResult">The type of the result of the method</typeparam>
            <param name="method">The method to convert to an expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.ToFunc``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Extracts the method from the given <paramref name="expression"/>
            </summary>
            <typeparam name="T">The type of the input parameter of the method</typeparam>
            <typeparam name="TResult">The type of the result of the method</typeparam>
            <param name="expression">The expression to extract the method from</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetParameterExpressionType(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the type from the specified <paramref name="expression"/>.
            The type of (x) is the type of the parameter expression that is the root of the member expression.
            Ex.: x.y.z -> type of (x) is returned.
            </summary>
            <param name="expression">The expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetParameterExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the parameter expression from the specified <paramref name="expression"/>.
            The parameter expression that is the root of the member expression.
            Ex.: x.y.z -> (x) is returned.
            </summary>
            <param name="expression">The expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.ToCodeString(System.Linq.Expressions.Expression)">
            <summary>
            Returns the expression as it was typed in the code in a string form
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.NormalizeBooleanValues(System.String)">
            <summary>
            Normalizes the boolean values that are places in the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.NormalizeEnumValues(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Normalizes the enum values of the specified <paramref name="expression"/>
            </summary>
            <param name="value">The value</param>
            <param name="expression">The expression</param>
            <returns></returns>
        </member>
        <member name="F:Atom.ExpressionExtensions.EqualityOperators">
            <summary>
            The equality operators
            </summary>
        </member>
        <member name="M:Atom.ExpressionExtensions.RemoveEqualityOperatorRelatedParenthesis(System.String)">
            <summary>
            Removes the parenthesis that are set and are related to equality operators from the specified <paramref name="value"/>
            </summary>
        </member>
        <member name="M:Atom.ExpressionExtensions.ReplaceExpressionOperators(System.String)">
            <summary>
            Replaces the expression operators that are contained in the specified <paramref name="value"/> with the
            code like operators
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetExpressionOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns the string representation of the specified <paramref name="expressionType"/>
            </summary>
            <param name="expressionType">The expression type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.ReplaceExpresionConvert(System.String)">
            <summary>
            Replaces the Convert part of an expression string representation if it exists in the <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="F:Atom.ExpressionExtensions.mValueExpressionRegex">
            <summary>
            The expression used for removing the value expression
            </summary>
        </member>
        <member name="M:Atom.ExpressionExtensions.ReplaceExpresionValue(System.String)">
            <summary>
            Replaces the value part of an expression string representation if it exists in the <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.ReplaceExpressionNot(System.String)">
            <summary>
            Replaces the Not part of an expression string representation if it exists in the <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionExtensions.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.MemberExpression"/> from the specified <paramref name="expression"/>
            </summary>
            <param name="expression">The expression</param>
            <returns></returns>
        </member>
        <member name="P:Atom.ExpressionExtensions.EnumValueReplacerExpressionVisitor.ExpressionString">
            <summary>
            The expression string
            </summary>
        </member>
        <member name="M:Atom.ExpressionExtensions.EnumValueReplacerExpressionVisitor.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="expressionString">The expression string</param>
        </member>
        <member name="M:Atom.ExpressionExtensions.EnumValueReplacerExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ExpressionHelpers">
            <summary>
            Helper methods related to <see cref="T:System.Linq.Expressions.Expression"/>s
            </summary>
        </member>
        <member name="F:Atom.ExpressionHelpers.mCache">
            <summary>
            The maps for the response models
            </summary>
        </member>
        <member name="M:Atom.ExpressionHelpers.CreatePropertySelectorExpression(System.Type,System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass,TProperty&gt;&gt;"/>.
            NOTE: The compile time expression would look like: "i => i.Prop"!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property info</param>
            <param name="returnType">The return type of the expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionHelpers.CreatePropertySelectorExpression(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass,TProperty&gt;&gt;"/>.
            NOTE: The compile time expression would look like: "i => i.Prop"!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionHelpers.CreatePropertySelectorExpression(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass,TProperty&gt;&gt;"/>.
            NOTE: The compile time expression would look like: "i => i.Prop1.Prop2"!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfos"/></param>
            <param name="propertyInfos">The property infos</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionHelpers.CreatePropertySelectorExpression(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Type)">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass,TProperty&gt;&gt;"/>.
            NOTE: The compile time expression would look like: "i => i.Prop1.Prop2"!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfos"/></param>
            <param name="propertyInfos">The property infos</param>
            <param name="returnType">The return type of the expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionHelpers.CreatePropertyContainsExpression(System.Type,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass, bool&gt;&gt;"/>.
            NOTE: The compile time expression would look like: "x => x.Prop.Contains(value)"!
            NOTE: The property type must be a <see cref="T:System.String"/>!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value used by the <see cref="M:System.String.Contains(System.String)"/> method</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionHelpers.CreatePropertyEqualityExpression(System.Type,System.Reflection.PropertyInfo,System.Object,Atom.NumericEqualityOperator)">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass, bool&gt;&gt;"/>.
            NOTE: One of the compile time expressions would look like: x => x.Prop >= value!
            NOTE: The <paramref name="value"/> must be of the same type as the type of the <paramref name="propertyInfo"/>!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value that will be compared against the property</param>
            <param name="equalityOperator">The equality operator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionHelpers.TryCreatePropertyExpression``1(System.String,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}@)">
            <summary>
            Tries to create a property expression using a property from the specified <typeparamref name="T"/> with the specified <paramref name="propertyName"/>
            </summary>
            <typeparam name="T">The type of the model</typeparam>
            <param name="propertyName">The property name</param>
            <param name="predicate">Predicate function that is used for filtering the properties of the <typeparamref name="T"/></param>
            <param name="result">The result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionHelpers.GetAggregatedPropertyNames(System.Linq.Expressions.MemberExpression)">
            <summary>
            Returns all the property names that are used in the specified <paramref name="memberExpression"/>, aggregated by .(period).
            NOTE: The expression points to the most nested property. For example, an expression like x => x.Parent.Source.Username.Length starts from the Length property 
            and ends to Parent property
            </summary>
            <param name="memberExpression">The member expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionHelpers.NormalizeString(System.String)">
            <summary>
            Normalizes the specified <paramref name="s"/>
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ExpressionHelpers.ModelCache">
            <summary>
            The map for the model and the properties that it contains and can be used for ordering
            </summary>
        </member>
        <member name="P:Atom.ExpressionHelpers.ModelCache.Type">
            <summary>
            The type of the model
            </summary>
        </member>
        <member name="P:Atom.ExpressionHelpers.ModelCache.SortingProperties">
            <summary>
            Maps properties of the <see cref="P:Atom.ExpressionHelpers.ModelCache.Type"/> to their normalized name that can be used for sorting
            </summary>
        </member>
        <member name="P:Atom.ExpressionHelpers.ModelCache.PropertyToExpressionCache">
            <summary>
            Used for caching a sorting expression that has already been created for a property
            </summary>
        </member>
        <member name="M:Atom.ExpressionHelpers.ModelCache.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Default constructor
            </summary>
            <param name="responseModel">The type of the model</param>
            <param name="orderingProperties">The properties of the response model that can be used for ordering</param>
        </member>
        <member name="M:Atom.ExpressionHelpers.ModelCache.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ConstantExpressionValueExtractorExpressionVisitor">
            <summary>
            An implementation of the <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> that is used for extracting the value of the first
            <see cref="T:System.Linq.Expressions.ConstantExpression"/> that finds
            </summary>
        </member>
        <member name="F:Atom.ConstantExpressionValueExtractorExpressionVisitor.mValueFound">
            <summary>
            A flag indicating whether a value was found or not
            </summary>
        </member>
        <member name="F:Atom.ConstantExpressionValueExtractorExpressionVisitor.mValue">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.ConstantExpressionValueExtractorExpressionVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ConstantExpressionValueExtractorExpressionVisitor.TryExtractConstantValue(System.Linq.Expressions.Expression,System.Object@)">
            <summary>
            Attempts to extract the value of the first <see cref="T:System.Linq.Expressions.ConstantExpression"/> discovered in the specified <paramref name="expression"/>.
            Actual values of closures are also extracted, meaning that in the case of the following expression 'x => values.Contains(x.Name)' the actual
            value of the 'values' field is extracted.
            </summary>
            <param name="expression">The expression</param>
            <param name="result">The result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ConstantExpressionValueExtractorExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ConstantExpressionValueExtractorExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ExpressionInverterExpressionVisitor">
            <summary>
            An implementation of the <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> that is used for inverting an expression
            </summary>
        </member>
        <member name="M:Atom.ExpressionInverterExpressionVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ExpressionInverterExpressionVisitor.Invert(System.Linq.Expressions.Expression)">
            <summary>
            Inverts the conditions logic of the specified <paramref name="expression"/>
            </summary>
            <param name="expression">The expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ExpressionInverterExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ExpressionInverterExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ExpressionInverterExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.MemberAccessFirstPartRemoverExpressionVisitor">
            <summary>
            An implementation of an <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> used for removing the first part of a <see cref="T:System.Linq.Expressions.MemberExpression"/>
            </summary>
        </member>
        <member name="F:Atom.MemberAccessFirstPartRemoverExpressionVisitor.mInstance">
            <summary>
            The member of the <see cref="P:Atom.MemberAccessFirstPartRemoverExpressionVisitor.Instance"/> property
            </summary>
        </member>
        <member name="P:Atom.MemberAccessFirstPartRemoverExpressionVisitor.Instance">
            <summary>
            The single instance of the <see cref="T:Atom.MemberAccessFirstPartRemoverExpressionVisitor"/>
            </summary>
        </member>
        <member name="M:Atom.MemberAccessFirstPartRemoverExpressionVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.MemberAccessFirstPartRemoverExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.MemberExpressionReplacerExpressionVisitor">
            <summary>
            An implementation of an <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> used for replacing <see cref="T:System.Linq.Expressions.MemberExpression"/>s
            </summary>
        </member>
        <member name="F:Atom.MemberExpressionReplacerExpressionVisitor.mMemberExpression">
            <summary>
            The member expression that should replace existing member expressions
            </summary>
        </member>
        <member name="M:Atom.MemberExpressionReplacerExpressionVisitor.#ctor(System.Linq.Expressions.MemberExpression)">
            <summary>
            Default constructor
            </summary>
            <param name="memberExpression">The member expression</param>
        </member>
        <member name="M:Atom.MemberExpressionReplacerExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.MemberExpressionsExtractorExpressionVisitor">
            <summary>
            An implementation of the <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> that extracts all the <see cref="T:System.Linq.Expressions.MemberExpression"/>s from an expression
            </summary>
        </member>
        <member name="F:Atom.MemberExpressionsExtractorExpressionVisitor.mMemberExpressionsCollection">
            <summary>
            The collection where the member expressions will be stored
            </summary>
        </member>
        <member name="M:Atom.MemberExpressionsExtractorExpressionVisitor.#ctor(System.Collections.Generic.ICollection{System.Linq.Expressions.MemberExpression})">
            <summary>
            Default constructor
            </summary>
            <param name="memberExpressionsCollection">The collection where the member expressions will be stored</param>
        </member>
        <member name="M:Atom.MemberExpressionsExtractorExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.MemberExpressionToConstantExpressionReplacerVisitor">
            <summary>
            Evaluates all the values of the member expressions and converts them to constant expressions
            </summary>
        </member>
        <member name="F:Atom.MemberExpressionToConstantExpressionReplacerVisitor.mInstance">
            <summary>
            The member of the <see cref="P:Atom.MemberExpressionToConstantExpressionReplacerVisitor.Instance"/> property
            </summary>
        </member>
        <member name="P:Atom.MemberExpressionToConstantExpressionReplacerVisitor.Instance">
            <summary>
            The single instance of the <see cref="T:Atom.MemberExpressionToConstantExpressionReplacerVisitor"/>
            </summary>
        </member>
        <member name="M:Atom.MemberExpressionToConstantExpressionReplacerVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.MemberExpressionToConstantExpressionReplacerVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.MethodCallExpressionsExtractorExpressionVisitor">
            <summary>
            An implementation of the <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> that extracts all the <see cref="T:System.Linq.Expressions.MethodCallExpression"/>s from an expression
            </summary>
        </member>
        <member name="F:Atom.MethodCallExpressionsExtractorExpressionVisitor.mMethodCallExpressionsCollection">
            <summary>
            The collection where the method call expressions will be stored
            </summary>
        </member>
        <member name="M:Atom.MethodCallExpressionsExtractorExpressionVisitor.#ctor(System.Collections.Generic.ICollection{System.Linq.Expressions.MethodCallExpression})">
            <summary>
            Default constructor
            </summary>
            <param name="methodCallExpressionsCollection">The collection where the method call expressions will be stored</param>
        </member>
        <member name="M:Atom.MethodCallExpressionsExtractorExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.NonLogicalConiditionBinaryExpressionsExtractorExpressionVisitor">
            <summary>
            An implementation of the <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> that extracts the binary expressions that are not
            based on logical condition.
            Ex.: Input: x => x.Prop1 == true OrElse x.Prop2 == false AndAlso x.Prop3 >= 5
                 Output: [x.Prop1 == true, x.Prop2 == false, x.Prop3 >= 5]
            </summary>
        </member>
        <member name="F:Atom.NonLogicalConiditionBinaryExpressionsExtractorExpressionVisitor.mLogicalConditionExpressionTypes">
            <summary>
            The expression types that are used for identifying a logical conditional filter
            </summary>
        </member>
        <member name="F:Atom.NonLogicalConiditionBinaryExpressionsExtractorExpressionVisitor.mIsVisitCalledFromLambda">
            <summary>
            A flag indicating whether the visit call is originating from
            a visit call initially made on a lambda expression
            </summary>
        </member>
        <member name="F:Atom.NonLogicalConiditionBinaryExpressionsExtractorExpressionVisitor.mExpressionsCollection">
            <summary>
            The collection that contains the expressions
            </summary>
        </member>
        <member name="M:Atom.NonLogicalConiditionBinaryExpressionsExtractorExpressionVisitor.#ctor(System.Collections.Generic.ICollection{System.Linq.Expressions.Expression})">
            <summary>
            Default constructor
            </summary>
            <param name="expressionsCollection">The collection that is used for storing the discovered expressions</param>
        </member>
        <member name="M:Atom.NonLogicalConiditionBinaryExpressionsExtractorExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.NonLogicalConiditionBinaryExpressionsExtractorExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.NonLogicalConiditionBinaryExpressionsExtractorExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ParameterExpressionReplacerExpressionVisitor">
            <summary>
            An implementation of an <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> used for replacing <see cref="T:System.Linq.Expressions.ParameterExpression"/>s
            </summary>
        </member>
        <member name="F:Atom.ParameterExpressionReplacerExpressionVisitor.mFromParameterExpressionType">
            <summary>
            The type that when a parameter expression has, gets related by the <see cref="F:Atom.ParameterExpressionReplacerExpressionVisitor.mToExpression"/>
            </summary>
        </member>
        <member name="F:Atom.ParameterExpressionReplacerExpressionVisitor.mToExpression">
            <summary>
            The expression that is used for replacing parameter expressions that have the specific <see cref="F:Atom.ParameterExpressionReplacerExpressionVisitor.mFromParameterExpressionType"/>
            </summary>
        </member>
        <member name="M:Atom.ParameterExpressionReplacerExpressionVisitor.#ctor(System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Default constructor
            </summary>
            <param name="fromParameterExpressionType">The type that when a parameter expression has, gets related by the <paramref name="toExpression"/></param>
            <param name="toExpression">The expression that is used for replacing parameter expressions that have the specific <paramref name="fromParameterExpressionType"/></param>
        </member>
        <member name="M:Atom.ParameterExpressionReplacerExpressionVisitor.#ctor(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Default constructor
            </summary>
            <param name="parameterExpression">The parameter expression to replace all the existing parameter expressions that have the same type</param>
        </member>
        <member name="M:Atom.ParameterExpressionReplacerExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ParameterExpressionReplacerExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ParameterExpressionReplacerExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.CaptureGeneratedFileTask">
            <summary>
            Represents an operation that is used for capture files that are created
            </summary>
        </member>
        <member name="F:Atom.CaptureGeneratedFileTask.CheckForCompletionThreshold">
            <summary>
            The timespan that determines how often the completion of the operation will occur
            </summary>
        </member>
        <member name="F:Atom.CaptureGeneratedFileTask.mCaptureFileTaskCompletionSource">
            <summary>
            The task completion source that is used for signaling the end of an operation
            </summary>
        </member>
        <member name="P:Atom.CaptureGeneratedFileTask.CaptureFileTask">
            <summary>
            The task that is related to the capture operation
            </summary>
        </member>
        <member name="P:Atom.CaptureGeneratedFileTask.HasCapturedFile">
            <summary>
            A flag indicating whether a file was captured or not
            </summary>
        </member>
        <member name="P:Atom.CaptureGeneratedFileTask.CaptureFilePath">
            <summary>
            The file path of the captured file if any
            </summary>
        </member>
        <member name="P:Atom.CaptureGeneratedFileTask.DirectoryPath">
            <summary>
            The directory path that the file should be generated into
            </summary>
        </member>
        <member name="P:Atom.CaptureGeneratedFileTask.WaitThreshold">
            <summary>
            The maximum threshold that should be waited for a file to be generated
            </summary>
        </member>
        <member name="P:Atom.CaptureGeneratedFileTask.Configure">
            <summary>
            Action that configures the file watcher
            </summary>
        </member>
        <member name="M:Atom.CaptureGeneratedFileTask.#ctor(System.String,System.TimeSpan,System.Action{System.IO.FileSystemWatcher})">
            <summary>
            Default constructor
            </summary>
            <param name="directoryPath">The directory path that the file should be generated into</param>
            <param name="waitThreshold">The maximum threshold that should be waited for a file to be generated</param>
            <param name="configure">Action that configures the file watcher</param>
        </member>
        <member name="M:Atom.CaptureGeneratedFileTask.Restart">
            <summary>
            Restarts the capture operation
            </summary>
        </member>
        <member name="T:Atom.FileConstants">
            <summary>
            Constants related to files
            </summary>
        </member>
        <member name="F:Atom.FileConstants.DLLFileExtension">
            <summary>
            The DLL file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.JPGFileExtension">
            <summary>
            The JPG file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.JPEGFileExtension">
            <summary>
            The JPEG file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.PNGFileExtension">
            <summary>
            The PNG file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.BMPFileExtension">
            <summary>
            The BMP file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.GIFFileExtension">
            <summary>
            The GIF file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.WebPFileExtension">
            <summary>
            The WebP file extension
            </summary>
        </member>
        <member name="F:Atom.FileConstants.SVGFileExtension">
            <summary>
            The SVG file extension
            </summary>
        </member>
        <member name="P:Atom.FileConstants.ImageFileExtensions">
            <summary>
            The image file extensions including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.MP4FileExtension">
            <summary>
            The MP4 file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.MOVFileExtension">
            <summary>
            The MOV file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.WMVFileExtension">
            <summary>
            The WMV file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.AVIFileExtension">
            <summary>
            The AVI file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.MKVFileExtension">
            <summary>
            The MKV file extension including the '.'
            </summary>
        </member>
        <member name="P:Atom.FileConstants.VideoFileExtensions">
            <summary>
            The video file extensions including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.MP3FileExtension">
            <summary>
            The MP3 file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.AACFileExtension">
            <summary>
            The AAC file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.WAVFileExtension">
            <summary>
            The WAV file extension including the '.'
            </summary>  
        </member>
        <member name="P:Atom.FileConstants.AudioFileExtensions">
            <summary>
            The audio file extensions including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.PDFFileExtension">
            <summary>
            The PDF file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.TXTFileExtension">
            <summary>
            The TXT file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.RTFFileExtension">
            <summary>
            The RTF file extension including the '.'
            </summary>
        </member>
        <member name="P:Atom.FileConstants.TextFileExtensions">
            <summary>
            The text file extensions including the '.'
            </summary>
        </member>
        <member name="P:Atom.FileConstants.MSWordFileExtensions">
            <summary>
            The MS word file extensions including the '.'
            </summary>
        </member>
        <member name="P:Atom.FileConstants.MSExcelFileExtensions">
            <summary>
            The MS excel file extensions including the '.'
            </summary>
        </member>
        <member name="P:Atom.FileConstants.MSPowerPointFileExtensions">
            <summary>
            The MS power point file extensions including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.ZIPFileExtension">
            <summary>
            The ZIP file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.RARFileExtension">
            <summary>
            The RAR file extension including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.SevenZIPExtension">
            <summary>
            The 7z file extension including the '.'
            </summary>
        </member>
        <member name="P:Atom.FileConstants.CompressedFileExtensions">
            <summary>
            The compress file extensions including the '.'
            </summary>
        </member>
        <member name="F:Atom.FileConstants.CSVFileExtension">
            <summary>
            The CSV file extension
            </summary>
        </member>
        <member name="T:Atom.FileHelpers">
            <summary>
            Helper methods related to files
            </summary>
        </member>
        <member name="M:Atom.FileHelpers.OpenFile(System.String)">
            <summary>
            Attempts to open the file specified by the <paramref name="fileName"/> by the most appropriate OS application
            </summary>
            <param name="fileName">The directory path and the file name of the file</param>
        </member>
        <member name="M:Atom.FileHelpers.PreviewHTMLAsync(System.String,System.String)">
            <summary>
            Generates a temp HTML file used for opening it with a browser
            </summary>
            <param name="directoryPath">The directory path of the directory where the file will get stored</param>
            <param name="html">The HTML text</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FileHelpers.GetVectorSource(System.String)">
            <summary>
            Gets the <see cref="T:Atom.VectorSource"/> that represents the file at the specified <paramref name="file"/>
            </summary>
            <param name="file">The file path or the file name</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FileHelpers.GetColor(System.String)">
            <summary>
            Gets the color that represents the file at the specified <paramref name="file"/>
            </summary>
            <param name="file">The file path or the file name</param>
            <returns></returns>
        </member>
        <member name="T:Atom.DefaultFrameworkConstruction">
            <summary>
            The default framework construction containing all the default services
            </summary>
        </member>
        <member name="M:Atom.DefaultFrameworkConstruction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.FrameworkConstruction">
            <summary>
            The construction information when starting up and building the framework
            </summary>
        </member>
        <member name="F:Atom.FrameworkConstruction.mServices">
            <summary>
            The services that will get used and compiled once the framework is built
            </summary>
        </member>
        <member name="P:Atom.FrameworkConstruction.Provider">
            <summary>
            The provider that will give as access to the services
            </summary>
        </member>
        <member name="P:Atom.FrameworkConstruction.Services">
            <summary>
            The services that are injected
            </summary>
        </member>
        <member name="P:Atom.FrameworkConstruction.Environment">
            <summary>
            The environment used for the Framework
            </summary>
        </member>
        <member name="P:Atom.FrameworkConstruction.Configuration">
            <summary>
            The configuration used for the Framework
            </summary>
        </member>
        <member name="M:Atom.FrameworkConstruction.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="createServiceCollection">If true, a new <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/> will be created for the Services</param>
        </member>
        <member name="M:Atom.FrameworkConstruction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.FrameworkConstruction.Build(System.IServiceProvider)">
            <summary>
            Builds the service collection into a service provider
            </summary>
        </member>
        <member name="M:Atom.FrameworkConstruction.UseHostedServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Uses the given service collection in the framework. 
            Typically used in an ASP.Net Core environment where
            the ASP.Net server has its own collection.
            </summary>
            <param name="services">The services to use</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstruction.UseConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Uses the given configuration in the framework
            </summary>
            <param name="configuration">The configuration to use</param>
            <returns></returns>
        </member>
        <member name="T:Atom.FrameworkConstructionConfigurator">
            <summary>
            The default implementation of the <see cref="T:Atom.IFrameworkConstructionConfigurator"/>
            </summary>
        </member>
        <member name="P:Atom.FrameworkConstructionConfigurator.Configure">
            <summary>
            Action that configures the specified <see cref="T:Atom.FrameworkConstruction"/>
            </summary>
        </member>
        <member name="M:Atom.FrameworkConstructionConfigurator.#ctor(System.Func{Atom.FrameworkConstruction,System.Threading.Tasks.Task{Atom.IFailable}})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.FrameworkConstructionConfigurator.ConfigureAsync(Atom.FrameworkConstruction)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.FrameworkConstructionExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.FrameworkConstruction"/>
            </summary>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddDefaultServices(Atom.FrameworkConstruction)">
            <summary>
            Injects all of the default services used by Framework for a quicker and cleaner setup
            </summary>
            <param name="construction">The construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddReflectionCacher(Atom.FrameworkConstruction)">
            <summary>
            Injects the <see cref="T:Atom.ReflectionCacher"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddMetaDataCacher(Atom.FrameworkConstruction)">
            <summary>
            Injects the <see cref="T:Atom.MetaDataCacher"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddDynamicTypesManager(Atom.FrameworkConstruction)">
            <summary>
            Injects the <see cref="T:Atom.DynamicTypesManager"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddHealthChecksManager(Atom.FrameworkConstruction)">
            <summary>
            Injects the <see cref="T:Atom.HealthChecksManager"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddCurrentThreadSynchronizationContext(Atom.FrameworkConstruction)">
            <summary>
            Injects <see cref="T:System.Threading.SynchronizationContext"/> that should be retrieved by the
            <see cref="P:Atom.DI.SynchronizationContext"/> by retrieving it from the <see cref="P:System.Threading.Thread.CurrentThread"/>
            </summary>
            <param name="construction">The construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddDefaultFileManager(Atom.FrameworkConstruction)">
            <summary>
            Injects the <see cref="T:Atom.FileManager"/> as the implementation of the <see cref="T:Atom.IFileManager"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddDefaultTaskManager(Atom.FrameworkConstruction)">
            <summary>
            Injects the <see cref="T:Atom.BaseTaskManager"/> as the implementation of the <see cref="T:Atom.ITaskManager"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddDefaultApplicationEnvironment(Atom.FrameworkConstruction,System.Uri,Atom.AtomApplication,System.String,Atom.LanguageCode)">
            <summary>
            Injects the <see cref="T:Atom.DefaultApplicationEnvironment"/> as the implementation of the <see cref="T:Atom.IApplicationEnvironment"/> into the <paramref name="construction"/>
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> that points to the host of the application if any</param>
            <param name="application">The application</param>
            <param name="applicationName">The application name</param>
            <param name="language">The selected language</param>
            <param name="construction">The framework construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddDefaultApplicationEnvironment(Atom.FrameworkConstruction,System.Uri,Atom.AtomApplication,Atom.LanguageCode)">
            <summary>
            Injects the <see cref="T:Atom.DefaultApplicationEnvironment"/> as the implementation of the <see cref="T:Atom.IApplicationEnvironment"/> into the <paramref name="construction"/>
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> that points to the host of the application if any</param>
            <param name="application">The application</param>
            <param name="language">The selected language</param>
            <param name="construction">The framework construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddIdBasedApplicationEnvironmentProvider(Atom.FrameworkConstruction,System.Uri,Atom.AtomApplication,System.String,Atom.LanguageCode,System.String)">
            <summary>
            Injects the <see cref="T:Atom.IdBasedApplicationEnvironment"/> as the implementation of the <see cref="T:Atom.IApplicationEnvironment"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <param name="host">The <see cref="T:System.Uri"/> that points to the host of the application if any.</param>
            <param name="application">The application</param>
            <param name="applicationName">The application name</param>
            <param name="id">
            The id.
            NOTE: The id is usually the company id of the connected company!
            </param>
            <param name="language">The selected language</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddIdBasedApplicationEnvironmentProvider(Atom.FrameworkConstruction,System.Uri,Atom.AtomApplication,Atom.LanguageCode,System.String)">
            <summary>
            Injects the <see cref="T:Atom.IdBasedApplicationEnvironment"/> as the implementation of the <see cref="T:Atom.IApplicationEnvironment"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <param name="host">The <see cref="T:System.Uri"/> that points to the host of the application if any.</param>
            <param name="application">The application</param>
            <param name="id">
            The id.
            NOTE: The id is usually the company id of the connected company!
            </param>
            <param name="language">The selected language</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FrameworkConstructionExtensions.AddApplicationEnvironment(Atom.FrameworkConstruction,Atom.IApplicationEnvironment)">
            <summary>
            Injects the specified <paramref name="applicationEnvironment"/> as an implementation of the <see cref="T:Atom.IApplicationEnvironment"/> into the <paramref name="construction"/>
            </summary>
            <param name="construction">The framework construction</param>
            <param name="applicationEnvironment">The application environment</param>
            <returns></returns>
        </member>
        <member name="T:Atom.HostedFrameworkConstruction">
            <summary>
            Creates a default framework construction containing all 
            the default configuration and services, when used inside
            a project that has it's own service provider such as an
            ASP.Net Core website
            </summary>
        </member>
        <member name="M:Atom.HostedFrameworkConstruction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.IFrameworkConstructionConfigurator">
            <summary>
            Provides abstractions for an object that can configure a <see cref="T:Atom.FrameworkConstruction"/>
            </summary>
        </member>
        <member name="M:Atom.IFrameworkConstructionConfigurator.ConfigureAsync(Atom.FrameworkConstruction)">
            <summary>
            Configures the specified <paramref name="construction"/>
            </summary>
            <param name="construction">The construction</param>
            <returns></returns>
        </member>
        <member name="P:Atom.Framework.Construction">
            <summary>
            The framework construction used in this application
            </summary>
            <remarks>This should be set at the very start of the application!</remarks>
            <example>
                <code>
                    Framework.Construct.DefaultFrameworkConstruction();
                </code>
            </example>
        </member>
        <member name="P:Atom.Framework.Provider">
            <summary>
            The dependency injection service provider
            </summary>
        </member>
        <member name="M:Atom.Framework.Build(System.IServiceProvider)">
            <summary>
            Should be called once a Framework Construction is finished and we want to build it and
            start our application in a hosted environment where the service provider is already built
            such as ASP.Net Core applications
            </summary>
            <param name="provider">The provider</param>
        </member>
        <member name="M:Atom.Framework.Construct``1">
            <summary>
            The initial call to setting up and using the Framework
            </summary>
            <typeparam name="T">The type of construction to use</typeparam>
        </member>
        <member name="M:Atom.Framework.Construct``1(``0)">
            <summary>
            The initial call to setting up and using the Framework.
            </summary>
            <typeparam name="T">The type of construction to use</typeparam>
            <param name="constructionInstance">The instance of the construction to use</param>
        </member>
        <member name="M:Atom.Framework.Service``1">
            <summary>
            Shortcut to Framework.Provider.GetService to get an injected service of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of service to get</typeparam>
            <returns></returns>
        </member>
        <member name="T:Atom.GeometryHelpers">
            <summary>
            Helper methods for circle shapes
            </summary>
        </member>
        <member name="M:Atom.GeometryHelpers.CalculatePositionInCircle(System.Double@,System.Double@,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculates the position of the control based on the total controls and the control's index on a circle
            </summary>
            <param name="x">The calculated x-coordinate</param>
            <param name="y">The calculated y-coordinate</param>
            <param name="radius">The radius of the circle</param>
            <param name="width">The width of the control</param>
            <param name="height">THe height of the control</param>
            <param name="numberOfControls">The number of controls this circle has</param>
            <param name="controlIndex">The position of this control relative to the other. The starting index is 0</param>
            <param name="leftOffset">The extra distance of the circle from the left side</param>
            <param name="topOffset">The extra distance of the circle from the top side</param>
            <returns></returns>
        </member>
        <member name="M:Atom.GeometryHelpers.CalculatePositionAngle(System.Int32,System.Int32)">
            <summary>
            Calculates the angle of a position given the total number of positions and the position's index
            </summary>
            <param name="numberOfPosititions">The number of positions</param>
            <param name="positionIndex">The index of the position we want to calculate the angle</param>
            <returns></returns>
        </member>
        <member name="M:Atom.GeometryHelpers.CalculateCenterElementPositionInParent(System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the best suitable location for the requested element trying to center it to based to the requested location
            </summary>
            <param name="x">The calculated x-coordinate</param>
            <param name="y">The calculated y-coordinate</param>
            <param name="parentWidth">The width of the parent</param>
            <param name="parentHeight">The height of the parent</param>
            <param name="elementWidth">The width of the element</param>
            <param name="elementHeight">The height of the element</param>
            <param name="requestedXLocation">The requested x-coordinate</param>
            <param name="requestedYLocation">The requested y-coordinate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.GeometryHelpers.CalculateUniformScale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the uniform scale factor of a contained element
            </summary>
            <param name="containerWidth">The width of the container</param>
            <param name="containerHeight">The height of the container</param>
            <param name="width">the width of the element</param>
            <param name="height">The height of the element</param>
            <returns></returns>
        </member>
        <member name="M:Atom.GeometryHelpers.TryConvertToPixels(System.String,System.Double@)">
            <summary>
            Tries to convert the <paramref name="inputString"/> to the pixel equivalent value.
            Ex. inputString = 1pt => value = 1 * <see cref="F:Atom.NumericConstants.PointToPixel"/>.
            If the conversion fails then <see langword="false"/> is returned
            </summary>
            <param name="inputString">The input string</param>
            <param name="value">The value that is returned</param>
            <returns></returns>
        </member>
        <member name="T:Atom.GuidExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="M:Atom.GuidExtensions.ToNormalizedString(System.Guid)">
            <summary>
            Returns a string that represents the specified <paramref name="guid"/>
            that contains only alphanumeric characters
            </summary>
            <param name="guid">The guid</param>
            <returns></returns>
        </member>
        <member name="M:Atom.GuidExtensions.ToNormalizedString(System.Guid,System.Int32)">
            <summary>
            Returns a string that represents the specified <paramref name="guid"/>
            that contains only alphanumeric characters and has a specific length
            </summary>
            <param name="guid">The guid</param>
            <param name="length">The length</param>
            <returns></returns>
        </member>
        <member name="M:Atom.GuidExtensions.ToLatinOnlyString(System.Guid)">
            <summary>
            Returns a string that represents the specified <paramref name="guid"/>
            that contains only Latin characters
            </summary>
            <param name="guid">The guid</param>
            <returns></returns>
        </member>
        <member name="M:Atom.GuidExtensions.ToLatinOnlyString(System.Guid,System.Int32)">
            <summary>
            Returns a string that represents the specified <paramref name="guid"/>
            that contains only Latin characters and has a specific length
            </summary>
            <param name="guid">The guid</param>
            <param name="length">The length</param>
            <returns></returns>
        </member>
        <member name="T:Atom.HardwareHelpers">
            <summary>
            Helpers methods associated with Hardware
            </summary>
        </member>
        <member name="M:Atom.HardwareHelpers.GetLocalIPAddress">
            <summary>
            Gets the local IP address
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception">Thrown when an Ip address couldn't be retrieved</exception>
        </member>
        <member name="M:Atom.HardwareHelpers.GetMACAddress">
            <summary>
            Gets the mac address of the current machine
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.HardwareHelpers.GetMachineName">
            <summary>
            Gets the name of the current machine
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.HashCodeHelpers">
            <summary>
            The helper methods for handling hash codes
            </summary>
        </member>
        <member name="M:Atom.HashCodeHelpers.Combine(System.Object[])">
            <summary>
            Combines <paramref name="items"/> into a hash code.
            </summary>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.HashCodeHelpers.Combine``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines <paramref name="items"/> into a hash code.
            </summary>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IconPaths">
            <summary>
            The paths of certain icons
            </summary>
        </member>
        <member name="P:Atom.IconPaths.Data">
            <summary>
            Gets all the icons path data
            </summary>
        </member>
        <member name="T:Atom.IDurationableExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.IDurationable"/>
            </summary>
        </member>
        <member name="M:Atom.IDurationableExtensions.IsTakingPlaceAt(Atom.IReadOnlyDurationable,System.DateTimeOffset)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="durationable"/>
            is taking place at the specified <paramref name="date"/>
            </summary>
            <param name="durationable">The durationable</param>
            <param name="date">The date</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IDurationableExtensions.IsTakingPlaceAt(Atom.IReadOnlyDurationable,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Returns a flag indicating whether the whole durationable or a part of it is taking place
            between the specified <paramref name="start"/> and the specified <paramref name="end"/> dates
            </summary>
            <param name="durationable">The durationable</param>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IDurationableExtensions.IsCurrentlyTakingPlace(Atom.IReadOnlyDurationable)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="durationable"/>
            is currently taking place
            </summary>
            <param name="durationable">The durationable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IDurationableExtensions.IsTakingPlaceInBetween(Atom.IReadOnlyDurationable,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Returns a flag indicating whether the whole duration is taking place between the specified 
            <paramref name="start"/> and the specified <paramref name="end"/> dates
            </summary>
            <param name="durationable">The durationable</param>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IDurationableExtensions.ToLocalTimeSpanString(Atom.IReadOnlyDurationable)">
            <summary>
            Returns a string that represents the time span of the specified <paramref name="durationable"/>
            using the local date and time
            </summary>
            <param name="durationable">The durationable</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IEnumerableExtensions">
            <summary>
            Extension methods associated with <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="F:Atom.IEnumerableExtensions.mRandom">
            <summary>
            Used for selecting random numbers
            </summary>
        </member>
        <member name="M:Atom.IEnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks if the specified <paramref name="enumerable"/> is <see cref="!:null"/> or 
            if it doesn't have any items.
            </summary>
            <param name="enumerable">The enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.ToNonNullEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ensures that the returned enumerable is not empty by returning the <paramref name="enumerable"/>
            if it is not empty, otherwise a <see cref="M:System.Linq.Enumerable.Empty``1"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="enumerable">The enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.ToNonNullList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ensures that the returned enumerable is not empty by returning the <paramref name="enumerable"/>
            if it is not empty, otherwise a <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="enumerable">The enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects a random item from the specified <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            One-line for each
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="action">The action to run</param>
        </member>
        <member name="M:Atom.IEnumerableExtensions.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the specified <paramref name="source"/> if it's not null or empty,
            otherwise it throws an <see cref="T:System.ArgumentNullException"/>
            </summary>
            <param name="source">The source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{System.String,System.String,System.String})">
            <summary>
            Aggregates the specified <paramref name="source"/> into a <see cref="T:System.String"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="extractor">The string extractor that is used to convert an item to a string</param>
            <param name="func">Delegate that places the extracted strings in order</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Aggregates the specified <paramref name="source"/> into a <see cref="T:System.String"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="extractor">The string extractor that is used to convert an item to a string</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.String,System.String,System.String})">
            <summary>
            Aggregates the specified <paramref name="source"/> into a <see cref="T:System.String"/>.
            NOTE: This method converts the items of the <paramref name="source"/> to <see cref="T:System.String"/>
                  using the <see cref="M:System.Object.ToString"/> method!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="func">Delegate that places the extracted strings in order</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Aggregates the specified <paramref name="source"/> into a <see cref="T:System.String"/>.
            NOTE: This method converts the items of the <paramref name="source"/> to <see cref="T:System.String"/>
                  using the <see cref="M:System.Object.ToString"/> method!
            NOTE: This method uses ", " as the items separator!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.ToCollections``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits the specified <paramref name="source"/> to a collection of collections
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="count">The number of collections that should be returned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if the specified <paramref name="source"/> is of type 
            <see cref="T:System.Collections.Generic.List`1"/> and if so, it casts it to that list and
            returns it, otherwise, it creates a list from that <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.UnorderedEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first item matching an expression in an enumerable.
            </summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Finds the index of the first item that equals the <paramref name="element"/>.
            NOTE: The <see cref="M:System.Object.Equals(System.Object)"/> is used for comparing the elements
            </summary>
            <param name="items">The enumerable to search.</param>
            <param name="element">The element that is searched</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.TimeSpan"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.TimeSpan"/> values to calculate the sum of.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.TimeSpan})">
            <summary>
            Computes the sum of the sequence of <see cref="T:System.TimeSpan"/> values that are obtained by
            invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">A sequence of <see cref="T:System.TimeSpan"/> values to calculate the sum of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.TimeSpan}})">
            <summary>
            Computes the sum of a sequence of <see cref="!:TimeSpan?"/> values.
            </summary>
            <param name="source">A sequence of <see cref="!:TimeSpan?"/> values to calculate the sum of.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.TimeSpan}})">
            <summary>
            Computes the sum of the sequence of <see cref="!:TimeSpan?"/> values that are obtained by
            invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="T">The type of the items of the enumerable</typeparam>
            <param name="source">A sequence of values that are used for calculating the sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.ToRanges(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Converts the specified <paramref name="source"/> to a collection of <see cref="T:Atom.Range`1"/>s
            </summary>
            <param name="source">A sequence of values that are used for creating the ranges.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.Except``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences according to a specified <paramref name="propertySelector"/> function.
            </summary>
            <typeparam name="T">The type of the element</typeparam>
            <typeparam name="TKey">The type of the key</typeparam>
            <param name="first">The collection whose keys that are not also in second will be returned</param>
            <param name="second">The collection whose keys that also occur in the first sequence will cause those elements to be removed from the returned sequence</param>
            <param name="propertySelector">A function to extract the key for each element</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Produces the set difference of two sequences according to a specified <paramref name="propertySelector"/> function.
            </summary>
            <typeparam name="T">The type of the element</typeparam>
            <param name="first">The collection whose keys that are not also in second will be returned</param>
            <param name="second">The collection whose keys that also occur in the first sequence will cause those elements to be removed from the returned sequence</param>
            <param name="propertySelector">A function to extract the key for each element</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableExtensions.CreateCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Creates and returns all the possible combinations of the specified <paramref name="sequences"/>.
            NOTE: Each combination contains one item from each sequence!
            NOTE: Order is not taken into consideration!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="sequences">The sequences</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IEnumerableHelpers">
            <summary>
            Helper methods for <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:Atom.IEnumerableHelpers.FromSingle``1(``0)">
            <summary>
            Creates and returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            from the specified <paramref name="item"/>
            </summary>
            <typeparam name="T">The type of the item</typeparam>
            <param name="item">The item</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.FromParams``1(``0[])">
            <summary>
            Creates and returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            from the specified <paramref name="items"/>
            </summary>
            <typeparam name="T">The type of the item</typeparam>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.CreateAndAdd``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Adds the specified <paramref name="item"/> to the specified <paramref name="source"/>.
            NOTE: If the <paramref name="source"/> is <see cref="!:null"/> then a new <see cref="T:System.Collections.Generic.List`1"/>
                  is created!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="item">The item</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.CreateAndAddRange``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified <paramref name="items"/> to the specified <paramref name="source"/>.
            NOTE: If the <paramref name="source"/> is <see cref="!:null"/> then a new <see cref="T:System.Collections.Generic.List`1"/>
                  is created!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.Equalize``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Action{``1,``0},System.Func{``1,``0},Atom.ItemsManipulationResult{``0}@)">
            <summary>
            Equalizes the <paramref name="first"/> collection based on the items of the <paramref name="second"/> collection
            </summary>
            <typeparam name="T1">The type of the items of the first collection</typeparam>
            <typeparam name="T2">The type of the items of the second collection</typeparam>
            <param name="first">The first collection</param>
            <param name="second">The second collection</param>
            <param name="isRelated">
            Returns a flag indicating whether the first item is related to the second item. An item in order to be related to another item
            doesn't need to be equal, for example two items may have the same ids, meaning that they are related, but their values may be 
            different.
            </param>
            <param name="copyValues">Copies the values from the item of the first collection to the item of the second collection</param>
            <param name="instanceImplementationFactory">Creates and returns an instance of an item of the first collection</param>
            <param name="info">Information related to the equalization</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.Equalize``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Action{``1,``0},System.Func{``1,``0})">
            <summary>
            Equalizes the <paramref name="first"/> collection based on the items of the <paramref name="second"/> collection
            </summary>
            <typeparam name="T1">The type of the items of the first collection</typeparam>
            <typeparam name="T2">The type of the items of the second collection</typeparam>
            <param name="first">The first collection</param>
            <param name="second">The second collection</param>
            <param name="isRelated">
            Returns a flag indicating whether the first item is related to the second item. An item in order to be related to another item
            doesn't need to be equal, for example two items may have the same ids, meaning that they are related, but their values may be 
            different.
            </param>
            <param name="copyValues">Copies the values from the item of the first collection to the item of the second collection</param>
            <param name="instanceImplementationFactory">Creates and returns an instance of an item of the first collection</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.Equalize``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Action{``1,``0},System.Func{``1,``0},Atom.ItemsManipulationResult{``0}@)">
            <summary>
            Equalizes the <paramref name="first"/> collection based on the items of the <paramref name="second"/> collection
            </summary>
            <typeparam name="T1">The type of the items of the first collection</typeparam>
            <typeparam name="T2">The type of the items of the second collection</typeparam>
            <param name="first">The first collection</param>
            <param name="second">The second collection</param>
            <param name="isRelated">
            Returns a flag indicating whether the first item is related to the second item. An item in order to be related to another item
            doesn't need to be equal, for example two items may have the same ids, meaning that they are related, but their values may be 
            different.
            </param>
            <param name="copyValues">Copies the values from the item of the first collection to the item of the second collection</param>
            <param name="instanceImplementationFactory">Creates and returns an instance of an item of the first collection</param>
            <param name="info">Information related to the equalization</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.Equalize``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Action{``1,``0},System.Func{``1,``0})">
            <summary>
            Equalizes the <paramref name="first"/> collection based on the items of the <paramref name="second"/> collection
            </summary>
            <typeparam name="T1">The type of the items of the first collection</typeparam>
            <typeparam name="T2">The type of the items of the second collection</typeparam>
            <param name="first">The first collection</param>
            <param name="second">The second collection</param>
            <param name="isRelated">
            Returns a flag indicating whether the first item is related to the second item. An item in order to be related to another item
            doesn't need to be equal, for example two items may have the same ids, meaning that they are related, but their values may be 
            different.
            </param>
            <param name="copyValues">Copies the values from the item of the first collection to the item of the second collection</param>
            <param name="instanceImplementationFactory">Creates and returns an instance of an item of the first collection</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.Compare``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Func{``0,``1,System.Boolean})">
            <summary>
            Compares the <paramref name="first"/> collection based on the items of the <paramref name="second"/> collection
            and returns a result containing information related to all the operations that need to get executed in order
            for the <paramref name="first"/> collection to become equal to the <paramref name="second"/> collection
            </summary>
            <typeparam name="T1">The type of the items of the first collection</typeparam>
            <typeparam name="T2">The type of the items of the second collection</typeparam>
            <param name="first">The first collection</param>
            <param name="second">The second collection</param>
            <param name="isRelated">
            Returns a flag indicating whether the first item is related to the second item. An item in order to be related to another item
            doesn't need to be equal, for example two items may have the same ids, meaning that they are related, but their values may be 
            different.
            </param>
            <param name="isEqual">
            Determines whether two items that are related, are equal, meaning that they do not need to get updated.
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.AreEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Returns a flag indicating whether the items in the <paramref name="first"/> are equal to the items 
            of the <paramref name="second"/> collection. The <paramref name="first"/> and <paramref name="second"/> 
            can be unordered.
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="first">The first collection</param>
            <param name="second">The second collection</param>
            <param name="areEqual">A function that is used for indicating whether two <typeparamref name="T"/> are equal</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.GetParents``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Searches the specified <paramref name="source"/> for all the parents of the specified <paramref name="child"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <typeparam name="TKey">The type of the keys</typeparam>
            <param name="source">The source that contains the items</param>
            <param name="child">The child</param>
            <param name="idSelector">Gets the id from a <typeparamref name="T"/></param>
            <param name="parentIdSelector">Gets the parent id from a <typeparamref name="T"/></param>
            <param name="comparer">The comparer</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.GetHierarchy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Recursively retrieves all items along with their depth level in the hierarchy.
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <typeparam name="TKey">The type of the keys</typeparam>
            <param name="source">The source</param>
            <param name="idSelector">Gets the id from a <typeparamref name="T"/></param>
            <param name="parentIdSelector">Gets the parent id from a <typeparamref name="T"/></param>
            <param name="comparer">The comparer</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IEnumerableHelpers.TraverseHierarchy``2(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Func{``0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.List{Atom.HierarchicalItem{``0}})">
            <summary>
            Recursively retrieves all items along with their depth level in the hierarchy.
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <typeparam name="TKey">The type of the keys</typeparam>
            <param name="source">The source</param>
            <param name="item">The parent item</param>
            <param name="level">The current level</param>
            <param name="result">The result</param>
            <param name="idSelector">Gets the id from a <typeparamref name="T"/></param>
            <param name="parentIdSelector">Gets the parent id from a <typeparamref name="T"/></param>
            <param name="comparer">The comparer</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Failable">
            <summary>
            The default implementation of the <see cref="T:Atom.IFailable"/> interface
            </summary>
        </member>
        <member name="F:Atom.Failable.mException">
            <summary>
            The member of the <see cref="P:Atom.Failable.Exception"/> property
            </summary>
        </member>
        <member name="P:Atom.Failable.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:Atom.Failable.ErrorType">
            <inheritdoc cref="P:Atom.Failable.ErrorType"/>
        </member>
        <member name="P:Atom.Failable.ErrorMessage">
            <inheritdoc cref="P:Atom.Failable.ErrorMessage"/>
        </member>
        <member name="P:Atom.Failable.IsSuccessful">
            <inheritdoc/>
        </member>
        <member name="P:Atom.Failable.Success">
            <summary>
            The instance of the <see cref="T:Atom.Failable"/> that indicates a successful operation
            </summary>
        </member>
        <member name="P:Atom.Failable.OperationAbortedErrorMessage">
            <summary>
            Error message indicating that the operation was aborted
            </summary>
        </member>
        <member name="P:Atom.Failable.OperationAborted">
            <summary>
            The instance of the <see cref="T:Atom.Failable"/> that is used for indicating an operation
            that was aborted with a hidden error
            </summary>
        </member>
        <member name="M:Atom.Failable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Failable.#ctor(System.Exception)">
            <summary>
            Exception based constructor
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="M:Atom.Failable.FromException(System.Exception)">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable"/> from the specified <paramref name="ex"/>
            </summary>
            <param name="ex">The exception</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Failable.FromErrorMessage(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable"/> from the specified <paramref name="errorMessage"/>
            </summary>
            <param name="errorMessage">The error message</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Failable.FromResult``1(``0)">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable`1"/> that represents the specified <paramref name="result"/>
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <param name="result">The result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Failable.FromException``1(System.Exception)">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable`1"/> that represents the specified <paramref name="ex"/>
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <param name="ex">The exception</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Failable.FromErrorMessage``1(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable`1"/> that represents the specified <paramref name="errorMessage"/>
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <param name="errorMessage">The error message</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Failable.FromAbortedOperation``1">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable`1"/> that represents an aborted operation
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <returns></returns>
        </member>
        <member name="M:Atom.Failable.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.Failable.op_Implicit(System.String)~Atom.Failable">
            <summary>
            Creates a <see cref="T:Atom.Failable"/> using the specified string as its error message
            </summary>
            <param name="s">The string</param>
        </member>
        <member name="M:Atom.Failable.op_Implicit(System.Exception)~Atom.Failable">
            <summary>
            Creates a <see cref="T:Atom.Failable"/> using the message of the specified ex and its inner exceptions
            as its error message
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="T:Atom.SuccessOnlyFailable">
            <summary>
            An internal implementation of the <see cref="T:Atom.Failable"/> that always has
            a successful state
            </summary>
        </member>
        <member name="P:Atom.SuccessOnlyFailable.ErrorMessage">
            <inheritdoc/>
        </member>
        <member name="M:Atom.SuccessOnlyFailable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.OperationAbortedOnlyFailable">
            <summary>
            An internal implementation of the <see cref="T:Atom.Failable"/> that is used for 
            indicating an aborted operation
            </summary>
        </member>
        <member name="P:Atom.OperationAbortedOnlyFailable.ErrorMessage">
            <inheritdoc/>
        </member>
        <member name="P:Atom.OperationAbortedOnlyFailable.ErrorType">
            <inheritdoc/>
        </member>
        <member name="M:Atom.OperationAbortedOnlyFailable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Failable`1">
            <summary>
            The default implementation of the <see cref="T:Atom.IFailable`1"/> interface
            </summary>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="F:Atom.Failable`1.ExceptionMessage">
            <summary>
            The error message for the exception
            </summary>
        </member>
        <member name="F:Atom.Failable`1.mResult">
            <summary>
            The member of the <see cref="P:Atom.Failable`1.Result"/>
            </summary>
        </member>
        <member name="P:Atom.Failable`1.Result">
            <inheritdoc/>
        </member>
        <member name="P:Atom.Failable`1.OperationAborted">
            <summary>
            The instance of the <see cref="T:Atom.Failable`1"/> that is used for indicating an operation
            that was aborted with a hidden error
            </summary>
        </member>
        <member name="M:Atom.Failable`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Failable`1.#ctor(`0)">
            <summary>
            Result based constructor
            </summary>
            <param name="result">The result</param>
        </member>
        <member name="M:Atom.Failable`1.#ctor(System.Exception)">
            <summary>
            Exception based constructor
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="M:Atom.Failable`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.Failable`1.op_Implicit(System.String)~Atom.Failable{`0}">
            <summary>
            Creates a <see cref="T:Atom.Failable`1"/> using the specified string as its error message
            </summary>
            <param name="s">The string</param>
        </member>
        <member name="M:Atom.Failable`1.op_Implicit(System.Exception)~Atom.Failable{`0}">
            <summary>
            Creates a <see cref="T:Atom.Failable`1"/> using the message of the specified ex and its inner exceptions
            as its error message
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="M:Atom.Failable`1.op_Implicit(`0)~Atom.Failable{`0}">
            <summary>
            Creates a <see cref="T:Atom.Failable`1"/> using the specified result as its result
            </summary>
            <param name="result">The result</param>
        </member>
        <member name="T:Atom.OperationAbortedOnlyFailable`1">
            <summary>
            An internal implementation of the <see cref="T:Atom.Failable`1"/> that is used for 
            indicating an aborted operation
            </summary>
        </member>
        <member name="P:Atom.OperationAbortedOnlyFailable`1.ErrorMessage">
            <inheritdoc/>
        </member>
        <member name="P:Atom.OperationAbortedOnlyFailable`1.ErrorType">
            <inheritdoc/>
        </member>
        <member name="M:Atom.OperationAbortedOnlyFailable`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.IFailableExtensions">
            <summary>
            The extension methods for the <see cref="T:Atom.IFailable`1"/>
            </summary>
        </member>
        <member name="M:Atom.IFailableExtensions.ToSuccessfulIFailable``2(Atom.IFailable{``1},System.Func{``1,``0})">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable`1"/> from the <paramref name="failable"/>
            </summary>
            <typeparam name="T">The type of the result of the failable</typeparam>
            <typeparam name="TResult">The type of the result of the original failable</typeparam>
            <param name="failable">The failable</param>
            <param name="valueConverter">The method that converts an instance of type <typeparamref name="T"/> to <typeparamref name="TResult"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFailableExtensions.ToUnsuccessfulIFailable``1(Atom.IFailable,System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable`1"/> from the <paramref name="failable"/>
            </summary>
            <typeparam name="T">The type of the failable</typeparam>
            <param name="failable">The failable</param>
            <param name="customErrorMessage">The custom error message</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IFailableHelpers">
            <summary>
            Helper methods for <see cref="T:Atom.IFailable"/>
            </summary>
        </member>
        <member name="M:Atom.IFailableHelpers.GetStringRepresentation(Atom.IFailable)">
            <summary>
            Gets the string representation of the specified <paramref name="failable"/>
            </summary>
            <param name="failable">The failable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFailableHelpers.GetStringRepresentation``1(Atom.IFailable{``0})">
            <summary>
            Gets the string representation of the specified <paramref name="failable"/>
            </summary>
            <param name="failable">The failable</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IFormFileExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>
            </summary>
        </member>
        <member name="M:Atom.IFormFileExtensions.GetBytesAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Gets the <see cref="!:byte[]"/> that represents the specified <paramref name="formFile"/>
            </summary>
            <param name="formFile">The form file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFormFileExtensions.GetBytes(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Gets the <see cref="!:byte[]"/> that represents the specified <paramref name="formFile"/>
            </summary>
            <param name="formFile">The form file</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IFormFileHelpers">
            <summary>
            Helper methods associated with the <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>
            </summary>
        </member>
        <member name="F:Atom.IFormFileHelpers.mExtendedFileExtensionContentTypeProvider">
            <summary>
            The extended file extension content type provider
            </summary>
        </member>
        <member name="M:Atom.IFormFileHelpers.FromBytes(System.Byte[],System.String)">
            <summary>
            Creates and returns a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="bytes"/> and the specified <paramref name="fileName"/>
            </summary>
            <param name="bytes"></param>
            <param name="fileName">Either the name of the file or the full file path</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFormFileHelpers.FromFileName(System.String)">
            <summary>
            Creates and returns a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">The file name</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFormFileHelpers.TryCreateFromFileName(System.String)">
            <summary>
            Tries to create and return a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">The file name</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFormFileHelpers.FromFileName(System.String,System.String)">
            <summary>
            Creates and returns a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">The file name</param>
            <param name="name">
            The custom name that will represents this <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>.
            NOTE: The name will be placed at the <see cref="P:Microsoft.AspNetCore.Http.IFormFile.Headers"/> dictionary
                  using the <see cref="F:Atom.StringConstants.NameHeader"/> as the key!
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFormFileHelpers.TryCreateFromFileName(System.String,System.String)">
            <summary>
            Tries to create and return a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">The file name</param>
            <param name="name">
            The custom name that will represents this <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>.
            NOTE: The name will be placed at the <see cref="P:Microsoft.AspNetCore.Http.IFormFile.Headers"/> dictionary
                  using the <see cref="F:Atom.StringConstants.NameHeader"/> as the key!
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFormFileHelpers.GetCustomFileName(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uses the <see cref="F:Atom.StringConstants.NameHeader"/> to retrieve the custom name
            inserted to the <see cref="P:Microsoft.AspNetCore.Http.IFormFile.Headers"/> of the specified <paramref name="file"/>
            </summary>
            <param name="file">The file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFormFileHelpers.SetCustomFileName(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Sets a custom file name to the specified <paramref name="file"/>
            </summary>
            <param name="file">The file</param>
            <param name="name">The name</param>
        </member>
        <member name="M:Atom.IFormFileHelpers.FromFileNameCore(System.String,Microsoft.AspNetCore.Http.HeaderDictionary)">
            <summary>
            Creates and returns a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="fileName"/> and <paramref name="headers"/>
            </summary>
            <param name="fileName">The file name</param>
            <param name="headers">The headers</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFormFileHelpers.TryCreateFromFileNameCore(System.String,Microsoft.AspNetCore.Http.HeaderDictionary)">
            <summary>
            Tries to create and return a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="fileName"/> and <paramref name="headers"/>
            </summary>
            <param name="fileName">The file name</param>
            <param name="headers">The headers</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IListHelpers">
            <summary>
            Helper methods related to <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
        </member>
        <member name="M:Atom.IListHelpers.CreateAndAdd``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Adds the specified <paramref name="item"/> to the specified <paramref name="source"/>.
            NOTE: If the <paramref name="source"/> is <see cref="!:null"/> then a new <see cref="T:System.Collections.Generic.List`1"/>
                  is created!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="item">The item</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IListHelpers.CreateAndAddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified <paramref name="items"/> to the specified <paramref name="source"/>.
            NOTE: If the <paramref name="source"/> is <see cref="!:null"/> then a new <see cref="T:System.Collections.Generic.List`1"/>
                  is created!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="T:Atom.InputConstants">
            <summary>
            Constants related to user input
            </summary>
        </member>
        <member name="F:Atom.InputConstants.PasswordChar">
            <summary>
            The password char used for masking a password
            </summary>
        </member>
        <member name="F:Atom.InputConstants.PasswordPreviewString">
            <summary>
            The string used for masking a password
            </summary>
        </member>
        <member name="F:Atom.InputConstants.GeneralLimit">
            <summary>
            The limit of chars a general type input has
            </summary>
        </member>
        <member name="F:Atom.InputConstants.PasswordLimit">
            <summary>
            The limit of chars a password has
            </summary>
        </member>
        <member name="F:Atom.InputConstants.PhoneLimit">
            <summary>
            The limit of chars a phone has
            </summary>
        </member>
        <member name="F:Atom.InputConstants.EmailLimit">
            <summary>
            The limit of chars an email has
            </summary>
        </member>
        <member name="F:Atom.InputConstants.IntegerLimit">
            <summary>
            The limit of chars an integer has
            </summary>
        </member>
        <member name="F:Atom.InputConstants.DoubleLimit">
            <summary>
            The limit of chars a double has
            </summary>
        </member>
        <member name="F:Atom.InputConstants.HexColorLimit">
            <summary>
            The limit of a string that presents a hex color
            </summary>
        </member>
        <member name="P:Atom.InputConstants.ForbiddenFileNameCharacters">
            <summary>
            The forbidden file and directory name characters
            </summary>
        </member>
        <member name="P:Atom.InputConstants.PhoneCharacters">
            <summary>
            The phone chars array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.EmailCharacters">
            <summary>
            The phone chars array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.UnsignedIntegerCharacters">
            <summary>
            The unsigned integers chars array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.HEXCharacters">
            <summary>
            The HEX chars array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.UnsignedDoubleCharacters">
            <summary>
            The unsigned double chars array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.IntegerCharacters">
            <summary>
            The integers chars array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.DoubleCharacters">
            <summary>
            The doubles chars array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.LatinCharacters">
            <summary>
            The Latin chars array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.LatinAndNumberCharacters">
            <summary>
            The Latin chars and numbers array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.LatinAndNumbersAndSymbolCharacters">
            <summary>
            The Latin characters , the numbers and the symbols array
            </summary>
        </member>
        <member name="P:Atom.InputConstants.HexColorCharacters">
            <summary>
            The characters for representing a hex color
            </summary>
        </member>
        <member name="T:Atom.InputFormatters">
            <summary>
            Implements a set of predefined input formatters
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.LatinCharactersOnlyFormatter">
            <summary>
            Input normalization for Latin only fields
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.ParameterNameFormatter">
            <summary>
            Input normalization for a name of a parameter
            </summary>
        </member>
        <member name="M:Atom.InputFormatters.SpecificCharsOnlyFormatter(Atom.TextChangedContext,System.Char[])">
            <summary>
            Input normalization using only the specified <paramref name="chars"/>
            </summary>
            <param name="context">The context</param>
            <param name="chars">The chars</param>
            <returns></returns>
        </member>
        <member name="P:Atom.InputFormatters.EmailFormatter">
            <summary>
            Input normalization for email values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.PhoneFormatter">
            <summary>
            Input normalization for phone values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.CountryCodeFormatter">
            <summary>
            Input normalization for country code values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.FileNameInputFormatter">
            <summary>
            Input normalization for a file or a directory name
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.CharFormatter">
            <summary>
            Input normalization for single character values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.HourValueFormatter">
            <summary>
            Input normalization for hour values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.MinuteValueFormatter">
            <summary>
            Input normalization for minute values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.SByteFormatter">
            <summary>
            Input normalization for <see cref="T:System.SByte"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.ByteFormatter">
            <summary>
            Input normalization for <see cref="T:System.Byte"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.ShortFormatter">
            <summary>
            Input normalization for <see cref="T:System.Int16"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.UnsignedShortFormatter">
            <summary>
            Input normalization for <see cref="T:System.UInt16"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.IntegerFormatter">
            <summary>
            Input normalization for <see cref="T:System.Int32"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.UnsignedIntegerFormatter">
            <summary>
            Input normalization for <see cref="T:System.UInt32"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.LongFormatter">
            <summary>
            Input normalization for <see cref="T:System.Int64"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.UnsignedLongFormatter">
            <summary>
            Input normalization for <see cref="T:System.UInt64"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.FloatFormatter">
            <summary>
            Input normalization for <see cref="T:System.Single"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.UnsignedFloatFormatter">
            <summary>
            Input normalization for unsigned <see cref="T:System.Single"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.DoubleFormatter">
            <summary>
            Input normalization for <see cref="T:System.Double"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.UnsignedDoubleFormatter">
            <summary>
            Input normalization for unsigned <see cref="T:System.Double"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.DecimalFormatter">
            <summary>
            Input normalization for <see cref="T:System.Decimal"/> values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.UnsignedDecimalFormatter">
            <summary>
            Input normalization for unsigned <see cref="T:System.Decimal"/> values
            </summary>
        </member>
        <member name="M:Atom.InputFormatters.GetNumericFormatter(System.Type)">
            <summary>
            Returns an input formatter used for formatting compatible to the specified <paramref name="numericType"/>.
            Both nullable and non-nullable types are checked
            </summary>
            <param name="numericType">The numeric type</param>
            <returns></returns>
        </member>
        <member name="P:Atom.InputFormatters.HexColorFormatter">
            <summary>
            Input normalization for hex color values
            </summary>
        </member>
        <member name="P:Atom.InputFormatters.PercentageFormatter">
            <summary>
            Input normalization for percentage values
            </summary>
        </member>
        <member name="M:Atom.InputFormatters.FormatBasedOnLength(Atom.TextChangedContext,System.UInt32)">
            <summary>
            Selects between the new and the old values based
            on their length using the <paramref name="maxLength"/>
            </summary>
            <param name="context">The context</param>
            <param name="maxLength">The max length</param>
            <returns></returns>
        </member>
        <member name="M:Atom.InputFormatters.FormatBasedOnSize(Atom.TextChangedContext,System.Decimal,System.Decimal)">
            <summary>
            Selects between the new and the old values based
            on their size using the <paramref name="minValue"/>
            and the <paramref name="maxValue"/>
            </summary>
            <param name="context">The context</param>
            <param name="minValue">The min value</param>
            <param name="maxValue">The max value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IntegerExtensions">
            <summary>
            Extension methods for <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:Atom.IntegerExtensions.ToEnumerableString(System.Int32,System.String,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="count"/>
            using the specified forms
            </summary>
            <param name="count">The number of items</param>
            <param name="singularForm">Returns the string that represents the singular form</param>
            <param name="pluralForm">Returns the string that represents the plural form</param>
            <param name="zeroForm">Returns the string that represents the zero form</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IAccessor`1">
            <summary>
            Provides abstractions for an object that has an accessor of a value the specified type
            </summary>
            <typeparam name="T">The type of the value that can be accessed</typeparam>
        </member>
        <member name="P:Atom.IAccessor`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:Atom.IAsyncInitializable">
            <summary>
            Provides abstractions for an object that requires asynchronous initialization
            </summary>
        </member>
        <member name="M:Atom.IAsyncInitializable.InitializeAsync">
            <summary>
            Initializes the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.IAsyncResetable">
            <summary>
            Provides abstractions for a an object that can be reset
            using an asynchronous operation
            </summary>
        </member>
        <member name="M:Atom.IAsyncResetable.ResetAsync">
            <summary>
            Executes a reset operation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.IAsyncValidatable">
            <summary>
            Provides abstractions for an object that requires asynchronous validation
            </summary>
        </member>
        <member name="M:Atom.IAsyncValidatable.ValidateAsync">
            <summary>
            Validates the state of the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.IFailable">
            <summary>
            Provides abstractions for an object that can fail its task
            </summary>
        </member>
        <member name="P:Atom.IFailable.Success">
            <summary>
            The instance of the <see cref="T:Atom.IFailable"/> that indicates a successful operation
            </summary>
        </member>
        <member name="P:Atom.IFailable.OperationAborted">
            <summary>
            The instance of the <see cref="T:Atom.IFailable"/> that is used for indicating an operation
            that was aborted with a hidden error
            </summary>
        </member>
        <member name="P:Atom.IFailable.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:Atom.IFailable.ErrorType">
            <summary>
            The error type
            </summary>
        </member>
        <member name="P:Atom.IFailable.ErrorMessage">
            <summary>
            The error message
            </summary>
        </member>
        <member name="P:Atom.IFailable.IsSuccessful">
            <summary>
            A flag indicating whether the task was successful or not
            </summary>
        </member>
        <member name="M:Atom.IFailable.FromException(System.Exception)">
            <summary>
            Creates and returns a <see cref="T:Atom.IFailable"/> from the specified <paramref name="ex"/>
            </summary>
            <param name="ex">The exception</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFailable.FromErrorMessage(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.IFailable"/> from the specified <paramref name="errorMessage"/>
            </summary>
            <param name="errorMessage">The error message</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFailable.FromResult``1(``0)">
            <summary>
            Creates and returns a <see cref="T:Atom.IFailable`1"/> that represents the specified <paramref name="result"/>
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <param name="result">The result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFailable.FromException``1(System.Exception)">
            <summary>
            Creates and returns a <see cref="T:Atom.IFailable`1"/> that represents the specified <paramref name="ex"/>
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <param name="ex">The exception</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFailable.FromErrorMessage``1(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.Failable`1"/> that represents the specified <paramref name="errorMessage"/>
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <param name="errorMessage">The error message</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFailable.FromAbortedOperation``1">
            <summary>
            Creates and returns a <see cref="T:Atom.IFailable`1"/> that represents an aborted operation
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <returns></returns>
        </member>
        <member name="T:Atom.IFailable`1">
            <summary>
            A <see cref="T:Atom.IFailable"/> that contains a result
            </summary>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:Atom.IFailable`1.OperationAborted">
            <summary>
            The instance of the <see cref="T:Atom.IFailable`1"/> that is used for indicating an operation
            that was aborted with a hidden error
            </summary>
        </member>
        <member name="P:Atom.IFailable`1.Result">
            <summary>
            The result
            </summary>
        </member>
        <member name="T:Atom.IInitializable">
            <summary>
            Provides abstractions for an object that requires initialization
            </summary>
        </member>
        <member name="M:Atom.IInitializable.Initialize">
            <summary>
            Initializes the object
            </summary>
        </member>
        <member name="T:Atom.IMetaData">
            <summary>
            Provides abstractions for an key / value pair object that represents meta information
            </summary>
        </member>
        <member name="P:Atom.IMetaData.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:Atom.IMetaData.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:Atom.IMetaDataContainer">
            <summary>
            Provides abstractions for an object that contains meta information
            </summary>
        </member>
        <member name="P:Atom.IMetaDataContainer.MetaData">
            <summary>
            The meta data
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyActivatable">
            <summary>
            Provides abstractions for an object that has an active status
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyActivatable.IsActive">
            <summary>
            A flag indicating whether the object is active or not
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyChargeable">
            <summary>
            Provides abstractions for an object that has values that 
            represent a charge
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyChargeable.TaxAmount">
            <summary>
            The tax amount
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyChargeable.NetAmount">
            <summary>
            The net amount
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyColorable">
            <summary>
            Provides abstractions for an object that has a color
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyColorable.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyConditionable">
            <summary>
            Provides abstractions for an object with a logical condition state
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyConditionable.Condition">
            <summary>
            The condition.
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyCreatedBy`1">
            <summary>
            Provides abstractions for an object with a creator
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyCreatedBy`1.CreatedBy">
            <summary>
            The user that created the entity
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyDateCreatable">
            <summary>
            Provides abstractions for an object that has a creation date
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDateCreatable.DateCreated">
            <summary>
            The creation date
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyDateFormattable">
            <summary>
            Provides abstraction for an object with a date format
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDateFormattable.DateFormat">
            <summary>
            The date format
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyDateLimitable">
            <summary>
            Provides abstractions for an object that offers filtering options based on the creation date of a different object
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDateLimitable.After">
            <summary>
            Limit the result set to resources created after a specific date time
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDateLimitable.Before">
            <summary>
            Limit the result set to resources created before a specific date time
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyDateModifiable">
            <summary>
            Provides abstractions for an object that has a modification date
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDateModifiable.DateModified">
            <summary>
            The modification date
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyDateModifiedLimitable">
            <summary>
            Provides abstractions for an object that offers filtering options based on the modification date of a different object
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDateModifiedLimitable.AfterDateModified">
            <summary>
            Limits the result set to resource that were modified after a specific date time
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDateModifiedLimitable.BeforeDateModified">
            <summary>
            Limits the result set to resources that were modified before a specific date time
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyDescriptable">
            <summary>
            Provides abstractions for an object that has a description
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDescriptable.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyDurationable">
            <summary>
            Provides abstractions for an object with a duration
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDurationable.DateStart">
            <summary>
            The starting date time
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDurationable.DateEnd">
            <summary>
            The ending date time
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDurationable.Atom#IReadOnlyRangeable{System#DateTimeOffset}#Minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDurationable.Atom#IReadOnlyRangeable{System#DateTimeOffset}#Maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:Atom.IReadOnlyDurationable.Create(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Creates and returns a <see cref="T:Atom.IReadOnlyDurationable"/> using the specified <paramref name="dateStart"/>
            and the specified <paramref name="dateEnd"/>
            </summary>
            <param name="dateStart">The date start</param>
            <param name="dateEnd">The date end</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IReadOnlyDurationable.Durationable">
            <summary>
            An internal implementation of the <see cref="T:Atom.IReadOnlyDurationable"/>
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDurationable.Durationable.DateStart">
            <summary>
            The starting date time
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyDurationable.Durationable.DateEnd">
            <summary>
            The ending date time
            </summary>
        </member>
        <member name="M:Atom.IReadOnlyDurationable.Durationable.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyEmailable">
            <summary>
            Provides abstractions for an object that has an email
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyEmailable.HasEmail">
            <summary>
            A flag indicating whether there is an email or not
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyEmailable.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyEmbeddableIdentifiable`1">
            <summary>
            Provides abstractions for an object that can be embedded and identified
            </summary>
            <typeparam name="T">The type of the key</typeparam>
        </member>
        <member name="P:Atom.IReadOnlyEmbeddableIdentifiable`1.Atom#IEmbeddableIdentifiable#Source">
            <summary>
            The id of the object that was used for creating the current object
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyEmbeddableIdentifiable`1.Source">
            <summary>
            The id of the object that was used for creating the current object
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyIconPathDatable">
            <summary>
            Provides abstractions for an object that has an icon path data
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyIconPathDatable.IconPathData">
            <summary>
            The icon path data
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyIdentifiable`1">
            <summary>
            Provides abstractions for an object that has an identifier
            </summary>
            <typeparam name="T">The type of the key</typeparam>
        </member>
        <member name="P:Atom.IReadOnlyIdentifiable`1.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyIdentifiable`1.Atom#IIdentifiable#Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyImmutable">
            <summary>
            Provides abstractions for an object with an immutable state
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyImmutable.IsReadOnly">
            <summary>
            A flag indicating whether the object is in a read only state or not
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyIncludable`1">
            <summary>
            Provides abstractions for an object that can include or exclude other objects based on identifiers
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyIncludable`1.Include">
            <summary>
            Limit the result set by including only resource with specific ids
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyIncludable`1.Exclude">
            <summary>
            Limit the result set by excluding resource with specific ids
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyKeyable">
            <summary>
            Provides abstractions for an object that can be identified using a key
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyKeyable.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyLanguageable">
            <summary>
            Provides abstractions for an object that contains information related to language
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyLanguageable.Language">
            <summary>
            The language
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyLocalizedDescriptable">
            <summary>
            Provides abstractions for an object that contains a <see cref="P:Atom.IDescriptable.Description"/>
            as well as localized versions of this value
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyLocalizedDescriptable.LocalizedDescriptions">
            <summary>
            The localized descriptions
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyLocalizedSmallDescriptable">
            <summary>
            Provides abstractions for an object that contains a <see cref="P:Atom.ISmallDescriptable.SmallDescription"/>
            as well as localized versions of this value
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyLocalizedSmallDescriptable.LocalizedSmallDescriptions">
            <summary>
            The localized small descriptions
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyNameable">
            <summary>
            Provides abstractions for an object that has a name
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyNameable.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyNoteable">
            <summary>
            Provides abstractions for an object with a note
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyNoteable.Note">
            <summary>
            The note
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyNullable">
            <summary>
            Provides abstractions for an object that has a nullable state
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyNullable.IsNullable">
            <summary>
            A flag indicating whether null values are accepted or not
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyOffsetable">
            <summary>
            Provides abstractions for an object with an offset
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyOffsetable.Offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyOpenable">
            <summary>
            Provides abstractions for an object with an open state
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyOpenable.IsOpen">
            <summary>
            A flag indicating an open status
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyOrderable">
            <summary>
            Provides abstractions for an object with ordering rules
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyOrderable.Rules">
            <summary>
            The order rules
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyPaginatable">
            <summary>
            Provides abstractions for an object that contains pagination information
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyPaginatable.Page">
            <summary>
            The index of the page starting from 0.
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyPaginatable.PerPage">
            <summary>
            Maximum number of items to be returned in result set.
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyParentable`1">
            <summary>
            Provides abstractions for an object with a parent
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyParentable`1.Parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyPayable">
            <summary>
            Provides abstractions for an object that has values that
            represent a payment
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyPayable.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyPhoneable">
            <summary>
            Provides abstractions for an object that has a phone number
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyPhoneable.HasPhoneNumber">
            <summary>
            A flag indicating whether there is a phone number or not
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyPhoneable.PhoneNumber">
            <summary>
            The phone number
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyPrioritizable">
            <summary>
            Provides abstractions for an object that has a priority
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyPrioritizable.Priority">
            <summary>
            The priority
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyRangeable`1">
            <summary>
            Provides abstractions for an object that has values that define a range
            </summary>
            <typeparam name="T">The type of the values</typeparam>
        </member>
        <member name="P:Atom.IReadOnlyRangeable`1.Minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyRangeable`1.Maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:Atom.IReadOnlyRangeable`1.Create(`0,`0)">
            <summary>
            Creates and returns a <see cref="T:Atom.IReadOnlyRangeable`1"/>
            </summary>
            <param name="minimum">The minimum value</param>
            <param name="maximum">The maximum value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IReadOnlyRateable">
            <summary>
            Provides abstractions for an object that has a rate
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyRateable.Rate">
            <summary>
            The rate.
            </summary>
            <remarks>
            <para>
            The value must be between 0 and 100.
            </para>
            <para>
            Example: 24 is 24% tax rate.
            </para>
            </remarks>
        </member>
        <member name="T:Atom.IReadOnlySearchLimitable">
            <summary>
            Provides abstractions for an object that offers filtering options based on a string value.
            </summary>
        </member>
        <member name="P:Atom.IReadOnlySearchLimitable.Search">
            <summary>
            Limit result set using a search value.
            </summary>
        </member>
        <member name="T:Atom.IReadOnlySmallDescriptable">
            <summary>
            Provides abstractions for an object that has a small description
            </summary>
        </member>
        <member name="P:Atom.IReadOnlySmallDescriptable.SmallDescription">
            <summary>
            The small description
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyStringFormattable">
            <summary>
            Provides abstractions for an object with an input formatter
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyStringFormattable.InputFormatter">
            <summary>
            Formats the inserted string value
            </summary>
        </member>
        <member name="T:Atom.IReadOnlySuspendable">
            <summary>
            Provides abstractions for an object with a suspended state
            </summary>
        </member>
        <member name="P:Atom.IReadOnlySuspendable.IsSuspended">
            <summary>
            A flag indicating whether the object is suspended or not
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyValueable`1">
            <summary>
            Provides abstractions for an object that has a value
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:Atom.IReadOnlyValueable`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:Atom.IOwnable">
            <summary>
            Provides abstractions for an object that contains information related to
            an owed amount
            </summary>
        </member>
        <member name="P:Atom.IOwnable.SpentAmount">
            <summary>
            The amount that is spent
            </summary>
        </member>
        <member name="P:Atom.IOwnable.PaidAmount">
            <summary>
            The amount that is paid
            </summary>
        </member>
        <member name="P:Atom.IOwnable.OwedAmount">
            <summary>
            The amount that is owed
            </summary>
        </member>
        <member name="P:Atom.IOwnable.HasOwed">
            <summary>
            A flag indicating whether there is an owed amount or not
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyTextable">
            <summary>
            Provides abstractions for an object that has a text
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyTextable.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="T:Atom.IReadOnlyVectorImageable">
            <summary>
            Provides abstractions for an object that has a vector image
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyVectorImageable.VectorSource">
            <summary>
            The vector source
            </summary>
        </member>
        <member name="T:Atom.IResetable">
            <summary>
            Provides abstractions for a an object that can be reset
            </summary>
        </member>
        <member name="M:Atom.IResetable.Reset">
            <summary>
            Executes a reset operation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.ISaveable`1">
            <summary>
            Provides abstractions for a saveable object
            </summary>
            <typeparam name="T">The type of the saveable item</typeparam>
        </member>
        <member name="E:Atom.ISaveable`1.ChangesSaved">
            <summary>
            Fires every time the changes are saved
            </summary>
        </member>
        <member name="T:Atom.ITextable">
            <summary>
            Provides abstractions for an object that has an assignable text
            </summary>
        </member>
        <member name="P:Atom.ITextable.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="P:Atom.ITextable.Atom#IReadOnlyTextable#Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="T:Atom.IUpdatable">
            <summary>
            Provides abstractions for an updatable object
            </summary>
        </member>
        <member name="M:Atom.IUpdatable.Update">
            <summary>
            Updates the object
            </summary>
        </member>
        <member name="T:Atom.IUpdatableNotifier">
            <summary>
            Provides abstractions for an object that has an event that fires
            every time that state of the object is updated
            </summary>
        </member>
        <member name="E:Atom.IUpdatableNotifier.Updated">
            <summary>
            Event that fires every time that object is updated
            </summary>
        </member>
        <member name="T:Atom.IValidatable">
            <summary>
            Provides abstractions for an object that requires validation
            </summary>
        </member>
        <member name="M:Atom.IValidatable.Validate">
            <summary>
            Validates the state of the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.IVectorImageable">
            <summary>
            Provides abstractions for an object that has an assignable vector image
            </summary>
        </member>
        <member name="P:Atom.IVectorImageable.VectorSource">
            <summary>
            The vector source
            </summary>
        </member>
        <member name="P:Atom.IVectorImageable.Atom#IReadOnlyVectorImageable#VectorSource">
            <summary>
            The vector source
            </summary>
        </member>
        <member name="T:Atom.IActivatable">
            <summary>
            Provides abstractions for an object that can be activated and deactivated
            </summary>
        </member>
        <member name="P:Atom.IActivatable.IsActive">
            <inheritdoc cref="P:Atom.IReadOnlyActivatable.IsActive"/>
        </member>
        <member name="P:Atom.IActivatable.Atom#IReadOnlyActivatable#IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IChargeable">
            <summary>
            Provides abstractions for an object that has assignable values that 
            represent a charge
            </summary>
        </member>
        <member name="P:Atom.IChargeable.TaxAmount">
            <inheritdoc cref="P:Atom.IReadOnlyChargeable.TaxAmount"/>
        </member>
        <member name="P:Atom.IChargeable.NetAmount">
            <inheritdoc cref="P:Atom.IReadOnlyChargeable.NetAmount"/>
        </member>
        <member name="P:Atom.IChargeable.Atom#IReadOnlyChargeable#TaxAmount">
            <inheritdoc/>
        </member>
        <member name="P:Atom.IChargeable.Atom#IReadOnlyChargeable#NetAmount">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IColorable">
            <summary>
            Provides abstractions for an object that can be colored
            </summary>
        </member>
        <member name="P:Atom.IColorable.Color">
            <inheritdoc cref="P:Atom.IReadOnlyColorable.Color"/>
        </member>
        <member name="P:Atom.IColorable.Atom#IReadOnlyColorable#Color">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IConditionable">
            <summary>
            Provides abstractions for an object with an assignable logical condition state
            </summary>
        </member>
        <member name="P:Atom.IConditionable.Condition">
            <inheritdoc cref="P:Atom.IReadOnlyConditionable.Condition"/>
        </member>
        <member name="P:Atom.IConditionable.Atom#IReadOnlyConditionable#Condition">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ICreatedBy`1">
            <summary>
            Provides abstractions for an object that can be assigned a creator
            </summary>
        </member>
        <member name="P:Atom.ICreatedBy`1.CreatedBy">
            <inheritdoc cref="P:Atom.IReadOnlyCreatedBy`1.CreatedBy"/>
        </member>
        <member name="P:Atom.ICreatedBy`1.Atom#IReadOnlyCreatedBy{T}#CreatedBy">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IDateCreatable">
            <summary>
            Provides abstractions for an object that has can be marked as created at a specific date
            </summary>
        </member>
        <member name="P:Atom.IDateCreatable.DateCreated">
            <inheritdoc cref="P:Atom.IReadOnlyDateCreatable.DateCreated"/>
        </member>
        <member name="P:Atom.IDateCreatable.Atom#IReadOnlyDateCreatable#DateCreated">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IDateFormattable">
            <summary>
            Provides abstraction for an object with an assignable date format
            </summary>
        </member>
        <member name="P:Atom.IDateFormattable.DateFormat">
            <inheritdoc cref="P:Atom.IReadOnlyDateFormattable.DateFormat"/>
        </member>
        <member name="P:Atom.IDateFormattable.Atom#IReadOnlyDateFormattable#DateFormat">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IDateLimitable">
            <summary>
            Provides abstractions for an object that offers filtering options based on the creation date of a different object
            </summary>
        </member>
        <member name="P:Atom.IDateLimitable.After">
            <inheritdoc cref="P:Atom.IReadOnlyDateLimitable.After"/>
        </member>
        <member name="P:Atom.IDateLimitable.Before">
            <inheritdoc cref="P:Atom.IReadOnlyDateLimitable.Before"/>
        </member>
        <member name="P:Atom.IDateLimitable.Atom#IReadOnlyDateLimitable#After">
            <inheritdoc/>
        </member>
        <member name="P:Atom.IDateLimitable.Atom#IReadOnlyDateLimitable#Before">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IDateModifiable">
            <summary>
            Provides abstraction for an object that can be marked as modified at a specific date
            </summary>
        </member>
        <member name="P:Atom.IDateModifiable.DateModified">
            <inheritdoc cref="P:Atom.IReadOnlyDateModifiable.DateModified"/>
        </member>
        <member name="P:Atom.IDateModifiable.Atom#IReadOnlyDateModifiable#DateModified">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IDateModifiedLimitable">
            <summary>
            Provides abstractions for an object that offers filtering options based on the modification date of a different object
            </summary>
        </member>
        <member name="P:Atom.IDateModifiedLimitable.AfterDateModified">
            <inheritdoc cref="P:Atom.IReadOnlyDateModifiedLimitable.AfterDateModified"/>
        </member>
        <member name="P:Atom.IDateModifiedLimitable.BeforeDateModified">
            <inheritdoc cref="P:Atom.IReadOnlyDateModifiedLimitable.BeforeDateModified"/>
        </member>
        <member name="P:Atom.IDateModifiedLimitable.Atom#IReadOnlyDateModifiedLimitable#AfterDateModified">
            <inheritdoc/>
        </member>
        <member name="P:Atom.IDateModifiedLimitable.Atom#IReadOnlyDateModifiedLimitable#BeforeDateModified">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IDescriptable">
            <summary>
            Provides abstractions for an object that can be described
            </summary>
        </member>
        <member name="P:Atom.IDescriptable.Description">
            <inheritdoc cref="P:Atom.IReadOnlyDescriptable.Description"/>
        </member>
        <member name="P:Atom.IDescriptable.Atom#IReadOnlyDescriptable#Description">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IDurationable">
            <summary>
            Provides abstractions for an object with that can set its duration
            </summary>
        </member>
        <member name="P:Atom.IDurationable.DateStart">
            <inheritdoc cref="P:Atom.IReadOnlyDurationable.DateStart"/>
        </member>
        <member name="P:Atom.IDurationable.DateEnd">
            <inheritdoc cref="P:Atom.IReadOnlyDurationable.DateEnd"/>
        </member>
        <member name="P:Atom.IDurationable.Atom#IReadOnlyDurationable#DateStart">
            <inheritdoc/>
        </member>
        <member name="P:Atom.IDurationable.Atom#IReadOnlyDurationable#DateEnd">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IEmailable">
            <summary>
            Provides abstractions for an object that has an assignable email
            </summary>
        </member>
        <member name="P:Atom.IEmailable.Email">
            <inheritdoc cref="P:Atom.IReadOnlyEmailable.Email"/>
        </member>
        <member name="P:Atom.IEmailable.Atom#IReadOnlyEmailable#Email">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IEmbeddableIdentifiable">
            <summary>
            Provides abstractions for an object that can be embedded and identified
            </summary>
        </member>
        <member name="P:Atom.IEmbeddableIdentifiable.Source">
            <summary>
            The id of the object that was used for creating the current object
            </summary>
        </member>
        <member name="T:Atom.IEmbeddableIdentifiable`1">
            <summary>
            Provides abstractions for an object that can be embedded and identified
            </summary>
            <typeparam name="T">The type of the key</typeparam>
        </member>
        <member name="P:Atom.IEmbeddableIdentifiable`1.Source">
            <inheritdoc cref="P:Atom.IReadOnlyEmbeddableIdentifiable`1.Source"/>
        </member>
        <member name="P:Atom.IEmbeddableIdentifiable`1.Atom#IReadOnlyEmbeddableIdentifiable{T}#Source">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IIconPathDatable">
            <summary>
            Provides abstractions for an object that has an assignable icon path data
            </summary>
        </member>
        <member name="P:Atom.IIconPathDatable.IconPathData">
            <inheritdoc cref="P:Atom.IReadOnlyIconPathDatable.IconPathData"/>
        </member>
        <member name="P:Atom.IIconPathDatable.Atom#IReadOnlyIconPathDatable#IconPathData">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IIdentifiable">
            <summary>
            Provides abstractions for an object that can be identified
            </summary>
        </member>
        <member name="P:Atom.IIdentifiable.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="T:Atom.IIdentifiable`1">
            <summary>
            Provides abstractions for an object that can be identified
            </summary>
            <typeparam name="T">The type of the key</typeparam>
        </member>
        <member name="P:Atom.IIdentifiable`1.Id">
            <inheritdoc cref="P:Atom.IReadOnlyIdentifiable`1.Id"/>
        </member>
        <member name="P:Atom.IIdentifiable`1.Atom#IReadOnlyIdentifiable{T}#Id">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IImmutable">
            <summary>
            Provides abstractions for an object that can change its state from mutable to immutable
            </summary>
        </member>
        <member name="P:Atom.IImmutable.IsReadOnly">
            <inheritdoc cref="P:Atom.IReadOnlyImmutable.IsReadOnly"/>
        </member>
        <member name="P:Atom.IImmutable.Atom#IReadOnlyImmutable#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IIncludable`1">
            <summary>
            Provides abstractions for an object that can include or exclude other objects based on identifiers
            </summary>
        </member>
        <member name="P:Atom.IIncludable`1.Include">
            <inheritdoc cref="P:Atom.IReadOnlyIncludable`1.Include"/>
        </member>
        <member name="P:Atom.IIncludable`1.Exclude">
            <inheritdoc cref="P:Atom.IReadOnlyIncludable`1.Exclude"/>
        </member>
        <member name="P:Atom.IIncludable`1.Atom#IReadOnlyIncludable{T}#Include">
            <inheritdoc/>
        </member>
        <member name="P:Atom.IIncludable`1.Atom#IReadOnlyIncludable{T}#Exclude">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IKeyable">
            <summary>
            Provides abstractions for an object that can set its key identifier
            </summary>
        </member>
        <member name="P:Atom.IKeyable.Key">
            <inheritdoc cref="P:Atom.IReadOnlyKeyable.Key"/>
        </member>
        <member name="P:Atom.IKeyable.Atom#IReadOnlyKeyable#Key">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ILanguageable">
            <summary>
            Provides abstractions for an object that can define its language
            </summary>
        </member>
        <member name="P:Atom.ILanguageable.Language">
            <inheritdoc cref="P:Atom.IReadOnlyLanguageable.Language"/>
        </member>
        <member name="P:Atom.ILanguageable.Atom#IReadOnlyLanguageable#Language">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ILocalizedDescriptable">
            <summary>
            Provides abstractions for an object that contains a configurable <see cref="P:Atom.IDescriptable.Description"/>
            as well as configurable localized versions of this value
            </summary>
        </member>
        <member name="P:Atom.ILocalizedDescriptable.LocalizedDescriptions">
            <inheritdoc cref="P:Atom.IReadOnlyLocalizedDescriptable.LocalizedDescriptions"/>
        </member>
        <member name="T:Atom.ILocalizedSmallDescriptable">
            <summary>
            Provides abstractions for an object that contains a configurable <see cref="P:Atom.ISmallDescriptable.SmallDescription"/>
            as well as configurable localized versions of this value
            </summary>
        </member>
        <member name="P:Atom.ILocalizedSmallDescriptable.LocalizedSmallDescriptions">
            <inheritdoc cref="P:Atom.IReadOnlyLocalizedSmallDescriptable.LocalizedSmallDescriptions"/>
        </member>
        <member name="T:Atom.INameable">
            <summary>
            Provides abstractions for an object that can be named
            </summary>
        </member>
        <member name="P:Atom.INameable.Name">
            <inheritdoc cref="P:Atom.IReadOnlyNameable.Name"/>
        </member>
        <member name="P:Atom.INameable.Atom#IReadOnlyNameable#Name">
            <inheritdoc/>
        </member>
        <member name="T:Atom.INoteable">
            <summary>
            Provides abstractions for an object that can be noted
            </summary>
        </member>
        <member name="P:Atom.INoteable.Note">
            <inheritdoc cref="P:Atom.IReadOnlyNoteable.Note"/>
        </member>
        <member name="P:Atom.INoteable.Atom#IReadOnlyNoteable#Note">
            <inheritdoc/>
        </member>
        <member name="T:Atom.INullable">
            <summary>
            Provides abstractions for an object that who has an assignable nullable state
            </summary>
        </member>
        <member name="P:Atom.INullable.IsNullable">
            <inheritdoc cref="P:Atom.IReadOnlyNullable.IsNullable"/>
        </member>
        <member name="P:Atom.INullable.Atom#IReadOnlyNullable#IsNullable">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IOffsetable">
            <summary>
            Provides abstractions for an object that can set its offset
            </summary>
        </member>
        <member name="P:Atom.IOffsetable.Offset">
            <inheritdoc cref="P:Atom.IReadOnlyOffsetable.Offset"/>
        </member>
        <member name="P:Atom.IOffsetable.Atom#IReadOnlyOffsetable#Offset">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IOpenable">
            <summary>
            Provides abstractions for an object that can be opened or closed
            </summary>
        </member>
        <member name="P:Atom.IOpenable.IsOpen">
            <inheritdoc cref="P:Atom.IReadOnlyOpenable.IsOpen"/>
        </member>
        <member name="P:Atom.IOpenable.Atom#IReadOnlyOpenable#IsOpen">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IOrderable">
            <summary>
            Provides abstractions for an object that has assignable ordering rules
            </summary>
        </member>
        <member name="P:Atom.IOrderable.Rules">
            <inheritdoc cref="P:Atom.IReadOnlyOrderable.Rules"/>
        </member>
        <member name="P:Atom.IOrderable.Atom#IReadOnlyOrderable#Rules">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IPaginatable">
            <summary>
            Provides abstractions for an object that provides assignable pagination information
            </summary>
        </member>
        <member name="P:Atom.IPaginatable.Page">
            <inheritdoc cref="P:Atom.IReadOnlyPaginatable.Page"/>
        </member>
        <member name="P:Atom.IPaginatable.PerPage">
            <inheritdoc cref="P:Atom.IReadOnlyPaginatable.PerPage"/>
        </member>
        <member name="P:Atom.IPaginatable.Atom#IReadOnlyPaginatable#Page">
            <inheritdoc/>
        </member>
        <member name="P:Atom.IPaginatable.Atom#IReadOnlyPaginatable#PerPage">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IParentable`1">
            <summary>
            Provides abstractions for an object that has an assignable parent
            </summary>
        </member>
        <member name="P:Atom.IParentable`1.Parent">
            <inheritdoc cref="P:Atom.IReadOnlyParentable`1.Parent"/>
        </member>
        <member name="P:Atom.IParentable`1.Atom#IReadOnlyParentable{T}#Parent">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IPayable">
            <summary>
            Provides abstractions for an object that has assignable values that
            represent a payment
            </summary>
        </member>
        <member name="P:Atom.IPayable.Amount">
            <inheritdoc cref="P:Atom.IReadOnlyPayable.Amount"/>
        </member>
        <member name="P:Atom.IPayable.Atom#IReadOnlyPayable#Amount">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IPhoneable">
            <summary>
            Provides abstractions for an object that has an assignable phone number
            </summary>
        </member>
        <member name="P:Atom.IPhoneable.PhoneNumber">
            <inheritdoc cref="P:Atom.IReadOnlyPhoneable.PhoneNumber"/>
        </member>
        <member name="P:Atom.IPhoneable.Atom#IReadOnlyPhoneable#PhoneNumber">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IPrioritizable">
            <summary>
            Provides abstractions for an object that can be noted
            </summary>
        </member>
        <member name="P:Atom.IPrioritizable.Priority">
            <inheritdoc cref="P:Atom.IReadOnlyPrioritizable.Priority"/>
        </member>
        <member name="P:Atom.IPrioritizable.Atom#IReadOnlyPrioritizable#Priority">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IRangeable`1">
            <summary>
            Provides abstractions for an object that has assignable values that define a range
            </summary>
            <typeparam name="T">The type of the values</typeparam>
        </member>
        <member name="P:Atom.IRangeable`1.Minimum">
            <inheritdoc cref="P:Atom.IReadOnlyRangeable`1.Minimum"/>
        </member>
        <member name="P:Atom.IRangeable`1.Maximum">
            <inheritdoc cref="P:Atom.IReadOnlyRangeable`1.Maximum"/>
        </member>
        <member name="P:Atom.IRangeable`1.Atom#IReadOnlyRangeable{T}#Minimum">
            <inheritdoc/>
        </member>
        <member name="P:Atom.IRangeable`1.Atom#IReadOnlyRangeable{T}#Maximum">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IRateable">
            <summary>
            Provides abstractions for an object that has an assignable rate
            </summary>
        </member>
        <member name="P:Atom.IRateable.Rate">
            <inheritdoc cref="P:Atom.IReadOnlyRateable.Rate"/>
        </member>
        <member name="P:Atom.IRateable.Atom#IReadOnlyRateable#Rate">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IReadOnlyCommissionable">
            <summary>
            Provides abstractions for an object that contains information related to commissions
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyCommissionable.CommissionAmount">
            <summary>
            The sum of the flat rate and the percent commission
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyCommissionable.FlatRateCommissionAmount">
            <summary>
            The amount accumulated by the flat rate commission
            </summary>
        </member>
        <member name="P:Atom.IReadOnlyCommissionable.PercentCommissionAmount">
            <summary>
            The amount accumulated by the percent commission
            </summary>
        </member>
        <member name="T:Atom.ISearchLimitable">
            <summary>
            Provides abstractions for an object that offers filtering options based on a string value.
            </summary>
        </member>
        <member name="P:Atom.ISearchLimitable.Search">
            <inheritdoc cref="P:Atom.IReadOnlySearchLimitable.Search"/>
        </member>
        <member name="P:Atom.ISearchLimitable.Atom#IReadOnlySearchLimitable#Search">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ISmallDescriptable">
            <summary>
            Provides abstractions for an object that can be described using a condensed description
            </summary>
        </member>
        <member name="P:Atom.ISmallDescriptable.SmallDescription">
            <inheritdoc cref="P:Atom.IReadOnlySmallDescriptable.SmallDescription"/>
        </member>
        <member name="P:Atom.ISmallDescriptable.Atom#IReadOnlySmallDescriptable#SmallDescription">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IStringFormattable">
            <summary>
            Provides abstractions an object that can has an assignable input formatter
            </summary>
        </member>
        <member name="P:Atom.IStringFormattable.InputFormatter">
            <inheritdoc cref="P:Atom.IReadOnlyStringFormattable.InputFormatter"/>
        </member>
        <member name="P:Atom.IStringFormattable.Atom#IReadOnlyStringFormattable#InputFormatter">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ISuspendable">
            <summary>
            Provides abstractions for an object that can be suspended
            </summary>
        </member>
        <member name="P:Atom.ISuspendable.IsSuspended">
            <inheritdoc cref="P:Atom.IReadOnlySuspendable.IsSuspended"/>
        </member>
        <member name="P:Atom.ISuspendable.Atom#IReadOnlySuspendable#IsSuspended">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IValueable`1">
            <summary>
            Provides abstractions for an object that can be valued
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:Atom.IValueable`1.Value">
            <inheritdoc cref="P:Atom.IReadOnlyValueable`1.Value"/>
        </member>
        <member name="P:Atom.IValueable`1.Atom#IReadOnlyValueable{T}#Value">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IOrderedQueryableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.IOrderedQueryable`1"/>
            </summary>
        </member>
        <member name="M:Atom.IOrderedQueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Atom.OrderCondition)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="orderCondition">The order condition</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IPaginatableExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.IPaginatable"/>
            </summary>
        </member>
        <member name="M:Atom.IPaginatableExtensions.GetAll``1(``0)">
            <summary>
            Configures the specified <paramref name="paginatable"/> to a state where it
            requests all the available entries
            </summary>
            <typeparam name="T">The type of the paginatable</typeparam>
            <param name="paginatable">The paginatable</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IPayableExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.IPayable"/>
            </summary>
        </member>
        <member name="M:Atom.IPayableExtensions.TryNormalizePaidAmountBasedOnTolerance(Atom.IPayable,System.Decimal,System.Decimal)">
            <summary>
            Attempts to normalize the <see cref="P:Atom.IPayable.Amount"/> based on the specified <paramref name="owedAmount"/> and the specified <paramref name="tolerance"/>.
            </summary>
            <param name="owedAmount">The owed amount</param>
            <param name="payable">The payable</param>
            <param name="tolerance">The acceptable offset between the <paramref name="owedAmount"/> and the <see cref="P:Atom.IPayable.Amount"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IPayableExtensions.TryNormalizePaidAmountBasedOnTolerance(Atom.IPayable,System.Decimal,System.Collections.Generic.IEnumerable{Atom.IPayable},System.Decimal)">
            <summary>
            Attempts to normalize the <see cref="P:Atom.IPayable.Amount"/> based on the owed amount, that is calculated using the <paramref name="amount"/> that must be paid
            and the <paramref name="otherPayments"/>, and the specified <paramref name="tolerance"/>
            </summary>
            <param name="payable">The payable</param>
            <param name="amount">The amount that must be paid</param>
            <param name="otherPayments">The other payments</param>
            <param name="tolerance">The acceptable offset between the owed amount and the <see cref="P:Atom.IPayable.Amount"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.IQueryableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
        </member>
        <member name="F:Atom.IQueryableExtensions.PropertyPathSeparatorCharacter">
            <summary>
            The character used for determining the property path
            </summary>
        </member>
        <member name="P:Atom.IQueryableExtensions.IsArgumentsValidationForDataStoragesActive">
            <summary>
            A flag indicating whether the validation of the arguments related to data storage queries
            is active or not
            </summary>
        </member>
        <member name="F:Atom.IQueryableExtensions.mContainsMethodInfo">
            <summary>
            Gets the <see cref="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"/> method info in the non generic state
            </summary>
        </member>
        <member name="F:Atom.IQueryableExtensions.mModelTypeToSortablePropertiesMapper">
            <summary>
            The properties of the models that are sortable
            </summary>
        </member>
        <member name="M:Atom.IQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Atom.OrderCondition)">
            <summary>
            Sorts the elements of a sequence
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="orderCondition">The order condition</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.UsePagination``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Attaches pagination rules to the specified <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of elements of the query</typeparam>
            <param name="source">A sequence of values.</param>
            <param name="pageIndex">The page index starting from 0</param>
            <param name="perPage">The maximum number of results</param>
            <param name="offset">The offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.UsePagination``2(System.Linq.IQueryable{``0},``1)">
            <summary>
            Attaches pagination rules to the specified <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the elements of the query</typeparam>
            <typeparam name="TArgs">The type of the arguments</typeparam>
            <param name="source">A sequence of values.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.UseSorting``1(System.Linq.IQueryable{``0},Atom.IOrderable,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Atom.OrderCondition)">
            <summary>
            Attached when needed ordering conditions to the specified <paramref name="source"/> using the rules specified in the <paramref name="orderable"/>
            </summary>
            <typeparam name="T">The type of the elements of the source</typeparam>
            <param name="source">A sequence of values.</param>
            <param name="orderable">An object that contains information related to the sorting of the results.</param>
            <param name="fallbackOrderExpression">The fallback order expression that is used if no <paramref name="orderable"/> is specified or if the <paramref name="orderable"/> doesn't contain any rules</param>
            <param name="fallbackOrderCondition">The fallback order condition that is used if no <paramref name="orderable"/> is specified or if the <paramref name="orderable"/> doesn't contain any rules</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.UseSorting``1(System.Linq.IQueryable{``0},Atom.IOrderable)">
            <summary>
            Attached when needed ordering conditions to the specified <paramref name="source"/> using the rules specified in the <paramref name="orderable"/>
            </summary>
            <typeparam name="T">The type of the elements of the source</typeparam>
            <param name="source">A sequence of values.</param>
            <param name="orderable">An object that contains information related to the sorting of the results.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.UseFiltering``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},Atom.Condition)">
            <summary>
            Attaches the specified <paramref name="filters"/> to the specified <paramref name="source"/> based on the specified <paramref name="condition"/>
            </summary>
            <typeparam name="T">The type of the elements of the source</typeparam>
            <param name="source">A sequence of values.</param>
            <param name="filters">The filters.</param>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.UseFiltering``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},Atom.IConditionable)">
            <summary>
            Attaches the specified <paramref name="filters"/> to the specified <paramref name="source"/> based on the specified <paramref name="conditionable"/>
            </summary>
            <typeparam name="T">The type of the elements of the source</typeparam>
            <param name="source">A sequence of values.</param>
            <param name="filters">The filters.</param>
            <param name="conditionable">The conditionable.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateConditionalExpression``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},Atom.Condition)">
            <summary>
            Creates and returns the conditional expression that the result of the merge of the specified <paramref name="filters"/>
            based on the specified <paramref name="condition"/>
            </summary>
            <typeparam name="T">The type of the elements of the source</typeparam>
            <param name="filters">The filters</param>
            <param name="condition">The condition</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddRangeFilters``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{``1},System.Nullable{``1})">
            <summary>
            Adds range filters to the property selected by the specified <paramref name="propertySelector"/> using the nullability
            of the <paramref name="minValue"/> and the <paramref name="maxValue"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="minValue">The min value</param>
            <param name="maxValue">The max value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddRangeFilters``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Nullable{``1},System.Nullable{``1})">
            <summary>
            Adds range filters to the property selected by the specified <paramref name="propertySelector"/> using the nullability
            of the <paramref name="minValue"/> and the <paramref name="maxValue"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="minValue">The min value</param>
            <param name="maxValue">The max value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddEqualsFilter``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{``1},System.Boolean,System.String)">
            <summary>
            Adds an equals filter for the property selected by the specified <paramref name="propertySelector"/> based on the nullability
            of the <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="value">The value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="argumentName">The name of the argument that is passed as the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddEqualsFilter``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Nullable{``1},System.Boolean,System.String)">
            <summary>
            Adds an equals filter for the property selected by the specified <paramref name="propertySelector"/> based on the nullability
            of the <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="value">The value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="argumentName">The name of the argument that is passed as the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddAfterBeforeFilters``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.DateTimeOffset}},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Boolean,System.String,System.String)">
            <summary>
            Adds the after and before filters for the property selected by the specified <paramref name="propertySelector"/> based on the nullability
            of the <paramref name="after"/> and <paramref name="before"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="after">The after value</param>
            <param name="before">The before value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="afterArgumentName">The name of the argument that is passed as the <paramref name="afterArgumentName"/></param>
            <param name="beforeArgumentName">The name of the argument that is passed as the <paramref name="beforeArgumentName"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddAfterBeforeFilters``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTimeOffset}}},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Boolean,System.String,System.String)">
            <summary>
            Adds the after and before filters for the property selected by the specified <paramref name="propertySelector"/> based on the nullability
            of the <paramref name="after"/> and <paramref name="before"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="after">The after value</param>
            <param name="before">The before value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="afterArgumentName">The name of the argument that is passed as the <paramref name="afterArgumentName"/></param>
            <param name="beforeArgumentName">The name of the argument that is passed as the <paramref name="beforeArgumentName"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddAfterBeforeFilters``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.DateTime}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.String,System.String)">
            <summary>
            Adds the after and before filters for the property selected by the specified <paramref name="propertySelector"/> based on the nullability
            of the <paramref name="after"/> and <paramref name="before"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="after">The after value</param>
            <param name="before">The before value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="afterArgumentName">The name of the argument that is passed as the <paramref name="afterArgumentName"/></param>
            <param name="beforeArgumentName">The name of the argument that is passed as the <paramref name="beforeArgumentName"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddAfterBeforeFilters``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTime}}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.String,System.String)">
            <summary>
            Adds the after and before filters for the property selected by the specified <paramref name="propertySelector"/> based on the nullability
            of the <paramref name="after"/> and <paramref name="before"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="after">The after value</param>
            <param name="before">The before value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="afterArgumentName">The name of the argument that is passed as the <paramref name="afterArgumentName"/></param>
            <param name="beforeArgumentName">The name of the argument that is passed as the <paramref name="beforeArgumentName"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.SByte}},System.Nullable{System.SByte},System.Nullable{System.SByte},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Byte}},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.UInt16}},System.Nullable{System.UInt16},System.Nullable{System.UInt16},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.UInt32}},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.UInt64}},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.SByte}}},System.Nullable{System.SByte},System.Nullable{System.SByte},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Byte}}},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt16}}},System.Nullable{System.UInt16},System.Nullable{System.UInt16},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt32}}},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt64}}},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddMinMaxFilter``1(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean,System.String,System.String)">
            <summary>
            Adds the min and max filters for the property selected by the specified <paramref name="propertySelector"/> based on then nullability
            of the <paramref name="min"/> and <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddIncludeExcludeFilters``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Boolean,System.String,System.String)">
            <summary>
            Adds the include and exclude filters for the property selected by the specified <paramref name="propertySelector"/> based on the nullability and the emptiness
            of the <paramref name="include"/> and the <paramref name="exclude"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query.</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="include">The include value</param>
            <param name="exclude">The exclude value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="includeArgumentName">The name of the argument that is passed as the <paramref name="include"/></param>
            <param name="excludeArgumentName">The name of the argument that is passed as the <paramref name="exclude"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.ValidateIncludeExcludeFilters(System.Linq.Expressions.LambdaExpression,System.Boolean,System.String,System.String)">
            <summary>
            Ensures that the inserted arguments used for filtering are targeting the correct property
            </summary>
            <param name="propertySelector">The property selector</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="includeArgumentName">The include argument name</param>
            <param name="excludeArgumentName">The exclude argument name</param>
        </member>
        <member name="M:Atom.IQueryableExtensions.ValidateEqualsFilter(System.Linq.Expressions.LambdaExpression,System.Boolean,System.String)">
            <summary>
            Ensures that the inserted argument used for filtering is targeting the correct property
            </summary>
            <param name="propertySelector">The property selector</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="argumentName">The argument name</param>
        </member>
        <member name="M:Atom.IQueryableExtensions.ValidateMinMaxFilters(System.Linq.Expressions.LambdaExpression,System.Boolean,System.String,System.String)">
            <summary>
            Ensures that the inserted arguments used for filtering are targeting correct property
            </summary>
            <param name="propertySelector">The property selector</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The min argument name</param>
            <param name="maxArgumentName">The max argument name</param>
        </member>
        <member name="M:Atom.IQueryableExtensions.ValidateAfterBeforeFilters(System.Linq.Expressions.LambdaExpression,System.Boolean,System.String,System.String)">
            <summary>
            Ensures that the inserted arguments used for filtering are targeting the correct property
            </summary>
            <param name="propertySelector">The property selector</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="afterArgumentName">The after argument name</param>
            <param name="beforeArgumentName">The before argument name</param>
        </member>
        <member name="M:Atom.IQueryableExtensions.TryCreatePropertyExpression``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}@)">
            <summary>
            Creates and returns the expression that will be used to sort based on the property with <paramref name="propertyName"/> of the <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the model</typeparam>
            <param name="propertyName">The property name</param>
            <param name="result">The result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateEqualsFilter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Creates and returns an equals filter using the specified <paramref name="propertySelector"/> and the specified <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the values of the queryable</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="propertySelector">Selects the property of the <typeparamref name="T"/> that will be used for the comparison</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateEqualsFilter``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},``1)">
            <summary>
            Creates and returns a an equals filter using the specified <paramref name="propertySelector"/> and the specified <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the values of the queryable</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="propertySelector">Selects the property of the <typeparamref name="T"/> that will be used for the comparison</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateGreaterThanOrEqualsFilter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Creates and returns a greater than or equals filter using the specified <paramref name="propertySelector"/> and the specified <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the values of the queryable</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="propertySelector">Selects the property of the <typeparamref name="T"/> that will be used for the comparison</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateGreaterThanOrEqualsFilter``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},``1)">
            <summary>
            Creates and returns a greater than or equals filter using the specified <paramref name="propertySelector"/> and the specified <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the values of the queryable</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="propertySelector">Selects the property of the <typeparamref name="T"/> that will be used for the comparison</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateLessThanOrEqualsFilter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Creates and returns a less than or equals filter using the specified <paramref name="propertySelector"/> and the specified <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the values of the queryable</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="propertySelector">Selects the property of the <typeparamref name="T"/> that will be used for the comparison</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateLessThanOrEqualsFilter``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},``1)">
            <summary>
            Creates and returns a less than or equals filter using the specified <paramref name="propertySelector"/> and the specified <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the values of the queryable</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="propertySelector">Selects the property of the <typeparamref name="T"/> that will be used for the comparison</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateIncludeFilter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Creates and returns an include filter using the specified <paramref name="propertySelector"/> and the specified <paramref name="values"/>
            </summary>
            <typeparam name="T">The type of the values of the queryable</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <param name="propertySelector">Selects the property of the <typeparamref name="T"/> that will be used in the contains method</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.CreateExcludeFilter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Creates and returns an exclude filter using the specified <paramref name="propertySelector"/> and the specified <paramref name="values"/>
            </summary>
            <typeparam name="T">The type of the values of the queryable</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <param name="propertySelector">Selects the property of the <typeparamref name="T"/> that will be used in the contains method</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddNumericRangeFilters``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{``1},System.Nullable{``1},System.Boolean,System.String,System.String)">
            <summary>
            Adds range filters to the property selected by the specified <paramref name="propertySelector"/> using the nullability
            of the <paramref name="min"/> and the <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddDateRangeFilters``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{``1},System.Nullable{``1},System.Boolean,System.String,System.String)">
            <summary>
            Adds range filters to the property selected by the specified <paramref name="propertySelector"/> using the nullability
            of the <paramref name="after"/> and the <paramref name="before"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="after">The min value</param>
            <param name="before">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="afterArgumentName">The name of the argument that is passed as the <paramref name="after"/></param>
            <param name="beforeArgumentName">The name of the argument that is passed as the <paramref name="before"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddDateRangeFilters``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Nullable{``1},System.Nullable{``1},System.Boolean,System.String,System.String)">
            <summary>
            Adds range filters to the property selected by the specified <paramref name="propertySelector"/> using the nullability
            of the <paramref name="after"/> and the <paramref name="before"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="after">The min value</param>
            <param name="before">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="afterArgumentName">The name of the argument that is passed as the <paramref name="after"/></param>
            <param name="beforeArgumentName">The name of the argument that is passed as the <paramref name="before"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.IQueryableExtensions.AddNumericRangeFilters``2(System.Collections.Generic.List{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Nullable{``1},System.Nullable{``1},System.Boolean,System.String,System.String)">
            <summary>
            Adds range filters to the property selected by the specified <paramref name="propertySelector"/> using the nullability
            of the <paramref name="min"/> and the <paramref name="max"/> values
            </summary>
            <typeparam name="T">The type of the elements of the query</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="filters">The filters</param>
            <param name="propertySelector">The property selector</param>
            <param name="min">The min value</param>
            <param name="max">The max value</param>
            <param name="useValidation">A flag indicating whether validation should be used or not</param>
            <param name="minArgumentName">The name of the argument that is passed as the <paramref name="min"/></param>
            <param name="maxArgumentName">The name of the argument that is passed as the <paramref name="max"/></param>
            <returns></returns>
        </member>
        <member name="P:Atom.IQueryableExtensions.RangeBasedExpressionMap`1.Expression">
            <summary>
            The range based expression
            </summary>
        </member>
        <member name="P:Atom.IQueryableExtensions.RangeBasedExpressionMap`1.PropertyName">
            <summary>
            The property that is used by the range based expression
            </summary>
        </member>
        <member name="P:Atom.IQueryableExtensions.RangeBasedExpressionMap`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.IQueryableExtensions.RangeBasedExpressionMap`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Default constructor
            </summary>
            <param name="expression">The range based expression</param>
        </member>
        <member name="T:Atom.IRangeableExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.IReadOnlyRangeable`1"/>
            </summary>
        </member>
        <member name="M:Atom.IRangeableExtensions.ContainsValue``1(Atom.IReadOnlyRangeable{``0},``0)">
            <summary>
            Determines if the provided value is inside the <paramref name="rangeable"/>.
            </summary>
            <param name="rangeable">The rangeable</param>
            <param name="value">The range to test</param>
        </member>
        <member name="M:Atom.IRangeableExtensions.Contains``1(Atom.IReadOnlyRangeable{``0},Atom.IReadOnlyRangeable{``0})">
            <summary>
            Determines if the specified <paramref name="second"/> rangeable is inside the bounds of the <paramref name="first"/> rangeable.
            </summary>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
        </member>
        <member name="M:Atom.IRangeableExtensions.IntersectsWith``1(Atom.IReadOnlyRangeable{``0},Atom.IReadOnlyRangeable{``0})">
            <summary>
            Determines if the specified <paramref name="second"/> rangeable intersects with the <paramref name="first"/> rangeable.
            </summary>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.OverlapsWith``1(Atom.IReadOnlyRangeable{``0},Atom.IReadOnlyRangeable{``0})">
            <summary>
            Determines if the specified <paramref name="second"/> rangeable is overlapping with the <paramref name="first"/> rangeable.
            A range overlaps with another range either if they intersect or if the one range is contained in the other.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.GetMin``1(Atom.IReadOnlyRangeable{``0},Atom.IReadOnlyRangeable{``0})">
            <summary>
            Gets the minimum value between the specified rangeables
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.GetMax``1(Atom.IReadOnlyRangeable{``0},Atom.IReadOnlyRangeable{``0})">
            <summary>
            Gets the maximum value between the specified rangeables
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.MergeWith``2(Atom.IReadOnlyRangeable{``1},Atom.IReadOnlyRangeable{``1},System.Func{``1,``1,``0})">
            <summary>
            Merges the <paramref name="first"/> rangeable with the <paramref name="second"/> rangeable.
            </summary>
            <typeparam name="TRangeable">The type of the rangeable</typeparam>
            <typeparam name="T">The </typeparam>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <param name="implementationFactory">Creates and returns a rangeable using the specified minimum and maximum values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.MergeOverlapping``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1,``1,``0})">
            <summary>
            Merges the rangeables that are overlapping to each other and creates new rangeables.
            Input: 2     5      10     15
                   |-----|       |-----|
                       3     8         15    20
                       |-----|         |-----|
            Output: 2         8 10           20
                    |---------|  |-----------|
            </summary>
            <typeparam name="TRangeable">The type of the rangeable</typeparam>
            <typeparam name="T">The type of the values of the rangeables</typeparam>
            <param name="source">The rangeables to merge</param>
            <param name="implementationFactory">Creates and returns a rangeable using the specified minimum and maximum values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.MergeOverlapping(System.Collections.Generic.IEnumerable{Atom.TimeRange})">
            <summary>
            Merges the rangeables that are overlapping to each other
            </summary>
            <param name="source">The rangeables to merge</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.SplitOverlapping``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``1,``0})">
            <summary>
            Splits the rangeables that are overlapping with each other and creates new rangeables.
            Input: 0     5
                   |-----|
                      3     8
                      |-----|
            Output: 0   3 3  5 5   8
                    |---| |--| |---|
            </summary>
            <typeparam name="TRangeable">The type of the values of the rangeables</typeparam>
            <typeparam name="T">The type of the values of the rangeables</typeparam>
            <param name="source">The rangeables to split</param>
            <param name="implementationFactory">Creates and returns a rangeable using the specified minimum and maximum values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.SplitOverlapping(System.Collections.Generic.IEnumerable{Atom.TimeRange})">
            <summary>
            Splits the rangeables that are overlapping with each other and creates new rangeables.
            Input: 0     5
                   |-----|
                      3     8
                      |-----|
            Output: 0   3 3  5 5   8
                    |---| |--| |---|
            </summary>
            <param name="source">The rangeables to split</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.SplitOverlappingByWeight``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``1,``0})">
            <summary>
            Splits the rangeables that are overlapping with each other and creates new rangeables
            and assigns them a weight based on the number of overlaps.
            </summary>
            <typeparam name="TRangeable">The type of the values of the rangeables</typeparam>
            <typeparam name="T">The type of the values of the rangeables</typeparam>
            <param name="source">The rangeables to split</param>
            <param name="implementationFactory">Creates and returns a rangeable using the specified minimum and maximum values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.SplitOverlappingByWeight(System.Collections.Generic.IEnumerable{Atom.TimeRange})">
            <summary>
            Splits the rangeables that are overlapping with each other and creates new rangeables
            and assigns them a weight based on the number of overlaps.
            </summary>
            <param name="source">The rangeables to split</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.Subtract``2(``0,``0,System.Func{``1,``1,``0})">
            <summary>
            Subtracts the <paramref name="second"/> rangeable from the <paramref name="first"/> one
            </summary>
            <typeparam name="TRangeable">The type of the rangeable</typeparam>
            <typeparam name="T">The type of the values of the rangeables</typeparam>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <param name="implementationFactory">Creates and returns a rangeable using the specified minimum and maximum values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.Subtract(Atom.TimeRange,Atom.TimeRange)">
            <summary>
            Subtracts the <paramref name="second"/> rangeable from the <paramref name="first"/> one
            </summary>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.GetIntersection``2(Atom.IReadOnlyRangeable{``1},Atom.IReadOnlyRangeable{``1},System.Func{``1,``1,``0})">
            <summary>
            Gets the range that represents the intersection (common area) of the specified <paramref name="first"/>
            and the <paramref name="second"/> values
            </summary>
            <typeparam name="TRangeable">The type of the rangeable</typeparam>
            <typeparam name="T">The type of the values of the rangeables</typeparam>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <param name="implementationFactory">Creates and returns a rangeable using the specified minimum and maximum values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IRangeableExtensions.GetIntersection(Atom.TimeRange,Atom.TimeRange)">
            <summary>
            Gets the range that represents the intersection (common area) of the specified <paramref name="first"/>
            and the <paramref name="second"/> values
            </summary>
            <param name="first">The first rangeable</param>
            <param name="second">The second rangeable</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ListExtensions">
            <summary>
            Extension methods for lists
            </summary>
        </member>
        <member name="M:Atom.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps the position of the item with index <paramref name="indexA"/> with the item with index <paramref name="indexB"/>
            NOTE: Using this method when the target list is an observable collection might cause problems 
                  because the collection changed event will get fired twice and on the first time 
                  the item at <paramref name="indexA"/> and the item at <paramref name="indexB"/> will be the same!
            </summary>
            <typeparam name="T">The type of items that the list contains</typeparam>
            <param name="list">The list</param>
            <param name="indexA">The index of the first item</param>
            <param name="indexB">The index of the second item</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ListExtensions.Split``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Splits the specified <paramref name="list"/> into sublists of 
            the specified <paramref name="size"/>
            </summary>
            <typeparam name="T">The type of the items of the list</typeparam>
            <param name="list">The list to split</param>
            <param name="size">The maximum size of each sub list</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ListWithItemsBasedEquality`1">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> that determines equality with other collections not by reference, but by their contents
            </summary>
            <typeparam name="T">The type of the items</typeparam>
        </member>
        <member name="P:Atom.ListWithItemsBasedEquality`1.ShouldUseSequenceBasedEquality">
            <summary>
            A flag indicating whether sequence based equality should be used or not
            </summary>
        </member>
        <member name="M:Atom.ListWithItemsBasedEquality`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ListWithItemsBasedEquality`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Collection based constructor
            </summary>
            <param name="collection">The collection</param>
        </member>
        <member name="M:Atom.ListWithItemsBasedEquality`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ListWithItemsBasedEquality`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ListWithItemsBasedEquality`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.BaseLocalization`1">
            <summary>
            The base for all the localization resources
            </summary>
        </member>
        <member name="F:Atom.BaseLocalization`1.mInstance">
            <summary>
            The member of the <see cref="P:Atom.BaseLocalization`1.Instance"/> property
            </summary>
        </member>
        <member name="P:Atom.BaseLocalization`1.Instance">
            <summary>
            The single instance of the <typeparamref name="TSelf"/>
            </summary>
        </member>
        <member name="P:Atom.BaseLocalization`1.Atom#IReadOnlyLanguageable#Language">
            <inheritdoc/>
        </member>
        <member name="M:Atom.BaseLocalization`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.BaseLocalization`1.GetLanguage">
            <summary>
            Gets the language
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.EnglishLocalization">
            <summary>
            English localization resources
            </summary>
        </member>
        <member name="M:Atom.EnglishLocalization.GetLanguage">
            <inheritdoc/>
        </member>
        <member name="T:Atom.GreekLocalization">
            <summary>
            Greek localization resources
            </summary>
        </member>
        <member name="M:Atom.GreekLocalization.GetLanguage">
            <inheritdoc/>
        </member>
        <member name="T:Atom.ILocalization">
            <summary>
            Provides abstractions for localization resources
            </summary>
        </member>
        <member name="T:Atom.LocalizationConstants">
            <summary>
            Constants related to localization
            </summary>
        </member>
        <member name="F:Atom.LocalizationConstants.Culture">
            <summary>
            The culture info that is used by the ToString methods
            </summary>
        </member>
        <member name="F:Atom.LocalizationConstants.ISO8601Format">
            <summary>
            The format that is used when represent values using the ISO8601 standard
            </summary>
        </member>
        <member name="T:Atom.LocalizationExtensions">
            <summary>
            Extension methods associated with localization
            </summary>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Byte)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Byte})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.SByte)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.SByte})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Int32})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.UInt32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.UInt32})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Double)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Double})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Single)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Single})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Decimal)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Decimal})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Int64)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Int64})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.UInt64)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.UInt64})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Int16)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Int16})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.UInt16)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.UInt16})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Byte)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.Byte})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.SByte)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.SByte})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.Int32})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.UInt32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.UInt32})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Single)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.Single})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Double)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.Double})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Decimal)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.Decimal})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Int64)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.Int64})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.UInt64)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.UInt64})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Int16)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.Int16})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.UInt16)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationExtensions.ToPercentage(System.Nullable{System.UInt16})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.LocalizationHelpers">
            <summary>
            Helpers related to localization
            </summary>
        </member>
        <member name="M:Atom.LocalizationHelpers.GetCurrencySymbol">
            <summary>
            Gets the currency symbol of the local machine
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.LocalizationProvider`1">
            <summary>
            Provides methods for registering and the retrieving localization resources
            </summary>
            <typeparam name="TLocalization">The type of the localizations</typeparam>
        </member>
        <member name="F:Atom.LocalizationProvider`1.mLocalizations">
            <summary>
            The registered localizations
            </summary>
        </member>
        <member name="P:Atom.LocalizationProvider`1.FallbackLocalization">
            <summary>
            The fallback localization
            </summary>
        </member>
        <member name="M:Atom.LocalizationProvider`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.LocalizationProvider`1.RegisterLocalization(`0)">
            <summary>
            Registers the specified <paramref name="localization"/>
            </summary>
            <param name="localization">The localization</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationProvider`1.GetLocalization(Atom.LanguageCode)">
            <summary>
            Gets a localization for the specified <paramref name="language"/>
            </summary>
            <param name="language">The language</param>
            <returns></returns>
        </member>
        <member name="M:Atom.LocalizationProvider`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Atom.LongExtensions">
            <summary>
            Extension methods for <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="M:Atom.LongExtensions.ToEnumerableString(System.Int64,System.String,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="count"/>
            using the specified forms
            </summary>
            <param name="count">The number of items</param>
            <param name="singularForm">Returns the string that represents the singular form</param>
            <param name="pluralForm">Returns the string that represents the plural form</param>
            <param name="zeroForm">Returns the string that represents the zero form</param>
            <returns></returns>
        </member>
        <member name="T:Atom.BaseMap`1">
            <summary>
            The base for all the maps
            </summary>
            <typeparam name="T">The type of the identifier</typeparam>
        </member>
        <member name="P:Atom.BaseMap`1.Id">
            <summary>
            The unique identifier of this map
            </summary>
        </member>
        <member name="M:Atom.BaseMap`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
            <param name="id">The unique identifier of this map</param>
        </member>
        <member name="M:Atom.BaseMap`1.IsIdentifierValid(`0)">
            <summary>
            Checks whether the inserted identifier is valid or not
            </summary>
            <param name="id">The identifier</param>
            <returns></returns>
        </member>
        <member name="T:Atom.BaseMap">
            <summary>
            The base for all the maps with an identifier of type <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:Atom.BaseMap.#ctor(System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="id">The unique identifier of this map</param>
        </member>
        <member name="T:Atom.IClonablePropertyMapper`1">
            <summary>
            Provides abstractions for a property mapper that gives access to its maps
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="T:Atom.IPropertyMapper">
            <summary>
            Provides abstractions for a property mapper when the type of the mapped model is unknown
            </summary>
        </member>
        <member name="P:Atom.IPropertyMapper.ModelType">
            <summary>
            The type of the model whose properties are used for setting maps
            </summary>
        </member>
        <member name="P:Atom.IPropertyMapper.Mapper">
            <summary>
            The mapper.
            NOTE: This method should created a copy from the original mapper to prevent its external manipulation
            </summary>
        </member>
        <member name="M:Atom.IPropertyMapper.UnsafeMap(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IPropertyMapper.UnsafeGet(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the specified <paramref name="id"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IPropertyMapper.SetOptional(System.Object)">
            <summary>
            Declares the property map collection with the specified <paramref name="id"/> as optional,
            meaning that not all the properties of the model are required to be mapped
            to the map collection
            </summary>
            <param name="id">The id of the map collection</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IPropertyMapper`1">
            <summary>
            Provides abstractions for a property mapper
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Atom.IPropertyMapper`1.Map(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the property targeted by the specified <paramref name="propertySelector"/>
            and with the specified <paramref name="value"/>.
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IPropertyMapper`1.Get(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Gets the value of the property targeted by the <paramref name="propertySelector"/>
            from the map collection with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="T:Atom.PropertyMapper`1">
            <summary>
            Maps the properties of the <typeparamref name="TClass"/> with values
            to map collections identified by unique ids
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="P:Atom.PropertyMapper`1.ModelType">
            <summary>
            The type of the model whose properties are used for setting maps
            </summary>
        </member>
        <member name="F:Atom.PropertyMapper`1.mMapper">
            <summary>
            The mapper
            </summary>
        </member>
        <member name="F:Atom.PropertyMapper`1.mOptionalPropertyMapIDs">
            <summary>
            The ids of the maps that do not require to have all the properties of the <typeparamref name="TClass"/> mapped
            </summary>
        </member>
        <member name="P:Atom.PropertyMapper`1.Mapper">
            <summary>
            The mapper.
            NOTE: This method should created a copy from the original mapper to prevent its external manipulation
            </summary>
        </member>
        <member name="M:Atom.PropertyMapper`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.PropertyMapper`1.CopyMapsFrom(Atom.IClonablePropertyMapper{`0})">
            <summary>
            Copies the maps from the specified <paramref name="mapper"/>
            </summary>
            <param name="mapper">The mapper</param>
        </member>
        <member name="M:Atom.PropertyMapper`1.Map(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the property targeted by the specified <paramref name="propertySelector"/>
            and with the specified <paramref name="value"/>.
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapper`1.Atom#IPropertyMapper{TClass}#Map(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the property targeted by the specified <paramref name="propertySelector"/>
            and with the specified <paramref name="value"/>.
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapper`1.UnsafeMap(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapper`1.Atom#IPropertyMapper#UnsafeMap(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapper`1.SetOptional(System.Object)">
            <summary>
            Declares the property map collection with the specified <paramref name="id"/> as optional,
            meaning that not all the properties of the <typeparamref name="TClass"/> are required to be mapped
            to the map collection
            </summary>
            <param name="id">The id of the map collection</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapper`1.Atom#IPropertyMapper#SetOptional(System.Object)">
            <summary>
            Declares the property map collection with the specified <paramref name="id"/> as optional,
            meaning that not all the properties of the <typeparamref name="TClass"/> are required to be mapped
            to the map collection
            </summary>
            <param name="id">The id of the map collection</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapper`1.Get(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Gets the value of the property targeted by the <paramref name="propertySelector"/>
            from the map collection with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapper`1.UnsafeGet(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the specified <paramref name="id"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapper`1.Atom#IPropertyMapper#UnsafeGet(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the specified <paramref name="id"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="T:Atom.PropertyMapperExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.PropertyMapper`1"/>
            </summary>
        </member>
        <member name="F:Atom.PropertyMapperExtensions.Title">
            <summary>
            The id of a maps category that contains titles
            </summary>
        </member>
        <member name="F:Atom.PropertyMapperExtensions.Description">
            <summary>
            The id of a maps category that contains descriptions
            </summary>
        </member>
        <member name="F:Atom.PropertyMapperExtensions.Size">
            <summary>
            The id of a maps category that contains sizes
            </summary>
        </member>
        <member name="F:Atom.PropertyMapperExtensions.Comparer">
            <summary>
            The id of a maps category that contains comparers
            </summary>
        </member>
        <member name="F:Atom.PropertyMapperExtensions.Category">
            <summary>
            The id of the maps category that contains category names
            </summary>
        </member>
        <member name="F:Atom.PropertyMapperExtensions.Ignore">
            <summary>
            The id of the ignore category
            </summary>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapTitle``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Title"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapTitle``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Title"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with the specified <paramref name="value"/>.
            </summary>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapDescription``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Description"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapDescription``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Description"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with the specified <paramref name="value"/>.
            </summary>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapSize``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo,System.UInt32)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Size"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapSize``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.UInt32)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Size"/>' for the property targeted by the 
            specified <paramref name="targetpropertySelector"/> and with the specified <paramref name="value"/>.
            </summary>
            <param name="mapper">The mapper</param>
            <param name="targetpropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapComparer``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Comparer"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with the specified <paramref name="value"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapComparer``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Comparer"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapNullableComparer``2(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Comparer"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with a <see cref="T:Atom.NullableComparableComparer`1"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <typeparam name="TKey">The type of the nullable struct</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapEnumerableComparer``2(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Comparer"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with a <see cref="T:Atom.LengthBasedEnumerableComparer"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <typeparam name="TKey">The type of the enumerable</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapCategory``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Category"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with the specified <paramref name="categoryName"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="categoryName">The name of the category</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapCategory``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Category"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="categoryName"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="categoryName">The name of the category</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapCategory``1(Atom.PropertyMapper{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Category"/>' for the properties targeted by the 
            specified <paramref name="targetPropertySelectors"/> and with the specified <paramref name="categoryName"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="categoryName">The name of the category</param>
            <param name="targetPropertySelectors">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapIgnore``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Ignore"/>'
            for the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.MapIgnore``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.PropertyMapperExtensions.Ignore"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/>.
            </summary>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetTitle``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Title"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetTitle``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Title"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetDescription``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Description"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetDescription``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Description"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetSize``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo,System.UInt32)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Size"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetSize``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.UInt32)">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Size"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetComparer``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Comparer"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetComparer``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Comparer"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetCategory``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Category"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetCategory``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Category"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetIgnore``1(Atom.PropertyMapper{``0},System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Ignore"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyMapperExtensions.GetIgnore``1(Atom.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.PropertyMapperExtensions.Ignore"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.BasePropertyMap">
            <summary>
            The base for every property map
            </summary>
        </member>
        <member name="P:Atom.BasePropertyMap.Property">
            <summary>
            The target property
            </summary>
        </member>
        <member name="M:Atom.BasePropertyMap.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
        </member>
        <member name="M:Atom.BasePropertyMap.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Atom.BasePropertyMap.DuplicateMap``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Checks if there is already a map of the specified type for the specified property
            </summary>
            <typeparam name="TMap">he type of the map</typeparam>
            <param name="maps">The collection of the maps</param>
            <param name="propertyName">The target property</param>
            <returns></returns>
        </member>
        <member name="T:Atom.BasePropertyTranslationMap">
            <summary>
            The base for every translation map
            </summary>
        </member>
        <member name="M:Atom.BasePropertyTranslationMap.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
        </member>
        <member name="M:Atom.BasePropertyTranslationMap.TranslateString(System.Object,System.Object)">
            <summary>
            Translates the given value and returns the requested result in a form of a <see cref="T:System.String"/>
            </summary>
            <param name="value">The value to translate</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.BasePropertyTranslationMap.Translate(System.Object,System.Object)">
            <summary>
            Translates the given value and returns the requested result in a form of a <see cref="T:System.Object"/>
            </summary>
            <param name="value">The value to translate</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.BasePropertyTranslationMap`2">
            <summary>
            The base for every translation map
            </summary>
            <typeparam name="TOldValue">The type of the target value</typeparam>
            <typeparam name="TNewValue">The type of the value that the <typeparamref name="TOldValue"/> gets translated to</typeparam>
        </member>
        <member name="F:Atom.BasePropertyTranslationMap`2.mTranslator">
            <summary>
            The translator
            </summary>
        </member>
        <member name="M:Atom.BasePropertyTranslationMap`2.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,`0,`1})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translator">The translator</param>
        </member>
        <member name="M:Atom.BasePropertyTranslationMap`2.Translate(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.BasePropertyTranslationMap`2.TranslateSpecific(System.Object,`0)">
            <summary>
            Translates the given value and returns the requested result in a form of a <typeparamref name="TNewValue"/>
            </summary>
            <param name="value">The value to translate</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.BasePropertyTranslationMap`1">
            <summary>
            The base for every translation map
            </summary>
            <typeparam name="TOldValue">The type of the target value</typeparam>
        </member>
        <member name="M:Atom.BasePropertyTranslationMap`1.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,`0,System.Object})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translator">The translator</param>
        </member>
        <member name="T:Atom.StandardPropertyTranslationMap`1">
            <summary>
            The base for every translation map that translates a value to a <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Atom.StandardPropertyTranslationMap`1.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,`0,System.String})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translator">The translator</param>
        </member>
        <member name="M:Atom.StandardPropertyTranslationMap`1.TranslateSpecific(System.Object,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.DoubleObjectPropertyTranslationMap">
            <summary>
            A <see cref="T:Atom.BasePropertyMap"/> that contains translators from and to the property value
            </summary>
        </member>
        <member name="P:Atom.DoubleObjectPropertyTranslationMap.FromPropertyValueConverter">
            <summary>
            Converters the value of the property to an another type
            </summary>
        </member>
        <member name="P:Atom.DoubleObjectPropertyTranslationMap.ToPropertyValueConverter">
            <summary>
            Converts the inserted value to the type of the property value
            </summary>
        </member>
        <member name="M:Atom.DoubleObjectPropertyTranslationMap.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object},System.Func{System.Object,System.Object})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="fromPropertyValueConverter">Converters the value of the property to an another type</param>
            <param name="toPropertyValueConverter">Converts the inserted value to the type of the property value</param>
        </member>
        <member name="T:Atom.EventHandlerPropertyMap`1">
            <summary>
            Maps a property with an event handler whose event args are of type <typeparamref name="TClass"/>
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="P:Atom.EventHandlerPropertyMap`1.EventHandler">
            <summary>
            The event handler
            </summary>
        </member>
        <member name="M:Atom.EventHandlerPropertyMap`1.#ctor(System.Reflection.PropertyInfo,System.EventHandler{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="eventHandler">The event handler</param>
        </member>
        <member name="T:Atom.ObjectPropertyTranslationMap">
            <summary>
            Maps a <see cref="T:System.Object"/> to an another <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:Atom.ObjectPropertyTranslationMap.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translator">The translator</param>
        </member>
        <member name="T:Atom.PropertyToIntMap">
            <summary>
            Maps a property to an <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:Atom.PropertyToIntMap.Integer">
            <summary>
            The integer value
            </summary>
        </member>
        <member name="M:Atom.PropertyToIntMap.#ctor(System.Reflection.PropertyInfo,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="integer">The integer</param>
        </member>
        <member name="T:Atom.PropertyToNameMap">
            <summary>
            Maps a property to a custom name
            </summary>
        </member>
        <member name="P:Atom.PropertyToNameMap.Name">
            <summary>
            The custom name
            </summary>
        </member>
        <member name="M:Atom.PropertyToNameMap.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="name">The custom name</param>
        </member>
        <member name="T:Atom.PropertyToTextFormatterMap">
            <summary>
            Maps a property to a text formatter
            </summary>
        </member>
        <member name="P:Atom.PropertyToTextFormatterMap.Formatter">
            <summary>
            The text formatter
            </summary>
        </member>
        <member name="M:Atom.PropertyToTextFormatterMap.#ctor(System.Reflection.PropertyInfo,System.Func{System.String,System.String,System.String})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="formatter">The text formatter</param>
        </member>
        <member name="T:Atom.PropertyToTextMap">
            <summary>
            Maps a property to a custom text
            </summary>
        </member>
        <member name="P:Atom.PropertyToTextMap.Text">
            <summary>
            The Text
            </summary>
        </member>
        <member name="M:Atom.PropertyToTextMap.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="text">The text</param>
        </member>
        <member name="T:Atom.StringPropertyToTextValueMap">
            <summary>
            Maps a <see cref="T:System.String"/> property to a <see cref="P:Atom.StringPropertyToTextValueMap.TextValue"/> type
            </summary>
        </member>
        <member name="P:Atom.StringPropertyToTextValueMap.TextValue">
            <summary>
            The text value
            </summary>
        </member>
        <member name="M:Atom.StringPropertyToTextValueMap.#ctor(System.Reflection.PropertyInfo,Atom.TextValue)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="textValue">The text value</param>
        </member>
        <member name="T:Atom.ValidationPropertyMap">
            <summary>
            Maps a <see cref="P:Atom.ValidationPropertyMap.Validator"/> to a property that is used for validating its value
            </summary>
        </member>
        <member name="P:Atom.ValidationPropertyMap.Validator">
            <summary>
            The validator
            </summary>
        </member>
        <member name="M:Atom.ValidationPropertyMap.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,System.Boolean})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="validator">The validator</param>
        </member>
        <member name="T:Atom.ExtendedFileExtensionContentTypeProvider">
            <summary>
            An extended <see cref="T:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider"/>
            </summary>
        </member>
        <member name="M:Atom.ExtendedFileExtensionContentTypeProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.NumericConstants">
            <summary>
            Constants associated with numeric values
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.AnyNumberChars">
            <summary>
            The chars required to present any real number
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.PixelShortcode">
            <summary>
            The pixel short code
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.PointShortcode">
            <summary>
            The point short code
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.MillimeterShortcode">
            <summary>
            The millimeter short code
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.PicaShortcode">
            <summary>
            The pica short code
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.CentimeterShortcode">
            <summary>
            The centimeter short code
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.InchShortcode">
            <summary>
            The inch short code
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.PointToPixel">
            <summary>
            The point to pixel equivalent
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.MillimeterToPixel">
            <summary>
            The millimeter to pixel equivalent
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.PicaToPixel">
            <summary>
            The pica to pixel equivalent
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.CentimeterToPixel">
            <summary>
            The centimeter to pixel equivalent
            </summary>
        </member>
        <member name="F:Atom.NumericConstants.InchToPixel">
            <summary>
            The inch to pixel equivalent
            </summary>
        </member>
        <member name="T:Atom.NumericHelpers">
            <summary>
            Helpers related to numbers
            </summary>
        </member>
        <member name="M:Atom.NumericHelpers.AreValuesRelativeEqual(System.Decimal,System.Decimal)">
            <summary>
            Returns a flag indicating whether the <paramref name="amount1"/> relative equal
            to the specified <paramref name="amount2"/>
            </summary>
            <param name="amount1">The first value</param>
            <param name="amount2">The second value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.SimplifyFraction(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Simplifies a fraction by dividing the numerator and denominator by their greatest common divisor (GCD).
            </summary>
            <param name="numerator">The numerator of the fraction.</param>
            <param name="denominator">The denominator of the fraction.</param>
            <param name="simplifiedNumerator">The simplified numerator of the fraction</param>
            <param name="simplifiedDenominator">The simplified denominator of the fraction.</param>
        </member>
        <member name="M:Atom.NumericHelpers.GCD(System.Int32,System.Int32)">
            <summary>
            Calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm.
            </summary>
            <param name="a">The first integer.</param>
            <param name="b">The second integer.</param>
            <returns>The greatest common divisor of the two integers.</returns>
        </member>
        <member name="M:Atom.NumericHelpers.TryNormalizePaidAmountBasedOnTolerance(System.Decimal,System.Decimal,System.Nullable{System.Decimal}@,System.Decimal)">
            <summary>
            Attempts to normalize the <paramref name="paidAmount"/> based on the specified <paramref name="owedAmount"/> and the specified <paramref name="tolerance"/>.
            </summary>
            <param name="owedAmount">The owed amount</param>
            <param name="paidAmount">The paid amount</param>
            <param name="result">The normalized paid amount</param>
            <param name="tolerance">The acceptable offset between the <paramref name="owedAmount"/> and the <paramref name="paidAmount"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateRateFromAmountAndNetAmount(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the rate based on the <paramref name="amount"/> and the <paramref name="netAmount"/>.
            Ex.: 24% -> 24.
            </summary>
            <param name="amount">The amount</param>
            <param name="netAmount">The net amount</param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateAmountFromNetAmount(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the amount based on the <paramref name="netAmount"/> and the tax <paramref name="rate"/>
            </summary>
            <param name="netAmount">The net amount</param>
            <param name="rate">
            <para>
            The tax rate.
            </para>
            <para>
            The tax rate isn't passed as the percentage representation!
            </para>
            Ex.: 24% -> 24
            </param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateAmountFromTaxAmount(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the amount based on the <paramref name="taxAmount"/> and the tax <paramref name="rate"/>
            </summary>
            <param name="taxAmount">The tax amount</param>
            <param name="rate">
            <para>
            The tax rate.
            </para>
            <para>
            The tax rate isn't passed as the percentage representation!
            </para>
            Ex.: 24% -> 24
            </param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateNetAmountFromAmount(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the net amount based on the <paramref name="amount"/> and the tax <paramref name="rate"/>
            </summary>
            <param name="amount">The amount</param>
            <param name="rate">
            The tax rate.
            The tax rate isn't passed as the percentage representation!
            Ex.: 24% -> 24
            </param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateNetAmountFromTaxAmount(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the net amount based on the <paramref name="taxAmount"/> and the tax <paramref name="rate"/>
            </summary>
            <param name="taxAmount">The tax amount</param>
            <param name="rate">
            The tax rate.
            The tax rate isn't passed as the percentage representation!
            Ex.: 24% -> 24
            </param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateNetAmountFromTaxAmount(System.Decimal,System.Decimal)">
            <summary>
            Calculates the net amount based on the <paramref name="taxAmount"/> and the tax <paramref name="rate"/>
            </summary>
            <param name="taxAmount">The tax amount</param>
            <param name="rate">
            The tax rate.
            The tax rate isn't passed as the percentage representation!
            Ex.: 24% -> 24
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculatePercentCommissionAmount(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the commission amount based on the <paramref name="amount"/> and
            the <paramref name="percentCommission"/>
            </summary>
            <param name="amount">The amount</param>
            <param name="percentCommission">
            The percent commission.
            NOTE: That's a value from 0 to 100!
            </param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateFlatRateCommissionAmount(System.Decimal,System.Decimal)">
            <summary>
            Calculates the flat rate commission amount based on the <paramref name="amount"/>
            and the <paramref name="flatRateCommission"/>
            </summary>
            <param name="amount">The amount</param>
            <param name="flatRateCommission">The flat rate commission</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the specified <paramref name="amount"/> using the specified options
            </summary>
            <param name="amount">The amount</param>
            <param name="decimalsPrecision">The decimals precision</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.Round(System.Decimal)">
            <summary>
            Rounds the specified <paramref name="amount"/> using the specified options
            </summary>
            <param name="amount">The amount</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateAdjustments``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Decimal)">
            <summary>
            Calculates the adjustments (discounts or fees) to be applied to a list of <typeparamref name="T"/>s to reach a specified target total.
            Each adjustment is proportional to the original amount, ensuring consistent percentage changes across all values.
            </summary>
            <param name="items">The items.</param>
            <param name="amount">Extracts the amount from the item.</param>
            <param name="targetAmount">The desired target total after adjustments.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where the key is the <typeparamref name="T"/> and the value is the adjustment to apply.</returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateAdjustments(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal)">
            <summary>
            Calculates the adjustments (discounts or fees) to be applied to a list of amounts to reach a specified target total.
            Each adjustment is proportional to the original amount, ensuring consistent percentage changes across all values.
            </summary>
            <param name="amounts">The amounts.</param>
            <param name="targetAmount">The desired target total after adjustments.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where the key is the amount and the value is the adjustment to apply.</returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateDiscountAmount(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the discount or fee based on the given <paramref name="percentage"/>.
            </summary>
            <remarks>
            <para>
            If the percentage is positive, it returns a discount amount.
            </para>
            <para>
            If the percentage is negative, it returns a fee amount.
            </para>
            </remarks>
            <param name="amount">The original amount.</param>
            <param name="percentage">The percentage to apply (positive for discount, negative for fee).</param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The calculated discount or fee amount.</returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateAmountBasedOnDiscount(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the result amount after applying a discount or a fee of a given <paramref name="percentage"/>.
            </summary>
            <param name="amount">The original amount.</param>
            <param name="percentage">The percentage to apply (positive for discount, negative for fee).</param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The amount that is resulted by subtracting the discount or adding the fee to the original amount.</returns>
        </member>
        <member name="M:Atom.NumericHelpers.CalculateAppliedPercentage(System.Decimal,System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Calculates the percentage that was applied to the original amount to reach the new amount.
            </summary>
            <param name="oldAmount">The old amount before adjustment.</param>
            <param name="newAmount">The new amount after adjustment.</param>
            <param name="decimals">The number of decimals that the result should get rounded to</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The percentage change applied.</returns>
        </member>
        <member name="T:Atom.ObjectExtensions">
            <summary>
            Extension methods for <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="F:Atom.ObjectExtensions.mCloneMethod">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> that describes the <see cref="M:System.Object.MemberwiseClone"/> method
            </summary>
        </member>
        <member name="M:Atom.ObjectExtensions.To``1(System.Object)">
            <summary>
            Creates and returns a <typeparamref name="T"/> from the specified <paramref name="source"/>
            using the maps specified to the mapper
            </summary>
            <typeparam name="T">The type of the item to return</typeparam>
            <param name="source">The source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ObjectExtensions.ToNonNullString(System.Object,System.String)">
            <summary>
            Returns a string that represents the specified <paramref name="obj"/> and a <see cref="F:System.String.Empty"/> if the <paramref name="obj"/> is <see cref="!:null"/>
            </summary>
            <param name="obj">The object</param>
            <param name="fallBackValue">The value that is returned when the <paramref name="obj"/> is null</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ObjectExtensions.ToNonNullString``1(System.Nullable{``0},System.String)">
            <summary>
            Returns the string that represents the specified <paramref name="value"/>
            and <see cref="!:null"/> if there isn't a value
            </summary>
            <typeparam name="T">The type of the nullable struct</typeparam>
            <param name="value">The value</param>
            <param name="fallBackValue">The value that is returned when the <paramref name="value"/> is null</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ObjectExtensions.CastTo``1(System.Object)">
            <summary>
            Casts and returns the given object to the given type
            </summary>
            <typeparam name="T">The given type</typeparam>
            <param name="obj">The given object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ObjectExtensions.DeepClone``1(``0)">
            <summary>
            Creates and returns a deep clone of the specified <paramref name="obj"/>
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="obj">The object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ObjectExtensions.DeepClone(System.Object)">
            <summary>
            Deep clones the specified <paramref name="originalObject"/>
            </summary>
            <param name="originalObject">The original object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ObjectExtensions.InternalCopy(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Copies the <paramref name="originalObject"/>
            </summary>
            <param name="originalObject">The original object</param>
            <param name="visited">The visited fields</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ObjectExtensions.RecursiveCopyBaseTypePrivateFields(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Object,System.Type)">
            <summary>
            Copies the private fields of the <paramref name="originalObject"/> to the <paramref name="cloneObject"/>
            </summary>
            <param name="originalObject">The original object</param>
            <param name="visited">The visited objects</param>
            <param name="cloneObject">The cloned object</param>
            <param name="typeToReflect">The type of the object</param>
        </member>
        <member name="M:Atom.ObjectExtensions.CopyFields(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Object,System.Type,System.Reflection.BindingFlags,System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            Copies the fields of the <paramref name="originalObject"/> to the <paramref name="cloneObject"/>, using the <paramref name="filter"/> to filter the fields
            </summary>
            <param name="originalObject">The original object</param>
            <param name="visited">The visited objects</param>
            <param name="cloneObject">The cloned object</param>
            <param name="typeToReflect">The type of the object</param>
            <param name="bindingFlags">The binding flags</param>
            <param name="filter">The method for ignoring a field</param>
        </member>
        <member name="T:Atom.ObjectHelpers">
            <summary>
            Helper methods related to <see cref="T:System.Object"/>s
            </summary>
        </member>
        <member name="F:Atom.ObjectHelpers.mTypesToPropertiesMapper">
            <summary>
            Maps a type to its properties that can both be read and written to
            </summary>
        </member>
        <member name="M:Atom.ObjectHelpers.Map``1(``0,``0)">
            <summary>
            Copies the values of the non-readonly properties of the specified <paramref name="source"/>
            to the specified <paramref name="destination"/> using reflection.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="source">The source</param>
            <param name="destination">The destination</param>
        </member>
        <member name="M:Atom.ObjectHelpers.Map``2(``0,``1)">
            <summary>
            Copies the values of the non-readonly properties of the specified <paramref name="source"/>
            to the specified <paramref name="destination"/> using reflection.
            </summary>
            <typeparam name="TSource">The type of the source object</typeparam>
            <typeparam name="TDestination">The type of the destination object</typeparam>
            <param name="source">The source</param>
            <param name="destination">The destination</param>
        </member>
        <member name="T:Atom.BaseObservableCollectionEventArgs`1">
            <summary>
            The base for all the observable collection event args
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.BaseObservableCollectionEventArgs`1.Collection">
            <summary>
            The collection
            </summary>
        </member>
        <member name="M:Atom.BaseObservableCollectionEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
        </member>
        <member name="T:Atom.ItemAddedEventArgs`1">
            <summary>
            Event args for when an item is added to the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.ItemAddedEventArgs`1.Item">
            <summary>
            The item that was added
            </summary>
        </member>
        <member name="P:Atom.ItemAddedEventArgs`1.Index">
            <summary>
            The index of the item in the collection before the removal
            </summary>
        </member>
        <member name="M:Atom.ItemAddedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item">The item that was added</param>
            <param name="index">The index of the item in the collection before the removal</param>
        </member>
        <member name="T:Atom.ItemAddedEventArgs`2">
            <summary>
            Event args for when an item is added to the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.ItemAddedEventArgs`2.Element">
            <summary>
            The element that was added
            </summary>
        </member>
        <member name="M:Atom.ItemAddedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`1,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item">The item that was added</param>
            <param name="element">The element that was added</param>
            <param name="index">The index of the item in the collection before the removal</param>
        </member>
        <member name="T:Atom.ItemMovedEventArgs`1">
            <summary>
            Event args for when an item is moved in the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.ItemMovedEventArgs`1.Item1">
            <summary>
            The first item
            </summary>
        </member>
        <member name="P:Atom.ItemMovedEventArgs`1.Item1Index">
            <summary>
            The index of the first item
            </summary>
        </member>
        <member name="P:Atom.ItemMovedEventArgs`1.Item2">
            <summary>
            The second item
            </summary>
        </member>
        <member name="P:Atom.ItemMovedEventArgs`1.Item2Index">
            <summary>
            The index of the second item
            </summary>
        </member>
        <member name="M:Atom.ItemMovedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,System.Int32,`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item1">The first item</param>
            <param name="item1Index">The index of the first item</param>
            <param name="item2">The second item</param>
            <param name="item2Index">The index of the second item</param>
        </member>
        <member name="T:Atom.ItemMovedEventArgs`2">
            <summary>
            Event args for when an item is moved in the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.ItemMovedEventArgs`2.Element1">
            <summary>
            The first element
            </summary>
        </member>
        <member name="P:Atom.ItemMovedEventArgs`2.Element2">
            <summary>
            The second element
            </summary>
        </member>
        <member name="M:Atom.ItemMovedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`1,System.Int32,`0,`1,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item1">The first item</param>
            <param name="element1">The first element</param>
            <param name="item1Index">The index of the first item</param>
            <param name="item2">The second item</param>
            <param name="element2">The second element</param>
            <param name="item2Index">The index of the second item</param>
        </member>
        <member name="T:Atom.ItemRemovedEventArgs`1">
            <summary>
            Event args for when an item is removed from the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.ItemRemovedEventArgs`1.Item">
            <summary>
            The item that was removed
            </summary>
        </member>
        <member name="P:Atom.ItemRemovedEventArgs`1.Index">
            <summary>
            The index of the item in the collection before the removal
            </summary>
        </member>
        <member name="M:Atom.ItemRemovedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item">The item that was removed</param>
            <param name="index">The index of the item in the collection before the removal</param>
        </member>
        <member name="T:Atom.ItemRemovedEventArgs`2">
            <summary>
            Event args for when an item is removed from the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.ItemRemovedEventArgs`2.Element">
            <summary>
            The element that was removed
            </summary>
        </member>
        <member name="M:Atom.ItemRemovedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`1,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item">The item that was removed</param>
            <param name="index">The index of the item in the collection before the removal</param>
            <param name="element">The element that was removed</param>
        </member>
        <member name="T:Atom.ItemReplacedEventArgs`1">
            <summary>
            Event args for when an item is replaced in the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.ItemReplacedEventArgs`1.RemovedItem">
            <summary>
            The item that was replaced
            </summary>
        </member>
        <member name="P:Atom.ItemReplacedEventArgs`1.AddedItem">
            <summary>
            The new item
            </summary>
        </member>
        <member name="P:Atom.ItemReplacedEventArgs`1.Index">
            <summary>
            The index of the replaced/new item
            </summary>
        </member>
        <member name="M:Atom.ItemReplacedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="removedItem">The item that was replaced</param>
            <param name="addedItem">The new item</param>
            <param name="index">The index of the replaced/new item</param>
        </member>
        <member name="T:Atom.ItemReplacedEventArgs`2">
            <summary>
            Event args for when an item is replaced in the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.ItemReplacedEventArgs`2.RemovedElement">
            <summary>
            The element that was replaced
            </summary>
        </member>
        <member name="P:Atom.ItemReplacedEventArgs`2.AddedElement">
            <summary>
            The new element
            </summary>
        </member>
        <member name="M:Atom.ItemReplacedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`1,`0,`1,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="removedItem">The item that was replaced</param>
            <param name="addedElement">The new element</param>
            <param name="removedElement">The element that was removed</param>
            <param name="addedItem">The new item</param>
            <param name="index">The index of the replaced/new item</param>
        </member>
        <member name="T:Atom.ItemsClearedEventArgs`1">
            <summary>
            Event args for when a collection gets cleared
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.ItemsClearedEventArgs`1.ClearedItems">
            <summary>
            The items that got cleared
            </summary>
        </member>
        <member name="M:Atom.ItemsClearedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.ItemsClearedEventArgs`2">
            <summary>
            Event args for when a collection gets cleared
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.ItemsClearedEventArgs`2.Mapper">
            <summary>
            The mapper
            </summary>
        </member>
        <member name="M:Atom.ItemsClearedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.NotifyCollectionChangedEventArgsExtensions">
            <summary>
            Extension methods associated with <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>
            </summary>
        </member>
        <member name="M:Atom.NotifyCollectionChangedEventArgsExtensions.GetAddedItem``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Gets the added item
            </summary>
            <typeparam name="T">The type of the items of the collection</typeparam>
            <param name="e">The collection event args</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NotifyCollectionChangedEventArgsExtensions.GetRemovedItem``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Gets the removed item
            </summary>
            <typeparam name="T">The type of the items of the collection</typeparam>
            <param name="e">The collection event args</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NotifyCollectionChangedEventArgsExtensions.GetMovedItems``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Gets the items that where affected by the <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"/> action of the collection 
            with the <see cref="P:Atom.AffectedItems`1.NewItem"/> being the item that was asked to move to the location of the <see cref="P:Atom.AffectedItems`1.OldItem"/>
            </summary>
            <typeparam name="T">The type of the items of the collection</typeparam>
            <param name="e">The collection event args</param>
            <param name="collection">The source of items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.NotifyCollectionChangedEventArgsExtensions.GetReplacedItem``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Gets the items that where affected by the <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/> action of the collection with the <see cref="P:Atom.AffectedItems`1.NewItem"/> being the new item
            </summary>
            <typeparam name="T">The type of the items of the collection</typeparam>
            <param name="e">The collection event args</param>
            <returns></returns>
        </member>
        <member name="T:Atom.AffectedItems`1">
            <summary>
            A struct that contains the items that were affected by the <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"/> and the <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/> actions
            </summary>
            <typeparam name="TItem">The type of the items of the collection</typeparam>
        </member>
        <member name="P:Atom.AffectedItems`1.NewItem">
            <summary>
            The new item
            </summary>
        </member>
        <member name="P:Atom.AffectedItems`1.OldItem">
            <summary>
            The old item
            </summary>
        </member>
        <member name="P:Atom.AffectedItems`1.NewItemIndex">
            <summary>
            The item of the new index
            </summary>
        </member>
        <member name="P:Atom.AffectedItems`1.OldItemIndex">
            <summary>
            The item of the old index
            </summary>
        </member>
        <member name="T:Atom.ItemAddedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when an item is added to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemAddedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when an item is added to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemRemovedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when an item is removed to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemRemovedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when an item is removed to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemMovedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when an item is moved to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemMovedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when an item is moved to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemReplacedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when an item is replaced to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemReplacedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when an item is replaced to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemsClearedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when the collection is cleared
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ItemsClearedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when the collection is cleared
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.ObservableCollectionExtensions">
            <summary>
            Extension methods associated with <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            </summary>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.Sort``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1})">
            <summary>
            Sorts the items of the collection in ascending order according to a key
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="keySelector">A function to extract a key from an item</param>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.SortByStringValue``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.String})">
            <summary>
            Sorts the items of the collection in a ascending order according to a string value provided by an extractor
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="valueExtractor">Extracts a string value from an item</param>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.SortByDescending``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1})">
            <summary>
            Sorts the items of the collection in a descending order according to a key
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="keySelector">A function to extract a key from an item</param>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.SortByDescendingStringValue``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.String})">
            <summary>
            Sorts the items of the collection in a descending order according to a string value provided by an extractor
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="valueExtractor">Extracts a string value from an item</param>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.Sort``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the items of the collection in ascending order according to a key
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="keySelector">A function to extract a key from an item</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys</param>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.SortByDescending``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the items of the collection in descending order according to a key
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="keySelector">A function to extract a key from an item</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys</param>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.OrderByStringValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Sorts the items of the collection in a ascending order according to a string value provided by an extractor
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="source"/></typeparam>
            <param name="source">The target collection</param>
            <param name="valueExtractor">Extracts a string value from an item</param>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.OrderByDescendingStringValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Sorts the items of the collection in a descending order according to a string value provided by an extractor
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="source"/></typeparam>
            <param name="source">The target collection</param>
            <param name="valueExtractor">Extracts a string value from an item</param>
        </member>
        <member name="M:Atom.ObservableCollectionExtensions.InternalSort``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Moves the items of the collection so that their orders are the same as those of the items provided
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="sortedItems">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to provide item orders</param>
        </member>
        <member name="T:Atom.ShortableObservableCollection`1">
            <summary>
            An observable collection that has the ability to short the items it contains
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Atom.ShortableObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection`
            </summary>
        </member>
        <member name="M:Atom.ShortableObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:Atom.ShortableObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection
            class that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:Atom.ShortableObservableCollection`1.Sort``1(System.Func{`0,``0})">
            <summary>
            Sorts the items of the collection in ascending order according to a key
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="keySelector">A function to extract a key from an item</param>
        </member>
        <member name="M:Atom.ShortableObservableCollection`1.SortByDescending``1(System.Func{`0,``0})">
            <summary>
            Sorts the items of the collection in a descending order according to a key
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="keySelector">A function to extract a key from an item</param>
        </member>
        <member name="M:Atom.ShortableObservableCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the items of the collection in ascending order according to a key
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="keySelector">A function to extract a key from an item</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys</param>
        </member>
        <member name="M:Atom.ShortableObservableCollection`1.SortByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the items of the collection in descending order according to a key
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="keySelector">A function to extract a key from an item</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys</param>
        </member>
        <member name="M:Atom.ShortableObservableCollection`1.InternalSort(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Moves the items of the collection so that their orders are the same as those of the items provided
            </summary>
            <param name="sortedItems">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to provide item orders</param>
        </member>
        <member name="T:Atom.Personalization">
            <summary>
            Personalization constants
            </summary>
        </member>
        <member name="P:Atom.Personalization.EmptyUri">
            <summary>
            An empty <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="P:Atom.Personalization.EmptyVersion">
            <summary>
            An empty <see cref="T:System.Version"/>
            </summary>
        </member>
        <member name="F:Atom.Personalization.InfinityCharacter">
            <summary>
            The infinity symbol character
            </summary>
        </member>
        <member name="F:Atom.Personalization.RightToLeftArrowCharacter">
            <summary>
            The right to left arrow character
            </summary>
        </member>
        <member name="F:Atom.Personalization.LeftToRightArrowCharacter">
            <summary>
            The left to right arrow character
            </summary>
        </member>
        <member name="F:Atom.Personalization.BottomToTopArrowCharacter">
            <summary>
            The bottom to top arrow character
            </summary>
        </member>
        <member name="F:Atom.Personalization.TopToBottomArrowCharacter">
            <summary>
            The top to bottom arrow character
            </summary>
        </member>
        <member name="F:Atom.Personalization.EuroSymbolCharacter">
            <summary>
            The EURO symbol character
            </summary>
        </member>
        <member name="F:Atom.Personalization.White">
            <summary>
            Typically used as the back color of a control
            </summary>
        </member>
        <member name="F:Atom.Personalization.LightGray">
            <summary>
            Typically used as the disabled color
            </summary>
        </member>
        <member name="F:Atom.Personalization.Gray">
            <summary>
            Typically used as the text color of a control
            </summary>
        </member>
        <member name="F:Atom.Personalization.LightBlue">
            <summary>
            Typically used to indicate a neutral state
            </summary>
        </member>
        <member name="F:Atom.Personalization.Blue">
            <summary>
            Typically used to indicate a neutral state
            or the selected state
            </summary>
        </member>
        <member name="F:Atom.Personalization.DarkBlue">
            <summary>
            Typically used to indicate a neutral state
            </summary>
        </member>
        <member name="F:Atom.Personalization.Green">
            <summary>
            Typically used to indicate a successful or an active state
            </summary>
        </member>
        <member name="F:Atom.Personalization.Red">
            <summary>
            Typically used to indicate an error state
            </summary>
        </member>
        <member name="P:Atom.Personalization.ColorBasedOnPercentageSelector">
            <summary>
            Returns a color that represents a percentage value
            </summary>
        </member>
        <member name="F:Atom.Personalization.VeryLargeAnimationDurationMs">
            <summary>
            The very large animation duration in Ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.VeryLargeAnimationDuration">
            <summary>
            The very large duration for an animation.
            Value: 1600 ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.LargeAnimationDurationMs">
            <summary>
            The large animation duration in ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.LargeAnimationDuration">
            <summary>
            The large duration for an animation
            Value : 800 ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.LargeAnimationDelayMs">
            <summary>
            The large animation delay in ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.LargeAnimationDelay">
            <summary>
            The large delay for an animation
            Value : 750 ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.NormalAnimationDurationMs">
            <summary>
            The normal animation duration in ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.NormalAnimationDuration">
            <summary>
            The normal duration for an animation
            Value : 400 ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.NormalAnimationDelayMs">
            <summary>
            The normal animation delay in ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.NormalAnimationDelay">
            <summary>
            The normal delay for an animation
            Value : 350 ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.SmallAnimationDurationMs">
            <summary>
            The small animation duration in ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.SmallAnimationDuration">
            <summary>
            The small duration for an animation
            Value : 200 ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.VerySmallAnimationDurationMs">
            <summary>
            The very small animation duration in ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.VerySmallAnimationDuration">
            <summary>
            The very small animation duration
            Value : 100 ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.SmallAnimationDelayMs">
            <summary>
            The small animation delay in ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.SmallAnimationDelay">
            <summary>
            The small delay for an animation
            Value : 150 ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.VerySmallAnimationDelayMs">
            <summary>
            The very small animation delay in ms
            </summary>
        </member>
        <member name="F:Atom.Personalization.VerySmallAnimationDelay">
            <summary>
            The very small delay for an animation
            Value : 50 ms
            </summary>
        </member>
        <member name="T:Atom.PhoneNumberExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.PhoneNumber"/>
            </summary>
        </member>
        <member name="M:Atom.PhoneNumberExtensions.IsNullOrEmpty(Atom.PhoneNumber)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="phoneNumber"/>
            is null or empty
            </summary>
            <param name="phoneNumber">The phone number</param>
            <returns></returns>
        </member>
        <member name="T:Atom.PriorityQueueExtensions">
            <summary>
            The extension methods for the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>
            </summary>
        </member>
        <member name="M:Atom.PriorityQueueExtensions.Enqueue``2(System.Collections.Generic.PriorityQueue{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Adds the specified element with associated priority to <see cref="T:System.Collections.Generic.PriorityQueue`2"/>
            </summary>
            <typeparam name="TElement">The type of the element</typeparam>
            <typeparam name="TPriority">The type of the priority</typeparam>
            <param name="priorityQueue">The priority queue</param>
            <param name="element">The element</param>
            <param name="propertySelector">The function that selects the associated priority</param>
        </member>
        <member name="T:Atom.ReflectionCacher">
            <summary>
            Provides methods for caching information that is used by reflection based operations
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacher.mAreAllTypesLoaded">
            <summary>
            A flag indicating whether all the types where loaded
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacher.mTypeToPropertiesMapper">
            <summary>
            Maps a type to its related public properties
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacher.mTypeToMethodsMapper">
            <summary>
            Maps a type to its related public methods
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacher.mTypeToEventsMapper">
            <summary>
            Maps a type to its related public events
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacher.mTypeToConstructorsMapper">
            <summary>
            Maps a type to its related public constructors
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacher.mAssemblyToReferencedAssembliesMapper">
            <summary>
            Maps an assembly to its referenced assemblies
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacher.mAssemblyToTypesMapper">
            <summary>
            Maps an assembly to its related types
            </summary>
        </member>
        <member name="M:Atom.ReflectionCacher.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ReflectionCacher.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Atom.ReflectionCacher.GetReferencedAssemblies(System.Reflection.Assembly)">
            <summary>
            Gets the referenced assemblies of the specified <paramref name="assembly"/>
            </summary>
            <param name="assembly">The assembly</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets the types of the specified <paramref name="assembly"/>
            </summary>
            <param name="assembly">The assembly</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.GetTypes">
            <summary>
            Gets the types from all the loaded assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.GetMethods(System.Type)">
            <summary>
            Gets the methods of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.GetProperties(System.Type)">
            <summary>
            Gets the properties of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
            
        </member>
        <member name="M:Atom.ReflectionCacher.GetConstructors(System.Type)">
            <summary>
            Gets the constructors of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.GetEvents(System.Type)">
            <summary>
            Gets th events of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.StringFromType(System.Type)">
            <summary>
            Returns a string that represents the specified <paramref name="type"/>
            and that can be later be used for retrieving back the type
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.TypeFromString(System.String)">
            <summary>
            Attempts to retrieve the type represented by the specified <paramref name="str"/>
            </summary>
            <param name="str">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.GetPropertiesOfInterface(System.Type)">
            <summary>
            Gets the properties from the specified <paramref name="interfaceType"/>
            </summary>
            <param name="interfaceType">The interface type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacher.GetEventsOfInterface(System.Type)">
            <summary>
            Gets the events from the specified <paramref name="interfaceType"/>
            </summary>
            <param name="interfaceType">The interface type</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ReflectionCacherExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.ReflectionCacher"/>
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacherExtensions.ToLocalizedStringMethodName">
            <summary>
            The name of the methods that return a localized string
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacherExtensions.ToColorHexMethodName">
            <summary>
            The name of the methods that return a color hex
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacherExtensions.ToVectorSourceMethodName">
            <summary>
            The name of the methods that returns a vector source
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacherExtensions.DataModelExtensionsSuffix">
            <summary>
            The 'DataModelExtensions' suffix
            </summary>
        </member>
        <member name="M:Atom.ReflectionCacherExtensions.GetDataPresentationHelpersInfo``1(Atom.ReflectionCacher)">
            <summary>
            Gets the <see cref="T:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1"/> for the specified <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the models</typeparam>
            <param name="cacher">The cacher</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacherExtensions.TryGetToLocalizedStringExtensionMethod(Atom.ReflectionCacher,System.Type,System.Reflection.MethodInfo@)">
            <summary>
            Attempts to get the 'ToLocalizedString' extension method related to
            the specified <paramref name="type"/>
            </summary>
            <param name="cacher">The cacher</param>
            <param name="type">The type</param>
            <param name="method">The method</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacherExtensions.TryGetToColorHexExtensionMethod(Atom.ReflectionCacher,System.Type,System.Reflection.MethodInfo@)">
            <summary>
            Attempts to get the 'ToColorHex' extension method related to
            the specified <paramref name="type"/>
            </summary>
            <param name="cacher">The cacher</param>
            <param name="type">The type</param>
            <param name="method">The method</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionCacherExtensions.TryGetToVectorSourceExtensionMethod(Atom.ReflectionCacher,System.Type,System.Reflection.MethodInfo@)">
            <summary>
            Attempts to get the 'ToVectorSource' extension method related to
            the specified <paramref name="type"/>
            </summary>
            <param name="cacher">The cacher</param>
            <param name="type">The type</param>
            <param name="method">The method</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1">
            <summary>
            Contains helpers that are used when presenting instances of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the models</typeparam>
        </member>
        <member name="F:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.HelpersSuffix">
            <summary>
            The suffix of all the helper method static classes
            </summary>
        </member>
        <member name="F:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.mInstance">
            <summary>
            The single instance of the <see cref="T:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1"/>
            </summary>
        </member>
        <member name="P:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.PropertyMapper">
            <summary>
            The <see cref="T:Atom.PropertyMapper`1"/> that maps the properties of a <typeparamref name="T"/>
            to custom values
            </summary>
        </member>
        <member name="P:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.PropertyTranslator">
            <summary>
            The <see cref="T:Atom.PropertyTranslator`1"/> that translates the values of the properties of a
            <typeparamref name="T"/>
            </summary>
        </member>
        <member name="P:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.DefaultProperties">
            <summary>
            The default properties
            </summary>
        </member>
        <member name="P:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.DefaultPropertiesPropertyName">
            <summary>
            The name of the property that stores the <see cref="P:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.DefaultProperties"/>
            </summary>
        </member>
        <member name="M:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.#ctor">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.#ctor(Atom.PropertyMapper{`0},Atom.PropertyTranslator{`0},System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyMapper">The property mapper</param>
            <param name="propertyTranslator">The property translator</param>
            <param name="defaultProperties">The default properties</param>
            <remarks>
            This constructor can be used for overriding the instance that is returned by the <see cref="M:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.Create"/> method
            which uses reflection to automatically discover the data.
            </remarks>
        </member>
        <member name="M:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1.Create">
            <summary>
            Creates and returns a <see cref="T:Atom.ReflectionCacherExtensions.DataPresentationHelpersInfo`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.ReflectionHelpers">
            <summary>
            Helpers methods related to reflection
            </summary>
        </member>
        <member name="F:Atom.ReflectionHelpers.NoPropertyPathSpecifiedErrorMessage">
            <summary>
            Error message indicating that a property path wasn't specified
            </summary>
        </member>
        <member name="F:Atom.ReflectionHelpers.mMaps">
            <summary>
            The maps
            </summary>
        </member>
        <member name="F:Atom.ReflectionHelpers.mCreateAndPopulateArrayGenericMethodDefinition">
            <summary>
            The generic method definition of the <see cref="M:Atom.ReflectionHelpers.CreateAndPopulateArray``1(System.Collections.Generic.IEnumerable{``0})"/> method
            </summary>
        </member>
        <member name="F:Atom.ReflectionHelpers.mCreateAndPopulateListGenericMethodDefinition">
            <summary>
            The generic method definition of the <see cref="M:Atom.ReflectionHelpers.CreateAndPopulateList``1(System.Collections.Generic.IEnumerable{``0})"/> method
            </summary>
        </member>
        <member name="F:Atom.ReflectionHelpers.mCreateAndPopulateCollectionGenericMethodDefinition">
            <summary>
            The generic method definition of the <see cref="M:Atom.ReflectionHelpers.CreateAndPopulateCollection``1(System.Collections.Generic.IEnumerable{``0})"/> method
            </summary>
        </member>
        <member name="F:Atom.ReflectionHelpers.mCreateAndPopulateHashSetGenericMethodDefinition">
            <summary>
            The generic method definition of the <see cref="M:Atom.ReflectionHelpers.CreateAndPopulateHashSet``1(System.Collections.Generic.IEnumerable{``0})"/> method
            </summary>
        </member>
        <member name="F:Atom.ReflectionHelpers.mEnumerableEmptyGenericMethodDefinition">
            <summary>
            The generic method definition of the <see cref="M:System.Linq.Enumerable.Empty``1"/> method
            </summary>
        </member>
        <member name="M:Atom.ReflectionHelpers.LoadAllAssemblies(System.String,System.IProgress{System.String})">
            <summary>
            Loads all the assemblies that have not been yet loaded and are contained in the specified <paramref name="directoryPath"/>
            </summary>
            <param name="directoryPath">The directory path</param>
            <param name="progress">An optional progress reporter</param>
        </member>
        <member name="M:Atom.ReflectionHelpers.LoadAllApplicationAssemblies(System.IProgress{System.String})">
            <summary>
            Loads all the assemblies of the application that have not yet been loaded
            </summary>
            <param name="progress">An optional progress reporter</param>
        </member>
        <member name="M:Atom.ReflectionHelpers.IsSatisfyingGenericArgumentConstraints(System.Type,System.Type)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="type"/> satisfies the constraints
            of the specified <paramref name="genericArgument"/>
            </summary>
            <param name="genericArgument">The generic argument</param>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.TryCreateGenericType(System.Type,System.Type@)">
            <summary>
            Attempts to create a type by populating the generic arguments of the specified <paramref name="genericTypeDefinition"/>
            </summary>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.Create``1(System.Object)">
            <summary>
            Creates and returns an instance of <typeparamref name="TDestination"/> by copying the values
            that can be copied from the <paramref name="source"/>
            </summary>
            <typeparam name="TDestination">The type of the destination</typeparam>
            <param name="source">The source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.Create(System.Object,System.Type)">
            <summary>
            Creates and returns an instance of <paramref name="destinationType"/> by copying the values
            that can be copied from the <paramref name="source"/>
            </summary>
            <param name="source">The source</param>
            <param name="destinationType">The type of the destination</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.Map(System.Object,System.Object)">
            <summary>
            Copies the values of the <paramref name="source"/> that can be copied to the specified <paramref name="destination"/>
            </summary>
            <param name="source">The source</param>
            <param name="destination">The destination</param>
        </member>
        <member name="M:Atom.ReflectionHelpers.MapNonDefaultValues(System.Object,System.Object)">
            <summary>
            Copies the values of the <paramref name="source"/> that can be copied and are not the default type value
            to the specified <paramref name="destination"/>
            </summary>
            <param name="source">The source</param>
            <param name="destination">The destination</param>
        </member>
        <member name="M:Atom.ReflectionHelpers.CreateAndPopulateEnumerable(System.Type,System.Collections.IEnumerable)">
            <summary>
            Create a new instance of a <paramref name="type"/> that contains the specified <paramref name="values"/>
            </summary>
            <param name="type">
            The type of the collection.
            <para><see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.ObjectModel.Collection`1"/>, <see cref="T:System.Array"/>, <see cref="T:System.Collections.Generic.HashSet`1"/></para>
            </param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.CreateList(System.Type)">
            <summary>
            Creates and returns a <see cref="T:System.Collections.Generic.List`1"/> that can contains items of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type of the items the list contains</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.CreateEmptyIEnumerable(System.Type)">
            <summary>
            Creates and returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains no items of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetValues(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the values of the property at the end of the specified <paramref name="propertyPath"/> of the specified <paramref name="instance"/>.
            </summary>
            <param name="instance">The instance</param>
            <param name="propertyPath">The property path used for navigating to the property or the sub-property of the <paramref name="instance"/></param>
            <param name="includeNullValues">
            A flag indicating whether the values of the properties that are null should be included on the result
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetProperty(System.Object,System.String)">
            <summary>
            Gets the property at the end of the specified <paramref name="propertyPath"/>
            </summary>
            <param name="instance">The instance</param>
            <param name="propertyPath">The property path that navigates to the property we want to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetProperty(System.Type,System.String)">
            <summary>
            Gets the property at the end of the specified <paramref name="propertyPath"/>
            </summary>
            <param name="instanceType">The type of the instance</param>
            <param name="propertyPath">The property path that navigates to the property we want to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetNonEnumerableType(System.Type,System.String)">
            <summary>
            Uses the specified <paramref name="propertyPath"/> to navigate through the properties of the specified <paramref name="type"/>
            to reach its non enumerable destination
            </summary>
            <param name="type">The root type</param>
            <param name="propertyPath">The property path</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.FirstOrDefaultTypeAndValue(System.Object,System.String)">
            <summary>
            Gets the value of the property at the end of the specified <paramref name="propertyPath"/>
            </summary>
            <param name="instance">The instance</param>
            <param name="propertyPath">The property path that navigates to the property whose value we want to retrieve</param>
            <returns>
            A <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.IsMarkedAsNullable(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified <paramref name="propertyInfo"/> is marked
            as nullable
            </summary>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.IsMarkedAsNullable(System.Reflection.ParameterInfo)">
            <summary>
            Determines whether the specified <paramref name="parameterInfo"/> is marked
            as nullable
            </summary>
            <param name="parameterInfo">The parameter info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.RaiseEvent``1(System.Object,System.String,``0)">
            <summary>
            Raises an event with the specified <paramref name="eventName"/> that is contained in the 
            specified <paramref name="source"/> using the specified <paramref name="eventArgs"/>
            </summary>
            <typeparam name="TEventArgs">The type of the arguments</typeparam>
            <param name="source">An instance of the object that contains the event</param>
            <param name="eventName">The name of the event</param>
            <param name="eventArgs">The event arguments</param>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Retrieves the <see cref="T:System.Reflection.MethodInfo"/> for a given method using a compile-time safe approach.
            </summary>
            <typeparam name="T">The type that contains the method.</typeparam>
            <param name="expression">An expression representing a method call.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> representing the method.</returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetGenericMethodDefinitionInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Retrieves the generic <see cref="T:System.Reflection.MethodInfo"/> definition for a given method using a compile-time safe approach.
            </summary>
            <typeparam name="T">The type that contains the method.</typeparam>
            <param name="expression">An expression representing a method call.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> representing the generic method definition.</returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetStaticMethodInfo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Retrieves the <see cref="T:System.Reflection.MethodInfo"/> for a given static method using a compile-time safe approach.
            </summary>
            <param name="expression">An expression representing a static method call.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> representing the method.</returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetStaticGenericMethodDefinitionInfo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Retrieves the generic <see cref="T:System.Reflection.MethodInfo"/> definition for a given generic static method using a compile-time safe approach.
            </summary>
            <param name="expression">An expression representing a static method call.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> representing the generic method definition.</returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.CreateAndPopulateArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates and populates an <see cref="T:System.Array"/> of <typeparamref name="T"/> using the specified <paramref name="items"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.CreateAndPopulateList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates and populates a <see cref="T:System.Collections.Generic.List`1"/> using the specified <paramref name="items"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.CreateAndPopulateCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates and populates a <see cref="T:System.Collections.ObjectModel.Collection`1"/> using the specified <paramref name="items"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.CreateAndPopulateHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates and populates a <see cref="T:System.Collections.Generic.HashSet`1"/> using the specified <paramref name="items"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ReflectionHelpers.GetValues(System.Object,System.Collections.Generic.List{System.Object},System.String,System.Boolean)">
            <summary>
            Gets the value of the property at the end of the specified <paramref name="propertyPath"/>
            </summary>
            <param name="value">The value</param>
            <param name="result">The results list where all the values are placed</param>
            <param name="propertyPath">
            The current property path.
            NOTE: Every time this method is called a part of the <paramref name="propertyPath"/> is truncated till none is left!
            </param>
            <param name="includeNullValues">
            A flag indicating whether the values of the properties that are null should be included on the result
            </param>
        </member>
        <member name="P:Atom.ReflectionHelpers.MigratablePropertiesMap.SourceType">
            <summary>
            The type whose property values are copied
            </summary>
        </member>
        <member name="P:Atom.ReflectionHelpers.MigratablePropertiesMap.DestinationType">
            <summary>
            The type that receives the property values that are being copied
            </summary>
        </member>
        <member name="P:Atom.ReflectionHelpers.MigratablePropertiesMap.Maps">
            <summary>
            The maps
            </summary>
        </member>
        <member name="M:Atom.ReflectionHelpers.MigratablePropertiesMap.#ctor(System.Type,System.Type)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Atom.ReflectionHelpers.PropertyMap.SourceTypeProperty">
            <summary>
            The property from the source type
            </summary>
        </member>
        <member name="P:Atom.ReflectionHelpers.PropertyMap.DestinationTypeProperty">
            <summary>
            The property from the destination type
            </summary>
        </member>
        <member name="M:Atom.ReflectionHelpers.PropertyMap.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.RegexConstants">
            <summary>
            Constants related to <see cref="T:System.Text.RegularExpressions.Regex"/>
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.EmptyOrNumericOnlyStringRegexPattern">
            <summary>
            The pattern that is used by the <see cref="F:Atom.RegexConstants.EmptyOrNumericOnlyStringRegex"/>
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.EmptyOrNumericOnlyStringRegex">
            <summary>
            Regex used for validating an empty string or a string that contains only numbers
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.EmailRegexPattern">
            <summary>
            The pattern that is used by the <see cref="F:Atom.RegexConstants.EmailRegex"/>
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.EmailRegex">
            <summary>
            The regular expression for validating an email
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.E164PhoneNumberRegexPattern">
            <summary>
            The pattern that is used by the <see cref="F:Atom.RegexConstants.E164PhoneNumberRegex"/>
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.E164PhoneNumberRegex">
            <summary>
            The regular expression for validating a E164 phone number
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.PhoneNumberRegexPattern">
            <summary>
            The pattern that is used by the <see cref="F:Atom.RegexConstants.PhoneNumberRegex"/>
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.PhoneNumberRegex">
            <summary>
            The regular expression for validating a phone number
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.NonFloatingNumberRegexPattern">
            <summary>
            The pattern that is used by the <see cref="F:Atom.RegexConstants.NonFloatingNumberRegex"/>
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.NonFloatingNumberRegex">
            <summary>
            The regular expression for identifying a non floating point number
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.LatinRegexPattern">
            <summary>
            The pattern that is used by the <see cref="F:Atom.RegexConstants.LatinRegex"/>
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.LatinRegex">
            <summary>
            The regular expression for identifying words with latin characters only
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.HexRegexPattern">
            <summary>
            The pattern that is used by the <see cref="F:Atom.RegexConstants.HexRegex"/>
            </summary>
        </member>
        <member name="F:Atom.RegexConstants.HexRegex">
            <summary>
            The regular expression used for validating a hex value
            </summary>
        </member>
        <member name="T:Atom.RegexExtensions">
            <summary>
            Extension methods for <see cref="T:System.Text.RegularExpressions.Regex"/>
            </summary>
        </member>
        <member name="M:Atom.RegexExtensions.MatchNamedGroups(System.Text.RegularExpressions.Regex,System.String,System.String,System.String)">
            <summary>
            Searches <paramref name="inputString"/> using the <paramref name="regex"/> and returns an <see cref="!:IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;"/> containing the matches
            </summary>
            <param name="regex">The regular expression that will be used for the matching</param>
            <param name="inputString">The string that will be searched for matches</param>
            <param name="groupName">The named group name</param>
            <param name="delimiter">The delimiter</param>
            <returns>An <see cref="!:IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;"/> that contains the group names and the matches</returns>
        </member>
        <member name="M:Atom.RegexExtensions.GetFirstMatchNamedGroups(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Gets the named groups that are matched in the <paramref name="value"/> using the <paramref name="regex"/>
            </summary>
            <param name="regex">The regular expression</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.RegexExtensions.GetNamedGroupsPerMatch(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Gets the named groups that are matched in the <paramref name="value"/> using the <paramref name="regex"/>
            </summary>
            <param name="regex">The regular expression</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.RegexExtensions.GetMatchNamedGroups(System.Text.RegularExpressions.Match)">
            <summary>
            Gets the named groups that are successfully matched in the specified <paramref name="match"/>
            </summary>
            <param name="match">The match</param>
            <returns></returns>
        </member>
        <member name="T:Atom.RegexHelpers">
            <summary>
            The helper methods for the <see cref="T:System.Text.RegularExpressions.Regex"/>
            </summary>
        </member>
        <member name="M:Atom.RegexHelpers.TryCreate(System.String,System.Text.RegularExpressions.Regex@)">
            <summary>
            Tries to create a <see cref="T:System.Text.RegularExpressions.Regex"/> using the <paramref name="pattern"/>. 
            If the operation succeeds the <paramref name="regex"/> has the created regular expression
            </summary>
            <param name="pattern">The pattern</param>
            <param name="regex">The created regular expression</param>
            <returns></returns>
        </member>
        <member name="T:Atom.SecureStringHelpers">
            <summary>
            Helpers for the <see cref="T:System.Security.SecureString"/> class
            </summary>
        </member>
        <member name="M:Atom.SecureStringHelpers.Unsecure(System.Security.SecureString)">
            <summary>
            Un-secures a <see cref="T:System.Security.SecureString"/> to plain text
            </summary>
            <param name="secureString">The secure string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.SecureStringHelpers.FromString(System.String)">
            <summary>
            Creates and returns a <see cref="T:System.Security.SecureString"/> from the specified
            <paramref name="str"/>
            </summary>
            <param name="str">The string</param>
            <returns></returns>
        </member>
        <member name="T:Atom.BaseTaskManager">
            <summary>
            Handles anything to do with Tasks
            </summary>
        </member>
        <member name="M:Atom.BaseTaskManager.LockTaskAsync(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the task if the updating flag is not set.
            If the flag is true (indicating the task is already running) then the task is not run.
            If the flag is false (indicating no running task) then the task is run.
            Once the task is finished if it was run, then the flag is reset to false.
            NOTE: This method doesn't queue tasks, it only prevents them from running!
            </summary>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to run if it's not already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.BaseTaskManager.LockTaskAsync``1(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            Runs the task if the updating flag is not set.
            If the flag is true (indicating the task is already running) then the task is not run.
            If the flag is false (indicating no running task) then the task is run.
            Once the task is finished if it was run, then the flag is reset to false
            NOTE: This method doesn't queue tasks, it only prevents them from running!
            </summary>
            <typeparam name="T">The type of the return value of the task</typeparam>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to run if it's not already running</param>
            <param name="defaultValue">The default value to return if the task is already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAndForget(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <remarks>
            The passed in Task can't be awaited as it is not required to!
            Any errors that may occurre are being logged by the logger
            </remarks>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAsync(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            Task(TResult) returned by function.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            Task(TResult) returned by function.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAsync``1(System.Func{``0},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a Task(TResult)
            object that represents that work. A cancellation token allows the work to be
            cancelled.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAsync``1(System.Func{``0},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task`1
            object that represents that work.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task object that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work.</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAsync(System.Action,System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task
            object that represents that work. A cancellation token allows the work to be
            cancelled.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The action parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.BaseTaskManager.RunAsync(System.Action,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task
            object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">The action parameter was null.</exception>
        </member>
        <member name="T:Atom.DefaultApplicationEnvironment">
            <summary>
            The default implementation of the <see cref="T:Atom.IApplicationEnvironment"/>
            </summary>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.Host">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.UserCredentialsDatabaseName">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.Application">
            <summary>
            The application
            </summary>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.ApplicationName">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.ApplicationRootDirectoryPath">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.Language">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.Country">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.Currency">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultApplicationEnvironment.PhoneNumberLength">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.#ctor(System.Uri,Atom.AtomApplication,Atom.LanguageCode)">
            <summary>
            Default constructor
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> that points to the host of the application if any.</param>
            <param name="application">The application</param>
            <param name="language">The selected language</param>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.#ctor(System.Uri,Atom.AtomApplication,System.String,Atom.LanguageCode)">
            <summary>
            Default constructor
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> that points to the host of the application if any.</param>
            <param name="application">The application</param>
            <param name="applicatioName">The name of the application</param>
            <param name="language">The selected language</param>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.GetApplicationDataDirectoryPath(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.GetTempDirectoryPath(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.GetLogsDirectoryPath(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.GetLocalDataStorageDirectoryPath(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.GetOptionsDirectoryPath(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.GetLanguagePacksDirectoryPath(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DefaultApplicationEnvironment.ApplyRootExtension(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.DefaultFrameworkEnvironment">
            <summary>
            The default implementation of the <see cref="T:Atom.IFrameworkEnvironment"/>
            </summary>
        </member>
        <member name="P:Atom.DefaultFrameworkEnvironment.IsDevelopment">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultFrameworkEnvironment.Configuration">
            <inheritdoc/>
        </member>
        <member name="P:Atom.DefaultFrameworkEnvironment.IsMobile">
            <inheritdoc/>
        </member>
        <member name="M:Atom.DefaultFrameworkEnvironment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.DynamicTypesManager">
            <summary>
            Provides methods for creating and managing dynamic types
            </summary>
        </member>
        <member name="F:Atom.DynamicTypesManager.mTypesPrefix">
            <summary>
            The prefix of the name of the dynamically generated types
            </summary>
        </member>
        <member name="F:Atom.DynamicTypesManager.mMapper">
            <summary>
            The mapper
            </summary>
        </member>
        <member name="F:Atom.DynamicTypesManager.mTypeCreationQueue">
            <summary>
            The semaphore the is used for queuing the creation of types
            </summary>
        </member>
        <member name="M:Atom.DynamicTypesManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.DynamicTypesManager.Get(System.Collections.Generic.IEnumerable{Atom.DynamicTypePropertyInfo})">
            <summary>
            Gets a type with the specified <paramref name="properties"/>
            </summary>
            <param name="properties">The properties</param>
            <returns></returns>
        </member>
        <member name="P:Atom.DynamicTypesManager.DynamicTypeInfo.Properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:Atom.DynamicTypesManager.DynamicTypeInfo.#ctor(System.Collections.Generic.IEnumerable{Atom.DynamicTypePropertyInfo})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.DynamicTypePropertyInfo">
            <summary>
            Contains information related to a property that is to be attached to a dynamically generated type
            </summary>
        </member>
        <member name="P:Atom.DynamicTypePropertyInfo.Type">
            <summary>
            The type of the property
            </summary>
        </member>
        <member name="P:Atom.DynamicTypePropertyInfo.Name">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="M:Atom.DynamicTypePropertyInfo.#ctor(System.Type,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="type">The type of the property</param>
            <param name="name">The name of the property</param>
        </member>
        <member name="T:Atom.FileManager">
            <summary>
            Handles reading/writing and querying the file system
            </summary>
        </member>
        <member name="M:Atom.FileManager.WriteTextToFileAsync(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="encoding">The encoding</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.FileManager.WriteTextToFileAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.FileManager.WriteTextToFile(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.FileManager.WriteTextToFile(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.FileManager.NormalizePath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.FileManager.ResolvePath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.MetaDataCacher">
            <summary>
            Provides methods for caching information in the form of meta data
            </summary>
        </member>
        <member name="F:Atom.MetaDataCacher.mMetaData">
            <summary>
            The member of the <see cref="P:Atom.MetaDataCacher.MetaData"/> property
            </summary>
        </member>
        <member name="P:Atom.MetaDataCacher.MetaData">
            <summary>
            The meta data
            </summary>
        </member>
        <member name="M:Atom.MetaDataCacher.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.MetaDataCacher.Add(System.String,System.Object)">
            <summary>
            Maps the specified <paramref name="key"/> to the specified <paramref name="value"/>
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.MetaDataCacher.TryGet(System.String,System.Object@)">
            <summary>
            Attempts to get the value mapped at the specified <paramref name="key"/>
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.MetaDataCacher.Remove(Atom.MetaData)">
            <summary>
            Removes the specified <paramref name="meta"/>
            </summary>
            <param name="meta">The meta</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ReflectionBasedMapper">
            <summary>
            An implementation of the <see cref="T:Atom.IMapper"/> that uses reflection to copy the values
            </summary>
        </member>
        <member name="F:Atom.ReflectionBasedMapper.mInstance">
            <summary>
            The member of the <see cref="P:Atom.ReflectionBasedMapper.Instance"/> property
            </summary>
        </member>
        <member name="P:Atom.ReflectionBasedMapper.Instance">
            <summary>
            The single instance of the <see cref="T:Atom.ReflectionBasedMapper"/>
            </summary>
        </member>
        <member name="M:Atom.ReflectionBasedMapper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.ReflectionBasedMapper.Map(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ReflectionBasedMapper.Map``2(``0,``1)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ReflectionBasedMapper.Map(System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.ReflectionBasedMapper.CanMap(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.HealthCheckError">
            <summary>
            An <see cref="T:Atom.IFailable"/> that represents a health check issue
            </summary>
        </member>
        <member name="P:Atom.HealthCheckError.mResolve">
            <summary>
            Action responsible for resolving the error
            </summary>
        </member>
        <member name="F:Atom.HealthCheckError.mResolveQueue">
            <summary>
            Queue that is used for ensuring that the <see cref="M:Atom.HealthCheckError.ResolveAsync"/> is not executed multiple times in parallel
            </summary>
        </member>
        <member name="P:Atom.HealthCheckError.Name">
            <inheritdoc/>
        </member>
        <member name="P:Atom.HealthCheckError.VectorSource">
            <inheritdoc/>
        </member>
        <member name="P:Atom.HealthCheckError.Exception">
            <inheritdoc/>
        </member>
        <member name="P:Atom.HealthCheckError.ErrorType">
            <inheritdoc/>
        </member>
        <member name="P:Atom.HealthCheckError.ErrorMessage">
            <inheritdoc/>
        </member>
        <member name="P:Atom.HealthCheckError.IsSuccessful">
            <inheritdoc/>
        </member>
        <member name="P:Atom.HealthCheckError.CanResolve">
            <summary>
            A flag indicating whether the issue can be resolved
            </summary>
        </member>
        <member name="P:Atom.HealthCheckError.HasBeenResolved">
            <summary>
            A flag indicating whether the <see cref="M:Atom.HealthCheckError.ResolveAsync"/> method has been executed successfully
            </summary>
        </member>
        <member name="M:Atom.HealthCheckError.#ctor(System.String,Atom.VectorSource,Atom.ErrorType,System.String,System.Func{System.Threading.Tasks.Task{Atom.IFailable}})">
            <summary>
            Default constructor
            </summary>
            <param name="name">The name</param>
            <param name="vectorSource">The vector source</param>
            <param name="errorType">The error type</param>
            <param name="errorMessage">The error message</param>
            <param name="resolve">Action responsible for resolving the error if any</param>
        </member>
        <member name="M:Atom.HealthCheckError.ResolveAsync">
            <summary>
            Resolves the error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.HealthCheckError.FromCriticalError(Atom.IHealthCheck,System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.HealthCheckError"/> that occurred during the execution of the health check
            </summary>
            <param name="healthCheck">The health check</param>
            <param name="errorMessage">The error message</param>
            <returns></returns>
        </member>
        <member name="T:Atom.HealthChecksManager">
            <summary>
            Provides methods for managing and executing health checks
            </summary>
        </member>
        <member name="F:Atom.HealthChecksManager.mHealthChecks">
            <summary>
            The health checks 
            </summary>
        </member>
        <member name="P:Atom.HealthChecksManager.HealthChecks">
            <summary>
            The health checks
            </summary>
        </member>
        <member name="M:Atom.HealthChecksManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.HealthChecksManager.Register(Atom.IHealthCheck)">
            <summary>
            Registers the specified <paramref name="healthCheck"/>
            </summary>
            <param name="healthCheck">The health check</param>
        </member>
        <member name="M:Atom.HealthChecksManager.Unregister(Atom.IHealthCheck)">
            <summary>
            Unregisters the specified <paramref name="healthCheck"/>
            </summary>
            <param name="healthCheck">The health check</param>
        </member>
        <member name="M:Atom.HealthChecksManager.ExecuteAsync(System.IProgress{System.String})">
            <summary>
            Executes the registered health checks and returns the errors if any were discovered
            </summary>
            <param name="progress">An optional progress reporter</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IApplicationEnvironment">
            <summary>
            Provides abstractions for the application environment
            </summary>
        </member>
        <member name="P:Atom.IApplicationEnvironment.Host">
            <summary>
            The <see cref="T:System.Uri"/> that points to the host of the application if any.
            </summary>
        </member>
        <member name="P:Atom.IApplicationEnvironment.UserCredentialsDatabaseName">
            <inheritdoc/>
        </member>
        <member name="P:Atom.IApplicationEnvironment.Application">
            <summary>
            The application
            </summary>
        </member>
        <member name="P:Atom.IApplicationEnvironment.ApplicationName">
            <summary>
            The application name
            </summary>
        </member>
        <member name="P:Atom.IApplicationEnvironment.ApplicationRootDirectoryPath">
            <summary>
            The directory where the application is stored
            </summary>
        </member>
        <member name="P:Atom.IApplicationEnvironment.Language">
            <summary>
            The selected language
            </summary>
        </member>
        <member name="P:Atom.IApplicationEnvironment.Country">
            <summary>
            The country
            </summary>
        </member>
        <member name="P:Atom.IApplicationEnvironment.Currency">
            <summary>
            The currency
            </summary>
        </member>
        <member name="P:Atom.IApplicationEnvironment.PhoneNumberLength">
            <summary>
            The length of the phone numbers without the country code
            </summary>
        </member>
        <member name="M:Atom.IApplicationEnvironment.GetApplicationDataDirectoryPath(System.Boolean@)">
            <summary>
            The main directory root path.
            <para>
            Ex.: This is usually used for storing company specific data.
            </para>
            <para>
            Ex.: ./AppData/Roaming/{ApplicationName}/{CompanyId}
            </para>
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
            <remarks>
            If the directory doesn't exists, it gets created.
            </remarks>
        </member>
        <member name="M:Atom.IApplicationEnvironment.GetTempDirectoryPath(System.Boolean@)">
            <summary>
            The directory where temp files are stored.
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
            <remarks>
            If the directory doesn't exists, it gets created.
            </remarks>
        </member>
        <member name="M:Atom.IApplicationEnvironment.GetLogsDirectoryPath(System.Boolean@)">
            <summary>
            The directory where log files are stored.
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
            <remarks>
            If the directory doesn't exists, it gets created.
            </remarks>
        </member>
        <member name="M:Atom.IApplicationEnvironment.GetLocalDataStorageDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the local data storages are stored.
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
            <remarks>
            If the directory doesn't exists, it gets created.
            </remarks>
        </member>
        <member name="M:Atom.IApplicationEnvironment.GetOptionsDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the options are stored.
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
            <remarks>
            If the directory doesn't exists, it gets created.
            </remarks>
        </member>
        <member name="M:Atom.IApplicationEnvironment.GetLanguagePacksDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the language packs are stored.
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
            <remarks>
            If the directory doesn't exists, it gets created.
            </remarks>
        </member>
        <member name="M:Atom.IApplicationEnvironment.ApplyRootExtension(System.String)">
            <summary>
            Applies a path extension to the specified <paramref name="path"/>
            usually taking into consideration the <see cref="M:Atom.IApplicationEnvironment.GetApplicationDataDirectoryPath(System.Boolean@)"/> conditions.
            Ex.: If <paramref name="path"/> is ./Application/PlugIns/Billing
                 the returned path will be ./Application/PlugIns/Billing/{CompanyId}
            </summary>
            <param name="path">The path</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IdBasedApplicationEnvironment">
            <summary>
            A <see cref="T:Atom.DefaultApplicationEnvironment"/> that uses a specified <see cref="P:Atom.IdBasedApplicationEnvironment.Id"/> to build the directory paths
            </summary>
        </member>
        <member name="P:Atom.IdBasedApplicationEnvironment.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:Atom.IdBasedApplicationEnvironment.#ctor(System.Uri,Atom.AtomApplication,System.String,Atom.LanguageCode,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> that points to the host of the application if any.</param>
            <param name="applicationName">The application name</param>
            <param name="application">The application</param>
            <param name="id">The id</param>
            <param name="language">The selected language</param>
        </member>
        <member name="M:Atom.IdBasedApplicationEnvironment.#ctor(System.Uri,Atom.AtomApplication,Atom.LanguageCode,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> that points to the host of the application if any.</param>
            <param name="id">The id</param>
            <param name="application">The application</param>
            <param name="language">The selected language</param>
        </member>
        <member name="M:Atom.IdBasedApplicationEnvironment.ApplyRootExtension(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Atom.IFileManager">
            <summary>
            Handles reading/writing and querying the file system
            </summary>
        </member>
        <member name="M:Atom.IFileManager.WriteTextToFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFileManager.WriteTextToFileAsync(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="encoding">The encoding</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFileManager.WriteTextToFile(System.String,System.String,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFileManager.WriteTextToFile(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="encoding">The encoding</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFileManager.NormalizePath(System.String)">
            <summary>
            Normalizing a path based on the current operating system
            </summary>
            <param name="path">The path to normalize</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IFileManager.ResolvePath(System.String)">
            <summary>
            Resolves any relative elements of the path to absolute
            </summary>
            <param name="path">The path to resolve</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IFrameworkEnvironment">
            <summary>
            Provides abstractions for the framework environment
            </summary>
        </member>
        <member name="P:Atom.IFrameworkEnvironment.Configuration">
            <summary>
            The configuration of the environment, typically Development or Production
            </summary>
        </member>
        <member name="P:Atom.IFrameworkEnvironment.IsDevelopment">
            <summary>
            True if we are in a development (specifically, debuggable) environment
            </summary>
        </member>
        <member name="P:Atom.IFrameworkEnvironment.IsMobile">
            <summary>
            Indicates if we are a mobile platform
            </summary>
        </member>
        <member name="T:Atom.IHealthCheck">
            <summary>
            Provides abstractions for an object that executes a health check
            </summary>
        </member>
        <member name="F:Atom.IHealthCheck.DefaultIconPathData">
            <summary>
            The default icon that represents the health checks
            </summary>
        </member>
        <member name="P:Atom.IHealthCheck.SupportsMultithreading">
            <summary>
            A flag indicating whether the health check operation can be executed in-parallel in a different thread
            </summary>
        </member>
        <member name="M:Atom.IHealthCheck.ExecuteAsync">
            <summary>
            Executes the health check and returns a collection of <see cref="T:Atom.HealthCheckError"/>
            if any are discovered
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.IMapper">
            <summary>
            Provides abstractions for a mapper
            </summary>
        </member>
        <member name="M:Atom.IMapper.Map(System.Object,System.Object)">
            <summary>
            Copies the values of the <paramref name="source"/> that can be copied to the specified <paramref name="destination"/>
            </summary>
            <param name="source">The source</param>
            <param name="destination">The destination</param>
        </member>
        <member name="M:Atom.IMapper.Map``2(``0,``1)">
            <summary>
            Copies the values of the <paramref name="source"/> that can be copied to the specified <paramref name="destination"/>
            </summary>
            <typeparam name="TSource">The type of the source</typeparam>
            <typeparam name="TDestination">The type of the destination</typeparam>
            <param name="source">The source</param>
            <param name="destination">The destination</param>
        </member>
        <member name="M:Atom.IMapper.Map(System.Object,System.Type)">
            <summary>
            Copies the values of the <paramref name="source"/> that can be copied to a new instance of a <paramref name="destinationType"/>
            </summary>
            <param name="source">The source</param>
            <param name="destinationType">The type of the destination</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IMapper.CanMap(System.Type,System.Type)">
            <summary>
            Returns a flag indicating whether the mapper can map between the specified <paramref name="sourceType"/>
            and the specified <paramref name="destinationType"/>
            </summary>
            <param name="sourceType">The source type</param>
            <param name="destinationType">The destination type</param>
            <returns></returns>
        </member>
        <member name="T:Atom.ITaskManager">
            <summary>
            Handles anything to do with Tasks
            </summary>
        </member>
        <member name="M:Atom.ITaskManager.LockTaskAsync(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the task if the updating flag is not set.
            If the flag is true (indicating the task is already running) then the task is not run.
            If the flag is false (indicating no running task) then the task is run.
            Once the task is finished if it was run, then the flag is reset to false.
            NOTE: This method doesn't queue tasks, it only prevents them from running!
            </summary>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to run if it's not already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ITaskManager.LockTaskAsync``1(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            Runs the task if the updating flag is not set.
            If the flag is true (indicating the task is already running) then the task is not run.
            If the flag is false (indicating no running task) then the task is run.
            Once the task is finished if it was run, then the flag is reset to false.
            NOTE: This method doesn't queue tasks, it only prevents them from running!
            </summary>
            <typeparam name="T">The type of the return value of the task</typeparam>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to run if it's not already running</param>
            <param name="defaultValue">The default value to return if the task is already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.ITaskManager.RunAndForget(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <remarks>
            The passed in Task can't be awaited as it is not required to!
            Any errors that may occurre are being logged by the logger
            </remarks>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.ITaskManager.RunAsync(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.ITaskManager.RunAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            Task(TResult) returned by function.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.ITaskManager.RunAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            Task(TResult) returned by function.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.ITaskManager.RunAsync``1(System.Func{``0},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a Task(TResult)
            object that represents that work. A cancellation token allows the work to be
            cancelled.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.ITaskManager.RunAsync``1(System.Func{``0},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task`1
            object that represents that work.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task object that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.ITaskManager.RunAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work.</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.ITaskManager.RunAsync(System.Action,System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task
            object that represents that work. A cancellation token allows the work to be
            cancelled.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The action parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.ITaskManager.RunAsync(System.Action,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task
            object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">The action parameter was null.</exception>
        </member>
        <member name="T:Atom.StreamExtensions">
            <summary>
            Extension methods for <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:Atom.StreamExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream,System.IProgress{System.Int64},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the bytes from the current stream and writes them to another
            stream. Both streams positions are advanced by the number of bytes copied.
            </summary>
            <param name="source">The current stream.</param>
            <param name="destination">The stream to which the contents of the current stream will be copied.</param>
            <param name="bufferSize">
            The size, in bytes, of the buffer. This value must be greater than zero. The
            default size is 81920.
            </param>
            <param name="progress">A progress reporter</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StreamExtensions.ToByteArray(System.IO.Stream)">
            <summary>
            Copies the content of the specified <paramref name="source"/> into a
            <see cref="!:byte[]"/>
            </summary>
            <param name="source">The current stream.</param>
            <returns></returns>
        </member>
        <member name="T:Atom.StringConstants">
            <summary>
            Constants related to <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="F:Atom.StringConstants.NameHeader">
            <summary>
            Header key that represents a name
            </summary>
        </member>
        <member name="T:Atom.StringExtensions">
            <summary>
            Extension methods for strings
            </summary>
        </member>
        <member name="F:Atom.StringExtensions.mPascalCasedRegex">
            <summary>
            The regular expression for identifying a Pascal cased word
            </summary>
        </member>
        <member name="M:Atom.StringExtensions.ToLimitedString(System.String,System.Int32)">
            <summary>
            Returns a string based on the specified <paramref name="value"/> with the
            specified <paramref name="length"/> if the length of the <paramref name="value"/>
            exceeds the <paramref name="length"/>.
            </summary>
            <remarks>
            <para>Example</para>
            <para>
            <paramref name="value"/>: This is a sentence
            </para>
            <para>
            <paramref name="length"/>: 5
            </para>
            <para>
            result: Thi...ce
            </para>
            </remarks>
            <param name="value">The string value</param>
            <param name="length">The length the string value should be limited to</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.GetLetters(System.String)">
            <summary>
            A function that takes in a string and returns only its letters
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsHTML(System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="value"/>
            is an HTML value
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsXAML(System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="value"/>
            is an XAML value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsXML(System.String)">
            <summary>
            Returns a flag indicating whether the <paramref name="value"/> is an
            XML value
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ExtractUntil(System.String,System.Char)">
            <summary>
            Extracts a string from the specified <paramref name="value"/> from the start of the string until it reaches a <paramref name="stoppingChar"/> 
            </summary>
            <param name="value">The value</param>
            <param name="stoppingChar">The character that terminate the extraction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to camel case.
            Acronyms are also taken into consideration.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToVersion(System.String)">
            <summary>
            Extracts the <see cref="T:System.Version"/> from the specified <paramref name="s"/>
            </summary>
            <param name="s">The version string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.RemovePunctuations(System.String)">
            <summary>
            Removes the punctuations from the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.SubStringBetween(System.String,System.Char,System.Char)">
            <summary>
            A function that extracts a string from the specified <paramref name="value"/> that's between the <paramref name="startChar"/> and the <paramref name="endChar"/> characters
            </summary>
            <param name="value">The value</param>
            <param name="startChar">The starting character</param>
            <param name="endChar">The ending character</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.GetLast(System.String,System.Int32)">
            <summary>
            Gets returns a substring of <paramref name="length"/> that contains the last characters
            of the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <param name="length">The number of characters to return</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Checks whether the string is null or empty
            </summary>
            <param name="value">The value</param>
            <returns>Returns true if the string is null or empty, false otherwise</returns>
        </member>
        <member name="M:Atom.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Checks whether the string is null or whitespace
            </summary>
            <param name="value">The value</param>
            <returns>Return true if the string is null or white space, false otherwise</returns>
        </member>
        <member name="M:Atom.StringExtensions.GetLineIndex(System.String,System.Int32)">
            <summary>
            Returns the zero-based line index of the specified <paramref name="value"/> that contains the character
            at the specified <paramref name="index"/>
            </summary>
            <param name="value">The value</param>
            <param name="index">The index of the character in the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsLatinOrSpaces(System.String)">
            <summary>
            Checks whether the string is composed by Latin characters only
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsEmail(System.String)">
            <summary>
            Checks if the inserted string is a valid email
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsPhoneNumber(System.String)">
            <summary>
            Checks if the <paramref name="value"/> is a valid phone number.
            <para>
            Ex.: 30 6969696969, 1 6969696969.
            </para>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsE164PhoneNumber(System.String)">
            <summary>
            Checks if the <paramref name="value"/> is a valid E.164 phone number.
            Ex.: +30 6969696969, +161 969696969.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsFileName(System.String)">
            <summary>
            Checks if the <paramref name="value"/> is a valid file name
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsDirectoryPath(System.String)">
            <summary>
            Checks if the <paramref name="value"/> is a valid directory path
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ApplySpacingToPascalCaseString(System.String)">
            <summary>
            Applies spacing to a Pascal case string.
            Ex. UnitedStates -> United States
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsUrl(System.String)">
            <summary>
            Checks if the specified <paramref name="value"/> is a valid URL
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.GetLastPart(System.String,System.Char)">
            <summary>
            Returns the last part of the specified string
            </summary>
            <param name="value">The value</param>
            <param name="separator">The string separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToBool(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Boolean"/>
            </summary>
            <param name="value">The value</param>
            <remarks>
            <para>Values that are translated to true: 'TRUE', 'True', 'true', '1', 'YES', 'Yes', 'yes'.</para>
            <para><see cref="!:null"/> is translated to false.</para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNumber(System.String,System.Type)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a number of the specified <paramref name="numericType"/>
            </summary>
            <param name="value">The value</param>
            <param name="numericType">The numeric type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNumber``1(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a number of the specified <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The numeric type</typeparam>
            <param name="value">The </param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToSByte(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.SByte"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableSByte(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:sbyte?"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToByte(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.Byte"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableByte(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:byte?"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToShort(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.Int16"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableShort(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:short?"/>
            </summary>
            <param name="value">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToUnsignedShort(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.UInt16"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableUnsignedShort(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:ushort?"/>
            </summary>
            <param name="value">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToInt(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to an <see cref="T:System.Int32"/>
            </summary>
            <remarks>
                An Int32 can only be up to 9 digits long!
            </remarks>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableInt(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:int?"/>
            </summary>
            <param name="value">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToUnsignedInt(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to an <see cref="T:System.UInt32"/>
            </summary>
            <remarks>
                An Int32 can only be up to 9 digits long!
            </remarks>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableUnsignedInt(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:uint?"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToLong(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.Int64"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableLong(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:long?"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToUnsignedLong(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.UInt64"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableUnsignedLong(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:ulong?"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToFloat(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.Single"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableFloat(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:float?"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToDouble(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.Double"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableDouble(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:double?"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToDecimal(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.Decimal"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToNullableDecimal(System.String)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="!:decimal?"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ExtractNumber(System.String)">
            <summary>
            Extracts the first number that is contained in the given <paramref name="value"/>.
            Ex.: Input -> test.test..t2.13..4
                 Output -> 2.13
                 
                 Input -> test1test2
                 Output -> test1
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.ToFileName(System.String)">
            <summary>
            Replaces all the characters of the specified <paramref name="value"/> that 
            can not be placed in the name of a file
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsHex(System.String)">
            <summary>
            Checks if the specified <paramref name="value"/> is a valid hex number representation
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsHexColor(System.String)">
            <summary>
            Checks if the specified <paramref name="value"/> is a valid hex color representation
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.NotNullOrEmpty(System.String)">
            <summary>
            Returns the specified <paramref name="value"/> if it's not null or empty,
            otherwise it throws an <see cref="T:System.ArgumentNullException"/>
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.TryGetWordAtPosition(System.String,System.Int32,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Gets the word contained in the specified <paramref name="value"/> that has 
            a character at the specified <paramref name="position"/>
            </summary>
            <param name="value">The value</param>
            <param name="position">The character position</param>
            <param name="startingPosition">The start index of the word</param>
            <param name="endingPosition">The end index of the word</param>
            <param name="word">The word if it was found</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.GetAllIndexesOf(System.String,System.String)">
            <summary>
            Gets all the indexes of the specified <paramref name="value"/> where the specified <paramref name="subString"/>
            is contained
            </summary>
            <param name="value">The value</param>
            <param name="subString">The sub string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.GetLineText(System.String,System.Int32)">
            <summary>
            Gets the text of the specified <paramref name="value"/> at the line with the specified <paramref name="index"/>
            </summary>
            <param name="value">The value</param>
            <param name="index">The index of the line</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.GetLineLength(System.String,System.Int32)">
            <summary>
            Gets the length of the text of the specified <paramref name="value"/> at the line with the specified <paramref name="index"/>
            </summary>
            <param name="value">The value</param>
            <param name="index">The index of line</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsIPAddress(System.String)">
            <summary>
            Checks whether the specified <paramref name="value"/> is a valid IP address
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsDouble(System.String)">
            <summary>
            Checks if the specified <paramref name="value"/> is a number or not
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsInteger(System.String)">
            <summary>
            Checks if the specified <paramref name="value"/> is a signed integer or not
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsLong(System.String)">
            <summary>
            Checks if the specified <paramref name="value"/> is a signed integer or not
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.IsNonFloatingPointNumber(System.String)">
            <summary>
            Checks if the specified <paramref name="value"/> is a non-floating point number
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.Contains(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if any of the specified <paramref name="values"/> is contained in the specified <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringExtensions.NormalizeFloatingPointNumber(System.String)">
            <summary>
            Normalizes a floating point number text representation
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.StringHelpers">
            <summary>
            Helper methods for <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="F:Atom.StringHelpers.mXMLTagsRegex">
            <summary>
            The regular expression used for search for XML tags
            </summary>
        </member>
        <member name="M:Atom.StringHelpers.GenerateRandomString(System.Int32,System.String)">
            <summary>
            Generates a random <see cref="T:System.String"/> value with the specified <paramref name="length"/>
            using the specified <paramref name="chars"/>
            </summary>
            <param name="length">The length</param>
            <param name="chars">The characters that should be used for generating the string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.GenerateRandomString(System.Int32,System.Char[])">
            <summary>
            Generates a random <see cref="T:System.String"/> value with the specified <paramref name="length"/>
            using the specified <paramref name="chars"/>
            </summary>
            <param name="length">The length</param>
            <param name="chars">The characters that should be used for generating the string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.RemoveDiacritics(System.String)">
            <summary>
            Removes the diacritics from the specified <paramref name="s"/>.
            Ex.: Λογικά -> Λογικα
            </summary>
            <param name="s">The string value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.GenerateUniqueName(System.String)">
            <summary>
            Generates a unique name that starts with the specified <paramref name="prefix"/>
            </summary>
            <param name="prefix">The prefix</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.FirstCharToUpper(System.String)">
            <summary>
            Returns the specified <paramref name="s"/> with the first char converted to upper case
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.FirstCharToLower(System.String)">
            <summary>
            Returns the specified <paramref name="s"/> with the first char converted to lower case
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.SplitCamelCase(System.String)">
            <summary>
            Splits the specified <paramref name="s"/> to words based on the upper case letter.
            Acronyms are also taken into consideration.
            Ex.: ThisIsATestAPI => This, Is, A, Test, API
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.AggregateToSentence(System.String[],System.Boolean)">
            <summary>
            Aggregates the specified words to a sentence meaning that
            the first letter of the first word is capital. Acronyms
            are also kept using capital letters.
            </summary>
            <param name="words">The words</param>
            <param name="shouldFirstCharBeCapital">A flag indicating whether the first character of the first word should be a capital letter</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.AggregateNonNullOrEmptyString(System.String,System.String[])">
            <summary>
            Aggregates the specified <paramref name="values"/> into a <see cref="T:System.String"/>.
            NOTE: This method converts the <paramref name="values"/> to <see cref="T:System.String"/>
                  using the <see cref="M:System.Object.ToString"/> method!
            NOTE: This method uses ", " as the items separator!
            </summary>
            <param name="values">The values</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.AggregateNonNullOrEmptyString(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Aggregates the specified <paramref name="values"/> into a <see cref="T:System.String"/>.
            NOTE: This method converts the <paramref name="values"/> to <see cref="T:System.String"/>
                  using the <see cref="M:System.Object.ToString"/> method!
            NOTE: This method uses ", " as the items separator!
            </summary>
            <param name="values">The values</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.StringCompare(System.String,Atom.StringEqualityOperator,System.String)">
            <summary>
            Compares the <paramref name="value"/> against the <paramref name="s"/> using the specified <paramref name="stringEqualityOperator"/>.
            Ex.: Operator = <see cref="F:Atom.StringEqualityOperator.Contains"/> -> <paramref name="s"/>.Contains(<paramref name="value"/>).
            </summary>
            <param name="stringEqualityOperator">The operator</param>
            <param name="s">The string value</param>
            <param name="value">The string value that will be used by the filter</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.NormalizeSpaces(System.String)">
            <summary>
            Normalizes the specified <paramref name="s"/> by converting multiple spaces into one
            </summary>
            <param name="s">The string value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.RemoveXMLTags(System.String)">
            <summary>
            Removes the HTML tags from the specified <paramref name="s"/>
            </summary>
            <param name="s">The string value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.RemoveInvalidFileNameCharacters(System.String)">
            <summary>
            Removes the invalid file name characters from the specified <paramref name="s"/>
            </summary>
            <param name="s">The string value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.StringHelpers.Singularize(System.String)">
            <summary>
            Converts a plural English word to its singular form.
            The method handles both regular and some irregular plural forms.
            </summary>
            <param name="plural">The plural word to be converted.</param>
            <returns>The singular form of the input word. If no rule applies, the original word is returned.</returns>
        </member>
        <member name="M:Atom.StringHelpers.Pluralize(System.String)">
            <summary>
            Attempts to pluralize the specified <paramref name="singular"/> according to the rules of the English language.
            </summary>
            <remarks>
            This function attempts to pluralize as many words as practical by following these rules:
            <list type="bullet">
            	<item><description>Words that end with "y" (but not with a vowel preceding the y) are pluralized by replacing the "y" with "ies".</description></item>
            	<item><description>Words that end with "us", "ss", "x", "ch" or "sh" are pluralized by adding "es" to the end of the text.</description></item>
            	<item><description>Words that end with "f" or "fe" are pluralized by replacing the "f(e)" with "ves".</description></item>
            </list>
            </remarks>
            <param name="singular">The text to pluralize.</param>
            <returns>A string that consists of the text in its pluralized form.</returns>
        </member>
        <member name="T:Atom.TaskHelpers">
            <summary>
            Helper methods associated with <see cref="T:System.Threading.Tasks.Task"/>
            </summary>
        </member>
        <member name="M:Atom.TaskHelpers.RunAndForget(System.Func{System.Threading.Tasks.Task})">
            <summary>
             Runs a TPL Task fire-and-forget style, the right way - in the
            background, separate from the current thread, with no risk
            of it trying to rejoin the current thread.
            </summary>
            <param name="taskDelegate">The task to run</param>
        </member>
        <member name="T:Atom.TimeSpanExtensions">
            <summary>
            Extension methods for <see cref="T:System.TimeSpan"/>
            </summary>
        </member>
        <member name="M:Atom.TimeSpanExtensions.ToHoursAndMinutesShortLocalizedString(System.TimeSpan,System.Boolean)">
            <summary>
            Returns a short localized string that represents the hours and the minutes specified <paramref name="timeSpan"/>
            </summary>
            <param name="timeSpan">The time span</param>
            <param name="shouldAppendTheHoursPrefix">A flag indicating whether the <see cref="M:Atom.ILocalization.GetHoursShort"/> should be appended to the result</param>
        </member>
        <member name="M:Atom.TimeSpanExtensions.ToHoursAndMinutesShortLocalizedString(System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Returns a short localized string that represents the hours and the minutes the specified <paramref name="timeSpan"/>
            </summary>
            <param name="timeSpan">The time span</param>
            <param name="shouldAppendTheHoursPrefix">A flag indicating whether the <see cref="M:Atom.ILocalization.GetMinutesShort"/> should be appended to the result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeSpanExtensions.ToMinutesAndSecondsShortLocalizedString(System.TimeSpan,System.Boolean)">
            <summary>
            Returns a short localized string that represents the minutes and the seconds specified <paramref name="timeSpan"/>
            </summary>
            <param name="timeSpan">The time span</param>
            <param name="shouldAppendTheMinutesPrefix">A flag indicating whether the <see cref="M:Atom.ILocalization.GetMinutesShort"/> should be appended to the result</param>
        </member>
        <member name="M:Atom.TimeSpanExtensions.ToMinutesAndSecondsShortLocalizedString(System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Returns a short localized string that represents the minutes and the seconds the specified <paramref name="timeSpan"/>
            </summary>
            <param name="timeSpan">The time span</param>
            <param name="shouldAppendTheMinutesPrefix">A flag indicating whether the <see cref="M:Atom.ILocalization.GetMinutesShort"/> should be appended to the result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeSpanExtensions.ToLocalizedString(System.TimeSpan)">
            <summary>
            Returns a localized string that represents the specified <paramref name="timeSpan"/>
            </summary>
            <param name="timeSpan">The time span</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeSpanExtensions.ToLocalizedString(System.Nullable{System.TimeSpan})">
            <summary>
            Returns a localized string that represents the specified <paramref name="timeSpan"/>
            </summary>
            <param name="timeSpan">The time span</param>
            <returns></returns>
        </member>
        <member name="T:Atom.TimeSpanHelpers">
            <summary>
            Helper methods related to <see cref="T:System.TimeSpan"/>
            </summary>
        </member>
        <member name="M:Atom.TimeSpanHelpers.ToDouble(System.TimeSpan)">
            <summary>
            Converts the specified <paramref name="timeSpan"/> to a <see cref="T:System.Double"/>
            </summary>
            <param name="timeSpan">The time span</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeSpanHelpers.ToDouble(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the specified <paramref name="timeSpan"/> to a <see cref="!:double?"/>
            </summary>
            <param name="timeSpan">The time span</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeSpanHelpers.ToTimeSpan(System.Double)">
            <summary>
            Converts the specified <paramref name="time"/> to a <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="time">The time span</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeSpanHelpers.ToTimeSpan(System.Nullable{System.Double})">
            <summary>
            Converts the specified <paramref name="time"/> to a <see cref="!:TimeSpan?"/>
            </summary>
            <param name="time">The time span</param>
            <returns></returns>
        </member>
        <member name="T:Atom.TimeOnlyExtensions">
            <summary>
            Extension methods for <see cref="T:System.TimeOnly"/>
            </summary>
        </member>
        <member name="M:Atom.TimeOnlyExtensions.ToISO8601String(System.TimeOnly)">
            <summary>
            Returns a string that represents the specified <paramref name="value"/> using the ISO8601 format
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeOnlyExtensions.HourMinuteString(System.TimeOnly,System.Boolean)">
            <summary>
            Gets a string that represents the hour and the minute value of the <paramref name="time"/>
            </summary>
            <param name="time">The time</param>
             <param name="useTwoChars">A flag indicating whether two characters should be used at the presentation of the hour and the minute value ex: 01, 02, 03...</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeOnlyExtensions.HourString(System.TimeOnly,System.Boolean)">
            <summary>
            Returns the hour value in the form of a string.
            </summary>
            <param name="time">The time</param>
            <param name="useTwoChars">A flag indicating whether two characters should be used at the presentation of the value ex: 01, 02, 03...</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeOnlyExtensions.MinuteString(System.TimeOnly,System.Boolean)">
            <summary>
            Returns the minute value in the form of a string.
            </summary>
            <param name="time">The time</param>
            <param name="useTwoChars">A flag indicating whether two characters should be used at the presentation of the value ex: 01, 02, 03...</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeOnlyExtensions.SecondString(System.TimeOnly,System.Boolean)">
            <summary>
            Returns the second value in the form of a string.
            </summary>
            <param name="time">The time</param>
            <param name="useTwoChars">A flag indicating whether two characters should be used at the presentation of the value ex: 01, 02, 03...</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeOnlyExtensions.TotalMinutes(System.TimeOnly)">
            <summary>
            Returns the number of minutes that represent the specified <paramref name="time"/>
            </summary>
            <param name="time">The time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TimeOnlyExtensions.TotalSeconds(System.TimeOnly)">
            <summary>
            Returns the number of minutes that represent the specified <paramref name="time"/>
            </summary>
            <param name="time">The time</param>
            <returns></returns>
        </member>
        <member name="T:Atom.TimeOnlyFactory">
            <summary>
            Provides factory methods for creating <see cref="T:System.TimeOnly"/> instances
            </summary>
        </member>
        <member name="M:Atom.TimeOnlyFactory.FromDateTime(System.DateTime)">
            <summary>
            Creates and returns a <see cref="T:System.TimeOnly"/> using the time part of the specified <paramref name="dateTime"/>
            </summary>
            <param name="dateTime">The date time</param>
            <returns></returns>
        </member>
        <member name="T:Atom.IClonablePropertyTranslator`1">
            <summary>
            Provides abstractions for a translator that gives access to its translation maps
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="T:Atom.IPropertyTranslator">
            <summary>
            Provides abstractions for a translator when a the type of the translated models is unknown
            </summary>
        </member>
        <member name="P:Atom.IPropertyTranslator.ModelType">
            <summary>
            The type of the model whose properties are used for setting translators
            </summary>
        </member>
        <member name="P:Atom.IPropertyTranslator.TranslationMaps">
            <summary>
            The translation maps.
            NOTE: This method should create a copy of the original translation maps to prevent its external modification!
            </summary>
        </member>
        <member name="M:Atom.IPropertyTranslator.UnsafeTranslate(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info of the related property whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IPropertyTranslator.UnsafeSetTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Sets a translator of the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translation">The translation</param>
        </member>
        <member name="T:Atom.IPropertyTranslator`1">
            <summary>
            Provides abstractions for a translator
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="M:Atom.IPropertyTranslator`1.Translate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`0)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results
            </summary>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IPropertyTranslator`1.UnsafeTranslate(System.Reflection.PropertyInfo,`0)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property of the <typeparamref name="TClass"/> whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.IPropertyTranslator`1.SetTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="T:Atom.PropertyTranslator`1">
            <summary>
            The base for all the translators.
            A translator class takes in a <typeparamref name="TClass"/> and translates it's property values based on custom translation maps
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="F:Atom.PropertyTranslator`1.mObjectTranslationMaps">
            <summary>
            The member of the <see cref="P:Atom.PropertyTranslator`1.ObjectTranslationMaps"/> property used for lazy-loading
            </summary>
        </member>
        <member name="P:Atom.PropertyTranslator`1.ModelType">
            <inheritdoc/>
        </member>
        <member name="P:Atom.PropertyTranslator`1.TranslationMaps">
            <inheritdoc/>
        </member>
        <member name="P:Atom.PropertyTranslator`1.ObjectTranslationMaps">
            <summary>
            The object mapping of the <typeparamref name="TClass"/>
            </summary>
        </member>
        <member name="M:Atom.PropertyTranslator`1.CopyMapsFrom(Atom.IClonablePropertyTranslator{`0})">
            <summary>
            Copies the maps from the specified <paramref name="translator"/>
            </summary>
            <param name="translator">The translator</param>
        </member>
        <member name="M:Atom.PropertyTranslator`1.Translate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`0)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results
            </summary>
            <typeparam name="TProperty">The type of the property</typeparam>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslator`1.UnsafeTranslate(System.Reflection.PropertyInfo,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.PropertyTranslator`1.SetTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslator`1.UnsafeSetTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Sets a translator of the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslator`1.Atom#IPropertyTranslator{TClass}#SetTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslator`1.Atom#IPropertyTranslator#UnsafeTranslate(System.Reflection.PropertyInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Atom.PropertyTranslator`1.Atom#IPropertyTranslator#UnsafeSetTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Atom.PropertyTranslator`1.TranslatePropertyValue(System.Reflection.PropertyInfo,`0)">
            <summary>
            Translates the value of the given <paramref name="propertyInfo"/> of the specified <paramref name="model"/>.
            NOTE: This method should always get overridden when adding new property maps in order to add and use the new translators
                  by using the type of the value
            </summary>
            <example>
            if (propertyInfo.PropertyType == typeof(object))
                return TranslateOrDefault(ObjectTranslationMaps, propertyInfo.Name, propertyInfo.GetValue(model));
            </example>
            <param name="propertyInfo"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslator`1.TranslateOrDefault(System.Collections.Generic.IEnumerable{Atom.BasePropertyTranslationMap},System.String,System.Object,System.Object)">
            <summary>
            Translates the given value if there is a translation map for the given property,
            otherwise it returns the given value
            </summary>
            <param name="translationMaps">The translation maps</param>
            <param name="propertyName">The given property</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <param name="value">The given value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.PropertyTranslatorExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.PropertyTranslator`1"/>
            </summary>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetTranslator``2(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetBooleanTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Object)">
            <summary>
            Sets a <see cref="T:System.Boolean"/> translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="trueValueTranslation">The value to translated to a <see cref="!:true"/> value</param>
            <param name="falseValueTranslation">The value to translated to a <see cref="!:false"/> value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetBooleanTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String)">
            <summary>
            Sets a <see cref="T:System.Boolean"/> translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="trueValueTranslation">The value to translated to a <see cref="!:true"/> value</param>
            <param name="falseValueTranslation">The value to translated to a <see cref="!:false"/> value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetBooleanTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Boolean}}},System.Object,System.Object)">
            <summary>
            Sets a <see cref="!:bool?"/> translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="trueValueTranslation">The value to translated to a <see cref="!:true"/> value</param>
            <param name="falseValueTranslation">The value to translated to a <see cref="!:false"/> value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetBooleanTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Boolean}}},System.String,System.String)">
            <summary>
            Sets a <see cref="!:bool?"/> translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="trueValueTranslation">The value to translated to a <see cref="!:true"/> value</param>
            <param name="falseValueTranslation">The value to translated to a <see cref="!:false"/> value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalDateTimeTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.DateTimeOffset}},System.String)">
            <summary>
            Sets a <see cref="T:System.DateTimeOffset"/> translator that translates the date time offset to the local date time
            and returns a string using the specified <paramref name="format"/>
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="format">The date format</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalDateTimeTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.DateTimeOffset}}},System.String)">
            <summary>
            Sets a <see cref="!:DateTimeOffset?"/> translator that translates the date time offset to the local date time
            and returns a string using the specified <paramref name="format"/>
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="format">The date format</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Byte}})">
            <summary>
            Sets a <see cref="T:System.Byte"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Byte}}})">
            <summary>
            Sets a <see cref="!:byte?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.SByte}})">
            <summary>
            Sets a <see cref="T:System.SByte"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.SByte}}})">
            <summary>
            Sets a <see cref="!:sbyte?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}})">
            <summary>
            Sets a <see cref="T:System.Int16"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}})">
            <summary>
            Sets a <see cref="!:short?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt16}})">
            <summary>
            Sets a <see cref="T:System.UInt16"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt16}}})">
            <summary>
            Sets a <see cref="!:ushort?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Sets a <see cref="T:System.Int32"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>
            Sets a <see cref="!:int?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt32}})">
            <summary>
            Sets a <see cref="T:System.UInt32"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt32}}})">
            <summary>
            Sets a <see cref="!:uint?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>
            Sets a <see cref="T:System.Int64"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>
            Sets a <see cref="!:long?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt64}})">
            <summary>
            Sets a <see cref="T:System.UInt64"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt64}}})">
            <summary>
            Sets a <see cref="!:ulong?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>
            Sets a <see cref="T:System.Single"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>
            Sets a <see cref="!:float?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>
            Sets a <see cref="T:System.Double"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>
            Sets a <see cref="!:double?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>
            Sets a <see cref="T:System.Decimal"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetLocalizedCurrencyTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>
            Sets a <see cref="!:decimal?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Byte}})">
            <summary>
            Sets a <see cref="T:System.Byte"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Byte}}})">
            <summary>
            Sets a <see cref="!:byte?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.SByte}})">
            <summary>
            Sets a <see cref="T:System.SByte"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.SByte}}})">
            <summary>
            Sets a <see cref="!:sbyte?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int16}})">
            <summary>
            Sets a <see cref="T:System.Int16"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int16}}})">
            <summary>
            Sets a <see cref="!:short?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt16}})">
            <summary>
            Sets a <see cref="T:System.UInt16"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt16}}})">
            <summary>
            Sets a <see cref="!:ushort?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Sets a <see cref="T:System.Int32"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>
            Sets a <see cref="!:int?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt32}})">
            <summary>
            Sets a <see cref="T:System.UInt32"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt32}}})">
            <summary>
            Sets a <see cref="!:uint?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>
            Sets a <see cref="T:System.Int64"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>
            Sets a <see cref="!:long?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.UInt64}})">
            <summary>
            Sets a <see cref="T:System.UInt64"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.UInt64}}})">
            <summary>
            Sets a <see cref="!:ulong?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>
            Sets a <see cref="T:System.Single"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>
            Sets a <see cref="!:float?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>
            Sets a <see cref="T:System.Double"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>
            Sets a <see cref="!:double?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>
            Sets a <see cref="T:System.Decimal"/> translator that translates the value to a percentage string value
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetPercentageTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>
            Sets a <see cref="!:decimal?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetEnumerableAggragationTranslator``2(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.String)">
            <summary>
            Sets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> translator that aggregates the values of the enumerable
            using the specified <paramref name="separator"/> after calling their <see cref="M:System.Object.ToString"/>
            method!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <typeparam name="TKey">The type of the items of the enumerable</typeparam>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetEnumerableAggragationTranslator``2(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``1,System.String},System.String)">
            <summary>
            Sets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> translator that aggregates the values of the enumerable
            using the specified <paramref name="separator"/> after calling their <see cref="M:System.Object.ToString"/>
            method!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <typeparam name="TKey">The type of the items of the enumerable</typeparam>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="extractor">The string extractor that is used to convert an item to a string</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetTimeSpanTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.TimeSpan}})">
            <summary>
            Sets a translator for a <see cref="T:System.TimeSpan"/> property
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.PropertyTranslatorExtensions.SetTimeSpanTranslator``1(Atom.PropertyTranslator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.TimeSpan}}})">
            <summary>
            Sets a translator for a <see cref="!:TimeSpan?"/> property
            </summary>
            <param name="translator">The translator</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.TypeBuilderHelpers">
            <summary>
            Helper methods for <see cref="T:System.Reflection.Emit.TypeBuilder"/>
            </summary>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.GenerateUniqueTypeName">
            <summary>
            Generates a unique type name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.CompileResultType(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Type},System.Action{System.Reflection.Emit.PropertyBuilder})">
            <summary>
            Creates and returns a <see cref="T:System.Type"/> for a class
            that contains the specified <paramref name="properties"/>
            </summary>
            <param name="assemblyName">The name of the assembly</param>
            <param name="name">The name of the type</param>
            <param name="properties">The properties the type should contain</param>
            <param name="configure">Action that is used for configuring each property builder</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.CompileResultType(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},System.Action{System.Reflection.Emit.PropertyBuilder})">
            <summary>
            Creates and returns a <see cref="T:System.Type"/> for a class
            that contains the specified <paramref name="properties"/>
            </summary>
            <param name="name">The name of the type</param>
            <param name="properties">The properties the type should contain</param>
            <param name="configure">Action that is used for configuring each property builder</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.CompileResultType(System.Collections.Generic.IDictionary{System.String,System.Type},System.Action{System.Reflection.Emit.PropertyBuilder})">
            <summary>
            Creates and returns a <see cref="T:System.Type"/> for a class using a uniquely generated name
            that contains the specified <paramref name="properties"/>
            </summary>
            <param name="properties">The properties the type should contain</param>
            <param name="configure">Action that is used for configuring each property builder</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.BuildResultType(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Type},System.Action{System.Reflection.Emit.PropertyBuilder})">
            <summary>
            Creates and returns a <see cref="T:System.Type"/> for a class
            that contains the specified <paramref name="properties"/>
            </summary>
            <param name="assemblyName">The name of the assembly</param>
            <param name="name">The name of the type</param>
            <param name="properties">The properties the type should contain</param>
            <param name="configure">Action that is used for configuring each property builder</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.BuildResultType(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},System.Action{System.Reflection.Emit.PropertyBuilder})">
            <summary>
            Creates and returns a <see cref="T:System.Type"/> for a class
            that contains the specified <paramref name="properties"/>
            </summary>
            <param name="name">The name of the type</param>
            <param name="properties">The properties the type should contain</param>
            <param name="configure">Action that is used for configuring each property builder</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.BuildResultType(System.Collections.Generic.IDictionary{System.String,System.Type},System.Action{System.Reflection.Emit.PropertyBuilder})">
            <summary>
            Creates and returns a <see cref="T:System.Type"/> for a class using a uniquely generated name
            that contains the specified <paramref name="properties"/>
            </summary>
            <param name="properties">The properties the type should contain</param>
            <param name="configure">Action that is used for configuring each property builder</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.CreatePassThroughConstructors(System.Reflection.Emit.TypeBuilder,System.Type)">
            <summary>
            Creates one constructor for each public constructor in the base class. Each constructor simply
            forwards its arguments to the base constructor, and matches the base constructor's signature.
            Supports optional values, and custom attributes on constructors and parameters.
            Does not support variadic constructors
            </summary>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.CreateProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Attaches a property to a type defined by the specified <paramref name="tb"/> with 
            the specified <paramref name="propertyName"/> and the specified <paramref name="propertyType"/>
            </summary>
            <param name="tb">The type builder</param>
            <param name="propertyName">The name of the property</param>
            <param name="propertyType">The type of the property</param>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.GetTypeBuilder(System.String,System.String)">
            <summary>
            Gets the type builder
            </summary>
            <param name="assemblyName">The name of the assembly</param>
            <param name="name">The name of the type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeBuilderHelpers.BuildCustomAttributes(System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData})">
            <summary>
            Builds the attribute builder that contains the <paramref name="customAttributes"/>
            </summary>
            <param name="customAttributes">The custom attributes</param>
            <returns></returns>
        </member>
        <member name="T:Atom.TypeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="F:Atom.TypeExtensions.mSimpleTypes">
            <summary>
            The member of the <see cref="P:Atom.TypeExtensions.SimpleTypes"/>
            </summary>
        </member>
        <member name="F:Atom.TypeExtensions.mNumericTypes">
            <summary>
            The member of the <see cref="P:Atom.TypeExtensions.NumericTypes"/>
            </summary>
        </member>
        <member name="F:Atom.TypeExtensions.mIntegralNumericTypes">
            <summary>
            The member of the <see cref="P:Atom.TypeExtensions.IntegralNumericTypes"/>
            </summary>
        </member>
        <member name="F:Atom.TypeExtensions.mFloatingPointNumericTypes">
            <summary>
            The member of the <see cref="P:Atom.TypeExtensions.FloatingPointNumericTypes"/>
            </summary>
        </member>
        <member name="P:Atom.TypeExtensions.NumericTypes">
            <summary>
            The numeric types
            </summary>
        </member>
        <member name="P:Atom.TypeExtensions.IntegralNumericTypes">
            <summary>
            The integral numeric types
            </summary>
        </member>
        <member name="P:Atom.TypeExtensions.FloatingPointNumericTypes">
            <summary>
            The floating point numeric types
            </summary>
        </member>
        <member name="P:Atom.TypeExtensions.SimpleTypes">
            <summary>
            The simple class/struct types
            </summary>
        </member>
        <member name="P:Atom.TypeExtensions.FuncTypes">
            <summary>
            The available types of the <see cref="T:System.Func`1"/>
            </summary>
        </member>
        <member name="P:Atom.TypeExtensions.ActionTypes">
            <summary>
            The available types of the <see cref="T:System.Action"/>
            </summary>
        </member>
        <member name="P:Atom.TypeExtensions.TypeToCSharpKeywordMapper">
            <summary>
            Maps the type names to their related CSharp keywords
            </summary>
        </member>
        <member name="M:Atom.TypeExtensions.GetPublicConstants(System.Type)">
            <summary>
            Gets the public constant fields of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetInternalConstants(System.Type)">
            <summary>
            Gets the internal constant fields of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProtectedConstants(System.Type)">
            <summary>
            Gets the protected constant fields of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProtectedInternalConstants(System.Type)">
            <summary>
            Gets the protected internal constant fields of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPrivateProtectedConstants(System.Type)">
            <summary>
            Gets the private protected constant fields of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPrivateConstants(System.Type)">
            <summary>
            Gets the private constant fields of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetInternalMembers(System.Type)">
            <summary>
            Gets the internal members of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProtectedMembers(System.Type)">
            <summary>
            Gets the protected members of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProtectedInternalMembers(System.Type)">
            <summary>
            Gets the protected internal members of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPrivateProtectedMembers(System.Type)">
            <summary>
            Gets the private protected members of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPrivateMembers(System.Type)">
            <summary>
            Gets the private members of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProperties(System.Type,System.String[])">
            <summary>
            Gets the properties with the specified <paramref name="propertyNames"/> of the specified <paramref name="type"/>.
            NOTE: The properties are returned in the order where the property names are requested!
            </summary>
            <param name="type">The type</param>
            <param name="propertyNames">The name of the properties</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetOrderedProperties(System.Type)">
            <summary>
            Gets the properties of the specified <paramref name="type"/> ordered based on their declaration type.
            NOTE: The base type properties appear first!
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetDeclaredProperties(System.Type)">
            <summary>
            Gets the declared public properties from the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPropertyAndSubPropertyTypes(System.Type)">
            <summary>
            Recursively searches for the types of the properties of the specified <paramref name="type"/> and
            its sub properties
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetInternalProperties(System.Type)">
            <summary>
            Gets the internal properties of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProtectedProperties(System.Type)">
            <summary>
            Gets the protected properties of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProtectedInternalProperties(System.Type)">
            <summary>
            Gets the protected internal properties of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPrivateProtectedProperties(System.Type)">
            <summary>
            Gets the private protected properties of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPrivateProperties(System.Type)">
            <summary>
            Gets the private properties of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetInternalMethods(System.Type)">
            <summary>
            Gets the internal methods of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProtectedMethods(System.Type)">
            <summary>
            Gets the protected methods of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetProtectedInternalMethods(System.Type)">
            <summary>
            Gets the protected internal methods of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPrivateProtectedMethods(System.Type)">
            <summary>
            Gets the private protected methods of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetPrivateMethods(System.Type)">
            <summary>
            Gets the private methods of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsFloatingPointNumericType(System.Type)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="type"/>
            is a floating point numeric type. Both nullable and non-nullable types
            are checked.
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsIntegralNumericType(System.Type)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="type"/>
            is an integral numeric type. Both nullable and non-nullable types
            are checked.
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsComplexType(System.Type)">
            <summary>
            Checks whether the <paramref name="type"/> is a complex type
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetInheritanceTreeTypes(System.Type,System.Boolean)">
            <summary>
            Gets the types that compose the inheritance tree of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <param name="shouldIncludeRootType">A flag indicating whether the <paramref name="type"/> should be included to the result</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.InheritsFrom(System.Type,System.Type)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="type"/> inherits from
            the specified <paramref name="typeOrGenericTypeDefinition"/>. If the <paramref name="typeOrGenericTypeDefinition"/>
            is the same as the <paramref name="type"/> then <see cref="!:false"/> is returned!
            </summary>
            <param name="type">The type</param>
            <param name="typeOrGenericTypeDefinition">The type or the generic type definition</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsOfType(System.Type,System.Type)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="type"/> is of
            the specified <paramref name="typeOrGenericTypeDefinition"/>. The <paramref name="typeOrGenericTypeDefinition"/>
            may be either an interface or any other type or generic type definition
            </summary>
            <param name="type">The type</param>
            <param name="typeOrGenericTypeDefinition">The type or the generic type definition</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Gets the method from the specified <paramref name="type"/> with the specified <paramref name="name"/>
            the specified <paramref name="genericArgumentTypes"/> if any and the specified <paramref name="parameterTypes"/>
            if any.
            </summary>
            <param name="type">The type</param>
            <param name="name">The name</param>
            <param name="genericArgumentTypes">The type of the generic argument is any</param>
            <param name="parameterTypes">The type of the parameters if any</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetTypeFromGenericTypeDefinition(System.Type,System.Type)">
            <summary>
            Searches the inheritance tree of the specified <paramref name="type"/> for a type 
            that uses the specified <paramref name="genericTypeDefinition"/> as its template
            and returns that type if found and <see cref="!:null"/> otherwise.
            </summary>
            <param name="type">The type</param>
            <param name="genericTypeDefinition">The generic type definition</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.ContainsGenericArgument(System.Type,System.Type)">
            <summary>
            Returns a flag indicating whether the specific <paramref name="typeOrGenericTypeDefinition"/> is contained in any of the generic arguments
            of the specified <paramref name="type"/>.
            Ex.: type -> Task{IFailable{IEumerable{string}}}
                 typeOrGenericTypeDefinition -> IEnumerable{}
                 result -> true
                 
                 type -> Task{IFailable{IEumerable{string}}}
                 typeOrGenericTypeDefinition -> IEnumerable
                 result -> false
            </summary>
            <param name="type">The type</param>
            <param name="typeOrGenericTypeDefinition">The type of the generic argument to check if is contained in the generic arguments of the <paramref name="type"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetGenericTypeFromGenericTypeDefinition(System.Type,System.Type)">
            <summary>
            Attempts to retrieve a generic type that is based on the specified <paramref name="genericTypeDefinition"/> from
            the specified <paramref name="type"/> or one of its generic arguments
            <para>
            Ex.1: <paramref name="type"/> - Lazy{PropertyMapper{BillingDataModel}}
            </para>
            <para>
            <paramref name="genericTypeDefinition"/> - Lazy{}
            </para>
            <para>
            result - Lazy{PropertyMapper{BillingDataModel}}
            </para>
            <para>
            Ex.2: <paramref name="type"/> - Lazy{PropertyMapper{BillingDataModel}}
            </para>
            <para>
            <paramref name="genericTypeDefinition"/> - PropertyMapper{}
            </para>
            <para>
            result - PropertyMapper{BillingDataModel}
            </para>
            <para>
            Ex.3: <paramref name="type"/> - Lazy{PropertyMapper{BillingDataModel}}
            </para>
            <para>
            <paramref name="genericTypeDefinition"/> - IPropertyMapper{}
            </para>
            <para>
            result - null 
            </para>
            </summary>
            <param name="type">The type to search its generic arguments</param>
            <param name="genericTypeDefinition">The generic argument type generic type definition</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsPrimitive(System.Type)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="type"/> is a primitive type.
            The primitive types include all the structs, the enums and the <see cref="T:System.String"/>.
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsGenericIEnumerable(System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            or it's it self the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> implements the <see cref="T:System.Collections.IEnumerable"/>
            or it's it self the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is a <see cref="T:System.Nullable`1"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.CanHaveNullValue(System.Type)">
            <summary>
            Checks whether a <see cref="!:null"/> can be assigned to the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsNumber(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is a type that represents a number
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsDate(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is a type that represents a date
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.IsEnum(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is an enum or a nullable enum
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.HasParameterlessConstructor(System.Type)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="type"/>
            has a parameterless constructor
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.ToNormalizedFullName(System.Type,System.Boolean)">
            <summary>
            Gets the full type name that represents the specified <paramref name="type"/>.
            If the <paramref name="showGenericParameters"/> is set to <see cref="!:true"/>:
            Ex.: Task{IDictionary{string, int}} => System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{System.String, System.Int32}}.
            If the <paramref name="showGenericParameters"/> is set to <see cref="!:false"/>:
            Ex :Task{IDictionary{string, int}} => System.Threading.Tasks.Task.
            </summary>
        </member>
        <member name="M:Atom.TypeExtensions.ToNormalizedName(System.Type,System.Boolean)">
            <summary>
            Gets the type name that represents the specified <paramref name="type"/>.
            If the <paramref name="showGenericParameters"/> is set to <see cref="!:true"/>:
            Ex.: Task{IDictionary{string, int}} => Task{IDictionary{string, int}}.
            If the <paramref name="showGenericParameters"/> is set to <see cref="!:false"/>:
            Ex.: Task{IDictionary{string, int}} => Task.
            </summary>
        </member>
        <member name="M:Atom.TypeExtensions.GetPropertyAndSubPropertyTypes(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Recursively searches for the types of the properties of the specified <paramref name="type"/> and
            its sub properties
            </summary>
            <param name="type">The type</param>
            <param name="searchedTypes">The types whose sub-properties have been searched</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetTypeNameCore(System.Type,System.Func{System.Type,System.String},System.Boolean,System.Boolean)">
            <summary>
            Gets the full type name that represents the specified <paramref name="type"/> for every generic parameter,
            using the <paramref name="typeNameSelector"/> in order to select the name.
            </summary>
            <param name="type">The type</param>
            <param name="typeNameSelector">The name selector</param>
            <param name="showGenericParameters">A flag indicating whether the generic parameters should get aggregated to the result or not</param>
            <param name="useNullableFullTypeName">A flag indicating whether Nullable{} should be used instead of ? for the nullable types</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetTypeNameCore(System.Type,System.Func{System.Type,System.String})">
            <summary>
            Gets the full type name that represents the specified <paramref name="type"/>,
            using the <paramref name="typeNameSelector"/> in order to select the name.
            </summary>
            <param name="type">The type</param>
            <param name="typeNameSelector">The name selector</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeExtensions.GetStructureTypeNameCore(System.Type,System.Func{System.Type,System.String})">
            <summary>
            Gets the full type name that represents the specified <paramref name="type"/>,
            using the <paramref name="typeNameSelector"/> in order to select the name.
            </summary>
            <param name="type">The type</param>
            <param name="typeNameSelector">The name selector</param>
            <returns></returns>
        </member>
        <member name="T:Atom.TypeHelpers">
            <summary>
            Helper methods for <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Atom.TypeHelpers.GetNonEnumerableType(System.Type)">
            <summary>
            Gets the T from the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the specified <paramref name="type"/>
            when it implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface
            </summary>
            <param name="type">The type that implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface</param>
            <returns></returns>3
        </member>
        <member name="M:Atom.TypeHelpers.GetNonNullableType(System.Type)">
            <summary>
            Gets the T from the <see cref="T:System.Nullable`1"/> of the specified <paramref name="type"/>
            when the <paramref name="type"/> is nullable, otherwise it returns the type
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.GetNullableType(System.Type)">
            <summary>
            Uses the specified <paramref name="type"/> to create the <see cref="T:System.Nullable`1"/>
            when the <paramref name="type"/> is a value type, otherwise it returns the <paramref name="type"/>
            </summary>
            <param name="type">The type whose nullable equivalent to get</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.IsInternal(System.Type)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="t"/> is marked as 'internal'
            </summary>
            <param name="t">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.ConvertNumber(System.Object,System.Type)">
            <summary>
            Converts the specified <paramref name="number"/> from its current type to
            the specified <paramref name="type"/>
            </summary>
            <param name="number">The number</param>
            <param name="type">The numeric type to convert the number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.AddNumbers(System.Type,System.Object,System.Object)">
            <summary>
            Adds the specified <paramref name="number1"/> to the specified <paramref name="number2"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number1">The first number</param>
            <param name="number2">The second number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.AddNumbers(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Sums the specified <paramref name="numbers"/> and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="numbers">The numbers</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.SubtractNumbers(System.Type,System.Object,System.Object)">
            <summary>
            Subtracts the specified <paramref name="subtracter"/> from the specified <paramref name="subtrahend"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="subtrahend">The subtrahend</param>
            <param name="subtracter">The subtracter</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.MultiplyNumbers(System.Type,System.Object,System.Object)">
            <summary>
            Multiplies the specified <paramref name="number1"/> with the specified <paramref name="number2"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number1">The first number</param>
            <param name="number2">The second number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.DivideNumbers(System.Type,System.Object,System.Object)">
            <summary>
            Divides the specified <paramref name="numerator"/> with the specified <paramref name="denominator"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="numerator">The numerator</param>
            <param name="denominator">The denominator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.AbsoluteNumber(System.Type,System.Object)">
            <summary>
            Gets the absolute representation of the specified <paramref name="number"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number">The number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.MinNumber(System.Type,System.Object,System.Object)">
            <summary>
            Gets the minimum value of the specified numbers and returns a number 
            of type <paramref name="type"/>.
            NOTE: When both numbers are <see cref="!:null"/> then <see cref="!:null"/> is returned, otherwise the
                  <see cref="!:null"/> number is casted to a 0!
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number1">The first number</param>
            <param name="number2">The second number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.TypeHelpers.MaxNumber(System.Type,System.Object,System.Object)">
            <summary>
            Gets the maximum value of the specified numbers and returns a number 
            of type <paramref name="type"/>.
            NOTE: When both numbers are <see cref="!:null"/> then <see cref="!:null"/> is returned, otherwise the
                  <see cref="!:null"/> number is casted to a 0!
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number1">The first number</param>
            <param name="number2">The second number</param>
            <returns></returns>
        </member>
        <member name="T:Atom.UnsignedIntegerExtensions">
            <summary>
            Extension methods for <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="M:Atom.UnsignedIntegerExtensions.ToEnumerableString(System.UInt32,System.String,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="count"/>
            using the specified forms
            </summary>
            <param name="count">The number of items</param>
            <param name="singularForm">Returns the string that represents the singular form</param>
            <param name="pluralForm">Returns the string that represents the plural form</param>
            <param name="zeroForm">Returns the string that represents the zero form</param>
            <returns></returns>
        </member>
        <member name="T:Atom.UriExtensions">
            <summary>
            Extension methods for <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="M:Atom.UriExtensions.OpenInBrowser(System.Uri)">
            <summary>
            Opens the link specified by the <paramref name="uri"/> to a browser
            </summary>
            <param name="uri">The Uri</param>
        </member>
        <member name="M:Atom.UriExtensions.ToVectorSource(System.Uri)">
            <summary>
            Gets the <see cref="T:Atom.VectorSource"/> that represents the specified <paramref name="uri"/>
            </summary>
            <param name="uri">The uri</param>
            <returns></returns>
        </member>
        <member name="M:Atom.UriExtensions.ToColorHex(System.Uri)">
            <summary>
            Gets the color hex value that represents the specified <paramref name="uri"/>
            </summary>
            <param name="uri">The uri</param>
            <returns></returns>
        </member>
        <member name="T:Atom.UrlHelpers">
            <summary>
            Helpers related to URLs
            </summary>
        </member>
        <member name="M:Atom.UrlHelpers.GetFileName(System.String)">
            <summary>
            Gets the file name from the specified <paramref name="path"/>
            </summary>
            <param name="path">The path</param>
            <returns></returns>
        </member>
        <member name="M:Atom.UrlHelpers.Combine(System.String[])">
            <summary>
            Aggregates the specified <paramref name="parts"/> to create the URL path
            </summary>
            <param name="parts">The parts</param>
            <returns></returns>
        </member>
        <member name="M:Atom.UrlHelpers.Combine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Aggregates the specified <paramref name="parts"/> to create the URL path
            </summary>
            <param name="parts">The parts</param>
            <returns></returns>
        </member>
        <member name="T:Atom.VectorSourceExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.VectorSource"/>
            </summary>
        </member>
        <member name="M:Atom.VectorSourceExtensions.IsNullOrEmpty(Atom.VectorSource)">
            <summary>
            Checks whether the vector source is null or empty
            </summary>
            <param name="vectorSource">The vector source</param>
        </member>
        <member name="T:Atom.XMLDocumentExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Xml.XmlDocument"/>
            </summary>
        </member>
        <member name="M:Atom.XMLDocumentExtensions.GetElementByTagName(System.Xml.XmlDocument,System.String)">
            <summary>
            Return the first XML node from the <paramref name="xmlDocument"/> with tag name <paramref name="tagName"/>.
            If not such element exists, null is returned.
            </summary>
            <param name="xmlDocument">The XML document</param>
            <param name="tagName">The name of the tag</param>
            <returns></returns>
        </member>
        <member name="T:Atom.XMLHelpers">
            <summary>
            Helper methods associated with the XML model
            </summary>
        </member>
        <member name="P:Atom.XMLHelpers.DefaultSettings">
            <summary>
            The default XML writer settings
            </summary>
        </member>
        <member name="M:Atom.XMLHelpers.ToXml(System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes the specified <paramref name="obj"/> to an XML string, using the specified <paramref name="namespaces"/> and the specified <paramref name="settings"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="namespaces">The name spaces</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Atom.XMLHelpers.ToXml(System.Object,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes the specified <paramref name="obj"/> to an XML string using the specified <paramref name="settings"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Atom.XMLHelpers.FromXml``1(System.String)">
            <summary>
            Deserializes the specified <paramref name="xml"/> to an object of the
            specified type
            </summary>
            <param name="xml">The XML</param>
        </member>
        <member name="M:Atom.XMLHelpers.FromXml(System.String,System.Type)">
            <summary>
            Deserializes the specified <paramref name="xml"/> to an object
            of the specified <paramref name="type"/>
            </summary>
        </member>
        <member name="M:Atom.XMLHelpers.ToXmlFile(System.Object,System.String,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes the specified <paramref name="obj"/> to XML and saves it to the specified <paramref name="filePath"/>
            using the specified <paramref name="settings"/> and the specified <paramref name="namespaces"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="filePath">The file path</param>
            <param name="namespaces">The namespaces</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Atom.XMLHelpers.ToXmlFile(System.Object,System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes the specified <paramref name="obj"/> to XML and saves it to the specified <paramref name="filePath"/>
            using the specified <paramref name="settings"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="filePath">The file path</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Atom.XMLHelpers.FromXmlFile``1(System.String)">
            <summary>
            Reads the XML file at the specified <paramref name="filePath"/> and deserializes it to
            an object of the specified type
            </summary>
            <param name="filePath">The file path</param>
        </member>
        <member name="M:Atom.XMLHelpers.FromXMLFileAsync(System.String,System.Type)">
            <summary>
            Reads the XML file at the specified <paramref name="filePath"/> and deserializes it to
            an object of the specified <paramref name="type"/>
            </summary>
            <param name="filePath">The file path</param>
            <param name="type">The type</param>
        </member>
        <member name="T:Atom.XMLNodeExtensions">
            <summary>
            The extension methods for <see cref="T:System.Xml.XmlNode"/>
            </summary>
        </member>
        <member name="M:Atom.XMLNodeExtensions.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Returns the attribute value with the specified <paramref name="attributeName"/> for the <paramref name="xmlNode"/>
            </summary>
            <param name="xmlNode">The XML node</param>
            <param name="attributeName">The attributes's name</param>
            <returns></returns>
        </member>
        <member name="T:Atom.XMLNodeListExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
        </member>
        <member name="M:Atom.XMLNodeListExtensions.AsXMLNodeEnumerable(System.Xml.XmlNodeList)">
            <summary>
            Returns the <paramref name="xmlNodeList"/> as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="xmlNodeList">The XML node list</param>
            <returns></returns>
        </member>
    </members>
</doc>
